<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Snow</title>
  
  <subtitle>光而不耀</subtitle>
  <link href="https://behappy00.github.io/atom.xml" rel="self"/>
  
  <link href="https://behappy00.github.io/"/>
  <updated>2023-10-14T17:11:14.895Z</updated>
  <id>https://behappy00.github.io/</id>
  
  <author>
    <name>Snow</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue在线预览word的五种姿态</title>
    <link href="https://behappy00.github.io/2023/10/15/vue%E5%9C%A8%E7%BA%BF%E9%A2%84%E8%A7%88word%E7%9A%84%E4%BA%94%E7%A7%8D%E5%A7%BF%E6%80%81/"/>
    <id>https://behappy00.github.io/2023/10/15/vue%E5%9C%A8%E7%BA%BF%E9%A2%84%E8%A7%88word%E7%9A%84%E4%BA%94%E7%A7%8D%E5%A7%BF%E6%80%81/</id>
    <published>2023-10-14T17:07:30.000Z</published>
    <updated>2023-10-14T17:11:14.895Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><a href="#方案一-docx-preview">方案一: docx-preview</a></li><li><a href="#方案二-mammoth">方案二: mammoth</a></li><li><a href="#方案三用docx云服务的在线预览">方案三:用docx云服务的在线预览,</a></li><li><a href="#方案四-直接用iframe-访问当当当跨域">方案四: 直接用iframe 访问,当当当~~跨域…</a></li><li><a href="#方案五-后端处理然后前端访问后端将word转换成pdf前端直接iframe读取">方案五: 后端处理然后前端访问,后端将word转换成pdf,前端直接iframe读取</a></li></ul><a id="more"></a><!-- TOC --><!-- /TOC --><hr><p>写在前面：</p><blockquote><p>如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com</p></blockquote><p>参考文章：</p><ol><li><a href="https://blog.csdn.net/qq_31334119/article/details/125636392?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168709750016800184193933%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=168709750016800184193933&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-5-125636392-null-null.142^v88^control_2,239^v2^insert_chatgpt&amp;utm_term=vue%20word%E9%A2%84%E8%A7%88%E6%8F%92%E4%BB%B6&amp;spm=1018.2226.3001.4187" target="_blank" rel="noopener">https://blog.csdn.net/qq_31334119/article/details/125636392?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522168709750016800184193933%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=168709750016800184193933&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-5-125636392-null-null.142^v88^control_2,239^v2^insert_chatgpt&amp;utm_term=vue%20word%E9%A2%84%E8%A7%88%E6%8F%92%E4%BB%B6&amp;spm=1018.2226.3001.4187</a></li></ol><h3 id="方案一-docx-preview"><a href="#方案一-docx-preview" class="headerlink" title="方案一: docx-preview"></a>方案一: docx-preview</h3><p>通过vue的插件 docx-preview,可以完成docx的预览,需要后端配合,将文件流转换为blob流,前端运用插件内的方法,直接渲染docx流</p><ul><li>对应文档链接:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/weixin_54000091/article/details/124606368</span><br></pre></td></tr></table></figure><ul><li>git相似方案:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gitee.com/tomiaa/vue-preview-word-file-docx#http://tomiaa.gitee.io/vue-preview-word-file-docx/#/</span><br></pre></td></tr></table></figure><ul><li>缺陷: 只支持docx,不支持doc<br>但是我没用,为啥我没用呢?!不光是因为不支持doc…而是后端人员不太配合,说不会转bolb流… 卒</li></ul><h3 id="方案二-mammoth"><a href="#方案二-mammoth" class="headerlink" title="方案二: mammoth"></a>方案二: mammoth</h3><ul><li>对应文档链接:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/qq_42697806/article/details/125423742</span><br></pre></td></tr></table></figure><ul><li>缺陷: docx文档预览(只能转换.docx文档，转换过程中复杂样式被忽，居中、首行缩进等)</li></ul><h3 id="方案三-用docx云服务的在线预览"><a href="#方案三-用docx云服务的在线预览" class="headerlink" title="方案三:用docx云服务的在线预览,"></a>方案三:用docx云服务的在线预览,</h3><p>但是后端提供的文件地址是要公开可访问的链接直接放弃</p><ul><li>对应文档链接:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/weixin_42190844/article/details/120869882</span><br></pre></td></tr></table></figure><h3 id="方案四-直接用iframe-访问-当当当-跨域…"><a href="#方案四-直接用iframe-访问-当当当-跨域…" class="headerlink" title="方案四: 直接用iframe 访问,当当当~~跨域…"></a>方案四: 直接用iframe 访问,当当当~~跨域…</h3><p>.</p><h3 id="方案五-后端处理然后前端访问-后端将word转换成pdf-前端直接iframe读取"><a href="#方案五-后端处理然后前端访问-后端将word转换成pdf-前端直接iframe读取" class="headerlink" title="方案五: 后端处理然后前端访问,后端将word转换成pdf,前端直接iframe读取"></a>方案五: 后端处理然后前端访问,后端将word转换成pdf,前端直接iframe读取</h3><ol><li>对应文档链接:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.jb51.net/article/231444.htm</span><br></pre></td></tr></table></figure><p><strong>后端特殊注意一点 response.setHeader(“Content-Disposition”, “inline; filename=111.pdf”);</strong></p><blockquote><p>content-disposition 指示如何处理响应内容。<br>inline：直接在页面显示<br>attchment：以附件形式下载</p></blockquote><p><img src="/2023/10/15/vue在线预览word的五种姿态/1.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#方案一-docx-preview&quot;&gt;方案一: docx-preview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#方案二-mammoth&quot;&gt;方案二: mammoth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#方案三用docx云服务的在线预览&quot;&gt;方案三:用docx云服务的在线预览,&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#方案四-直接用iframe-访问当当当跨域&quot;&gt;方案四: 直接用iframe 访问,当当当~~跨域…&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#方案五-后端处理然后前端访问后端将word转换成pdf前端直接iframe读取&quot;&gt;方案五: 后端处理然后前端访问,后端将word转换成pdf,前端直接iframe读取&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://behappy00.github.io/categories/学习笔记/"/>
    
    
    <category term="转载" scheme="https://behappy00.github.io/tags/转载/"/>
    
    <category term="Vue框架" scheme="https://behappy00.github.io/tags/Vue框架/"/>
    
  </entry>
  
  <entry>
    <title>vue3页面加载完成后获取宽度和高度</title>
    <link href="https://behappy00.github.io/2023/10/15/vue3%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E5%AE%8C%E6%88%90%E5%90%8E%E8%8E%B7%E5%8F%96%E5%AE%BD%E5%BA%A6%E5%92%8C%E9%AB%98%E5%BA%A6/"/>
    <id>https://behappy00.github.io/2023/10/15/vue3%E9%A1%B5%E9%9D%A2%E5%8A%A0%E8%BD%BD%E5%AE%8C%E6%88%90%E5%90%8E%E8%8E%B7%E5%8F%96%E5%AE%BD%E5%BA%A6%E5%92%8C%E9%AB%98%E5%BA%A6/</id>
    <published>2023-10-14T16:54:32.000Z</published>
    <updated>2023-10-14T17:05:04.010Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><a href="#vue3页面加载完成后获取宽度高度">vue3页面加载完成后获取宽度、高度</a></li><li><a href="#vue3之vue32获取dom元素的宽高">vue3之vue3.2获取dom元素的宽高</a><ul><li><a href="#未使用nexttike">未使用nextTike</a></li><li><a href="#使用refnexttick">使用ref+nextTick</a></li></ul></li><li><a href="#最新资讯">最新资讯</a></li><li><a href="#相关推荐">相关推荐</a></li><li><a href="#相关标签">相关标签</a></li></ul><a id="more"></a><!-- TOC --><!-- /TOC --><hr><p>写在前面：</p><blockquote><p>如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com</p></blockquote><p>参考文章：</p><ol><li><a href="https://www.yisu.com/zixun/798253.html" target="_blank" rel="noopener">https://www.yisu.com/zixun/798253.html</a></li></ol><h3 id="vue3页面加载完成后获取宽度、高度"><a href="#vue3页面加载完成后获取宽度、高度" class="headerlink" title="vue3页面加载完成后获取宽度、高度"></a>vue3页面加载完成后获取宽度、高度</h3><p>刚好H5项目有用到这个需求，页面加载完成后获取当前页面高度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;wrap&quot; :&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&apos;ts&apos;&gt;</span><br><span class="line">import &#123; defineComponent, reactive, nextTick, onMounted, toRefs &#125; from &quot;vue&quot;;</span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  name: &quot;Aboutus&quot;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    let state = reactive(&#123;</span><br><span class="line">      hHeight: 0,//页面高度</span><br><span class="line">    &#125;);</span><br><span class="line">  onMounted(() =&gt; &#123;</span><br><span class="line">    nextTick(()=&gt;&#123;</span><br><span class="line">        state.hHeight = document.documentElement.clientHeight;</span><br><span class="line">        console.log(document.documentElement.clientHeight)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  return &#123;</span><br><span class="line">      ...toRefs(state)</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>用vue3.2版本的也可以用语法糖来处理，直接上代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;wrap&quot; :&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; reactive, nextTick &#125; from &quot;vue&quot;</span><br><span class="line">const state = reactive(&#123;</span><br><span class="line">    hHeight: 0</span><br><span class="line">&#125;)</span><br><span class="line">nextTick(()=&gt;&#123;</span><br><span class="line">     state.hHeight = document.documentElement.clientHeight;</span><br><span class="line">     console.log(document.documentElement.clientHeight)</span><br><span class="line"> &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p> <img src="/2023/10/15/vue3页面加载完成后获取宽度和高度/1.png" alt="vue3页面加载完成后怎么获取宽度、高度"></p><h3 id="vue3之vue3-2获取dom元素的宽高"><a href="#vue3之vue3-2获取dom元素的宽高" class="headerlink" title="vue3之vue3.2获取dom元素的宽高"></a>vue3之vue3.2获取dom元素的宽高</h3><p><strong>知识点：ref，nextTike</strong></p><ul><li><p>ref可以用于dom对象的获取，以及创建一个响应式的普通对象类型</p></li><li><p>nextTick是一个函数，它接受一个函数作为参数，nextTick官网定义是&lsquo;将回调推迟到下一个 DOM 更新周期之后执行&rsquo;，</p></li></ul><h4 id="未使用nextTike"><a href="#未使用nextTike" class="headerlink" title="未使用nextTike"></a>未使用nextTike</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"> \* new page</span><br><span class="line"> \* @author: Blaine</span><br><span class="line"> \* @since: 2022-06-30</span><br><span class="line"> \* page\_nextTike.vue</span><br><span class="line">--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot; &gt;</span><br><span class="line">    &lt;ul ref=&quot;myRef&quot;&gt;</span><br><span class="line">      &lt;li v-for=&quot;(item, index) in pepleList&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;button @click=&quot;addHandle&quot;&gt;增加&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; onMounted, reactive, ref, nextTick &#125; from &apos;vue&apos;</span><br><span class="line">let pepleList = reactive&lt;string\[\]&gt;(\[&apos;蜘蛛侠&apos;, &apos;钢铁侠&apos;, &apos;美国队长&apos;\])</span><br><span class="line">const myRef = ref&lt;HTMLElement&gt;();</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  console.log(&apos;列表的高度是：&apos;, myRef.value?.clientHeight)</span><br><span class="line">&#125;)</span><br><span class="line">const addHandle =  async() =&gt; &#123;</span><br><span class="line">  pepleList.push(&apos;闪电侠&apos;)</span><br><span class="line">  // await nextTick()</span><br><span class="line">  console.log(&apos;列表的高度是：&apos;, myRef.value?.clientHeight)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/15/vue3页面加载完成后获取宽度和高度/2.gif" alt="vue3页面加载完成后怎么获取宽度、高度"></p><p><strong>注意：</strong>这里的list并没有立即增加</p><p>问题在于我们改变list的值时，vue并不是立刻去更新dom，而是在一个事件循环最后再去更新dom，这样可以避免不必要的计算和dom操作，对提高性能非常重要。</p><p>那么我们需要在dom更新完成后，再去获取ul的高度，这时候就需要用到nextTick了，</p><h4 id="使用ref-nextTick"><a href="#使用ref-nextTick" class="headerlink" title="使用ref+nextTick"></a>使用ref+nextTick</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line"> \* new page</span><br><span class="line"> \* @author: Blaine</span><br><span class="line"> \* @since: 2022-06-30</span><br><span class="line"> \* page\_nextTike.vue</span><br><span class="line">--&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot; &gt;</span><br><span class="line">    &lt;ul ref=&quot;myRef&quot;&gt;</span><br><span class="line">      &lt;li v-for=&quot;(item, index) in pepleList&quot; :key=&quot;index&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;button @click=&quot;addHandle&quot;&gt;增加&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; onMounted, reactive, ref, nextTick &#125; from &apos;vue&apos;</span><br><span class="line">let pepleList = reactive&lt;string\[\]&gt;(\[&apos;蜘蛛侠&apos;, &apos;钢铁侠&apos;, &apos;美国队长&apos;\])</span><br><span class="line">const myRef = ref&lt;HTMLElement&gt;();</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  console.log(&apos;列表的高度是：&apos;, myRef.value?.clientHeight)</span><br><span class="line">&#125;)</span><br><span class="line">const addHandle =  async() =&gt; &#123;</span><br><span class="line">  pepleList.push(&apos;闪电侠&apos;)</span><br><span class="line">  await nextTick()</span><br><span class="line">  console.log(&apos;列表的高度是：&apos;, myRef.value?.clientHeight)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cache.yisu.com/upload/information/20230424/112/6334.gif" alt="vue3页面加载完成后怎么获取宽度、高度"></p><h3 id="最新资讯"><a href="#最新资讯" class="headerlink" title="最新资讯"></a>最新资讯</h3><ul><li><a href="https://www.yisu.com/zixun/814582.html" target="_blank" rel="noopener">js中.sort()函数的用法与高级操作</a></li><li><a href="https://www.yisu.com/zixun/814625.html" target="_blank" rel="noopener">C++编译器和链接器工作原理及使用方法</a></li><li><a href="https://www.yisu.com/zixun/814627.html" target="_blank" rel="noopener">C++模板和泛型编程的相关介绍</a></li><li><a href="https://www.yisu.com/zixun/814685.html" target="_blank" rel="noopener">SpringBoot底层注解的相关介绍</a></li><li><a href="https://www.yisu.com/zixun/814555.html" target="_blank" rel="noopener">MYSQL8快速修改root密码的方法</a></li><li><a href="https://www.yisu.com/zixun/814564.html" target="_blank" rel="noopener">如何在JavaScript内置函数Map()</a></li><li><a href="https://www.yisu.com/zixun/814566.html" target="_blank" rel="noopener">Vuex localStorage的使用方法</a></li><li><a href="https://www.yisu.com/zixun/814575.html" target="_blank" rel="noopener">vue3+ts+elementPLus实现v-preview指令的方法</a></li><li><a href="https://www.yisu.com/zixun/814695.html" target="_blank" rel="noopener">JavaWeb中过滤器与监听器的应用方法</a></li><li><a href="https://www.yisu.com/zixun/814582.html" target="_blank" rel="noopener">js中.sort()函数的用法与高级操作</a></li></ul><h3 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h3><ul><li><a href="https://www.yisu.com/zixun/152009.html" target="_blank" rel="noopener">Vue3的响应式和以前的区别</a></li><li><a href="https://www.yisu.com/zixun/152219.html" target="_blank" rel="noopener">vue3默认把所有onSomething当作v-on事件绑定的原因</a></li><li><a href="https://www.yisu.com/zixun/152671.html" target="_blank" rel="noopener">Vue3 Composition API替换Vue Mixins的方法</a></li><li><a href="https://www.yisu.com/zixun/152846.html" target="_blank" rel="noopener">Vue3中如何改进VDOM</a></li><li><a href="https://www.yisu.com/zixun/155196.html" target="_blank" rel="noopener">Vue3项目打包后部署到服务器 请求不到后台接口解决方法</a></li><li><a href="https://www.yisu.com/zixun/157312.html" target="_blank" rel="noopener">vue3.0中使用postcss-pxtorem的具体方法</a></li><li><a href="https://www.yisu.com/zixun/158253.html" target="_blank" rel="noopener">vue3 源码解读之 time slicing的使用方法</a></li><li><a href="https://www.yisu.com/zixun/158307.html" target="_blank" rel="noopener">茶余饭后聊聊Vue3.0响应式数据那些事儿</a></li><li><a href="https://www.yisu.com/zixun/159163.html" target="_blank" rel="noopener">vue3中effect与computed两者之间的联系</a></li><li><a href="https://www.yisu.com/zixun/159188.html" target="_blank" rel="noopener">vue3修改link标签默认icon无效问题详解</a></li></ul><h3 id="相关标签"><a href="#相关标签" class="headerlink" title="相关标签"></a>相关标签</h3><p><a href="https://www.yisu.com/zixun/tags/45/" target="_blank" rel="noopener">vue组件</a><br><a href="https://www.yisu.com/zixun/tags/5417/" target="_blank" rel="noopener">vue插件</a><br><a href="https://www.yisu.com/zixun/tags/14304/" target="_blank" rel="noopener">vuejs</a><br><a href="https://www.yisu.com/zixun/tags/21504/" target="_blank" rel="noopener">vuedraggable</a><br><a href="https://www.yisu.com/zixun/tags/24475/" target="_blank" rel="noopener">vue框架</a><br><a href="https://www.yisu.com/zixun/tags/30631/" target="_blank" rel="noopener">vue.component</a><br><a href="https://www.yisu.com/zixun/tags/32851/" target="_blank" rel="noopener">vue2.0</a><br><a href="https://www.yisu.com/zixun/tags/42107/" target="_blank" rel="noopener">vuerouter</a><br><a href="https://www.yisu.com/zixun/tags/55018/" target="_blank" rel="noopener">vue-video-player</a><br><a href="https://www.yisu.com/zixun/tags/58473/" target="_blank" rel="noopener">MongoVUE</a><br><a href="https://www.yisu.com/zixun/tags/58645/" target="_blank" rel="noopener">vue-cli3.x</a><br><a href="https://www.yisu.com/zixun/tags/58791/" target="_blank" rel="noopener">vue.set</a><br><a href="https://www.yisu.com/zixun/tags/58804/" target="_blank" rel="noopener">.vue</a><br><a href="https://www.yisu.com/zixun/tags/59488/" target="_blank" rel="noopener">vue2.6</a><br><a href="https://www.yisu.com/zixun/tags/61639/" target="_blank" rel="noopener">vue.js2.0</a><br><a href="https://www.yisu.com/zixun/tags/63283/" target="_blank" rel="noopener">vue-devtools</a><br><a href="https://www.yisu.com/zixun/tags/65833/" target="_blank" rel="noopener">vue-pdf</a><br><a href="https://www.yisu.com/zixun/tags/67974/" target="_blank" rel="noopener">vue-resource</a><br><a href="https://www.yisu.com/zixun/tags/71763/" target="_blank" rel="noopener">vue.js组件</a><br><a href="https://www.yisu.com/zixun/tags/80143/" target="_blank" rel="noopener">vue-test-utils</a></p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#vue3页面加载完成后获取宽度高度&quot;&gt;vue3页面加载完成后获取宽度、高度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#vue3之vue32获取dom元素的宽高&quot;&gt;vue3之vue3.2获取dom元素的宽高&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#未使用nexttike&quot;&gt;未使用nextTike&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#使用refnexttick&quot;&gt;使用ref+nextTick&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#最新资讯&quot;&gt;最新资讯&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#相关推荐&quot;&gt;相关推荐&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#相关标签&quot;&gt;相关标签&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="解决方案" scheme="https://behappy00.github.io/categories/解决方案/"/>
    
    
    <category term="转载" scheme="https://behappy00.github.io/tags/转载/"/>
    
    <category term="Vue框架" scheme="https://behappy00.github.io/tags/Vue框架/"/>
    
  </entry>
  
  <entry>
    <title>java中用springboot连接oracle数据库</title>
    <link href="https://behappy00.github.io/2023/10/15/java%E4%B8%AD%E7%94%A8springboot%E8%BF%9E%E6%8E%A5oracle%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://behappy00.github.io/2023/10/15/java%E4%B8%AD%E7%94%A8springboot%E8%BF%9E%E6%8E%A5oracle%E6%95%B0%E6%8D%AE%E5%BA%93/</id>
    <published>2023-10-14T16:39:48.000Z</published>
    <updated>2023-10-14T16:52:36.033Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><a href="#1-java中用spring-boot连接oracle数据库">1. java中用spring boot连接oracle数据库</a></li><li><a href="#项目创建详解">项目创建详解</a><ul><li><a href="#1创建新的spring-boot项目-项目名为text"><strong>1.创建新的spring boot项目 项目名为text</strong></a></li><li><a href="#2创建有关文件"><strong>2.创建有关文件</strong></a></li><li><a href="#3pomxml文件"><strong>3.pom.xml文件</strong></a></li><li><a href="#4applicationyml-源文件文件类型不是这样的将原来的文件后缀改成yml-"><strong>4.application.yml （源文件文件类型不是这样的，将原来的文件后缀改成.yml ）</strong></a></li><li><a href="#5textconterllerjava文件"><strong>5.TextConterller.java文件</strong></a></li><li><a href="#6textmapperjava文件"><strong>6.TextMapper.java文件</strong></a></li><li><a href="#7textmapperxml文件"><strong>7.TextMapper.xml文件</strong></a></li><li><a href="#8项目运行测试"><strong>8.项目运行测试</strong></a></li></ul></li></ul><a id="more"></a><!-- TOC --><!-- /TOC --><hr><p>写在前面：</p><blockquote><p>如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com</p></blockquote><p>参考文章：</p><ol><li><a href="https://blog.csdn.net/weixin_44384605/article/details/118449107" target="_blank" rel="noopener">https://blog.csdn.net/weixin_44384605/article/details/118449107</a></li></ol><h3 id="1-java中用spring-boot连接oracle数据库"><a href="#1-java中用spring-boot连接oracle数据库" class="headerlink" title="1. java中用spring boot连接oracle数据库"></a>1. java中用spring boot连接oracle数据库</h3><p><strong>代码下载链接</strong><br><strong>百度云</strong>：<a href="https://pan.baidu.com/s/1dU\_z2pUS2NSfowI4\_mJ4Ow" target="_blank" rel="noopener">https://pan.baidu.com/s/1dU\_z2pUS2NSfowI4\_mJ4Ow</a><br><strong>提取码</strong>：mmlm  </p><p><strong>连接oracle主要是引进ojdbc 可以在pom.xml文件中加入</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.oracle.database.jdbc&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;ojdbc6&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;11.2.0.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="项目创建详解"><a href="#项目创建详解" class="headerlink" title="项目创建详解"></a>项目创建详解</h3><h4 id="1-创建新的spring-boot项目-项目名为text"><a href="#1-创建新的spring-boot项目-项目名为text" class="headerlink" title="1.创建新的spring boot项目 项目名为text"></a><strong>1.创建新的spring boot项目 项目名为text</strong></h4><p><img src="/2023/10/15/java中用springboot连接oracle数据库/1.png" alt></p><p><img src="/2023/10/15/java中用springboot连接oracle数据库/2.png" alt></p><p><img src="/2023/10/15/java中用springboot连接oracle数据库/3.png" alt>  </p><h4 id="2-创建有关文件"><a href="#2-创建有关文件" class="headerlink" title="2.创建有关文件"></a><strong>2.创建有关文件</strong></h4><p>下面是项目中创建的大体目录<br><img src="/2023/10/15/java中用springboot连接oracle数据库/4.png" alt></p><h4 id="3-pom-xml文件"><a href="#3-pom-xml文件" class="headerlink" title="3.pom.xml文件"></a><strong>3.pom.xml文件</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;2.5.2&lt;/version&gt;</span><br><span class="line">        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;groupId&gt;com.example&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;oracle_java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;</span><br><span class="line">    &lt;name&gt;oracle_java&lt;/name&gt;</span><br><span class="line">    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">&lt;!--        默认导入oracle连接包 因测试时会报错因此为采用--&gt;</span><br><span class="line">&lt;!--        &lt;dependency&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;groupId&gt;com.oracle.database.jdbc&lt;/groupId&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;artifactId&gt;ojdbc8&lt;/artifactId&gt;--&gt;</span><br><span class="line">&lt;!--            &lt;scope&gt;runtime&lt;/scope&gt;--&gt;</span><br><span class="line">&lt;!--        &lt;/dependency&gt;--&gt;</span><br><span class="line">&lt;!-- 引入ojdk6  用来替换ojdk8--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.oracle.database.jdbc&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;ojdbc6&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;11.2.0.4&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">&lt;!--后期引入  @Mapper用--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.4.6&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.1.1&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--后期引入  @Mapper用--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;excludes&gt;</span><br><span class="line">                        &lt;exclude&gt;</span><br><span class="line">                            &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">                            &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">                        &lt;/exclude&gt;</span><br><span class="line">                    &lt;/excludes&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">&lt;!--后期引入--&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.21.0&lt;/version&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;testFailureIgnore&gt;true&lt;/testFailureIgnore&gt;</span><br><span class="line">                &lt;/configuration&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">&lt;!--后期引入--&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;!--将Java代码下的xml编译到class下面去--&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">                    &lt;include&gt;**/*.yml&lt;/include&gt;</span><br><span class="line">                &lt;/includes&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;directory&gt;src/main/resources&lt;/directory&gt;</span><br><span class="line">                &lt;includes&gt;</span><br><span class="line">                    &lt;include&gt;**/*.*&lt;/include&gt;</span><br><span class="line">                    &lt;include&gt;**/*.yml&lt;/include&gt;</span><br><span class="line">                &lt;/includes&gt;</span><br><span class="line">            &lt;/resource&gt;</span><br><span class="line">        &lt;/resources&gt;</span><br><span class="line">    &lt;/build&gt;</span><br><span class="line"></span><br><span class="line">&lt;/project&gt;</span><br></pre></td></tr></table></figure><h4 id="4-application-yml-（源文件文件类型不是这样的，将原来的文件后缀改成-yml-）"><a href="#4-application-yml-（源文件文件类型不是这样的，将原来的文件后缀改成-yml-）" class="headerlink" title="4.application.yml （源文件文件类型不是这样的，将原来的文件后缀改成.yml ）"></a><strong>4.application.yml （源文件文件类型不是这样的，将原来的文件后缀改成.yml ）</strong></h4><p>设置自己的数据库信息 将username和password改成自己的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8080</span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    driverClassName: oracle.jdbc.driver.OracleDriver</span><br><span class="line">    url: jdbc:oracle:thin:@127.0.0.1:1521:orcl</span><br><span class="line">    username: system</span><br><span class="line">    password: 123456</span><br><span class="line">mybatis:</span><br><span class="line">  mapper-locations: classpath:mapper/*.xml</span><br><span class="line">  type-aliases-package: com.zhg.demo.mybatis.entity</span><br><span class="line">  configuration:</span><br><span class="line">    map-underscore-to-camel-case: true</span><br></pre></td></tr></table></figure><h4 id="5-TextConterller-java文件"><a href="#5-TextConterller-java文件" class="headerlink" title="5.TextConterller.java文件"></a><strong>5.TextConterller.java文件</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">package com.text.conterller;</span><br><span class="line"></span><br><span class="line">import com.text.mapper.TextMapper;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line">import javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;/text&quot;)</span><br><span class="line">public class TextConterller &#123;</span><br><span class="line">    @Resource</span><br><span class="line">    TextMapper textMapper;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(value = &quot;/name&quot;,method = RequestMethod.GET)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String getName(String code)&#123;</span><br><span class="line">        String name=textMapper.getName(code);</span><br><span class="line">        return  name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-TextMapper-java文件"><a href="#6-TextMapper-java文件" class="headerlink" title="6.TextMapper.java文件"></a><strong>6.TextMapper.java文件</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package com.text.mapper;</span><br><span class="line"></span><br><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line">@Mapper</span><br><span class="line">public interface TextMapper &#123;</span><br><span class="line">    String getName(String code);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-TextMapper-xml文件"><a href="#7-TextMapper-xml文件" class="headerlink" title="7.TextMapper.xml文件"></a><strong>7.TextMapper.xml文件</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;mapper namespace=&quot;com.text.mapper.TextMapper&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id = &quot;getName&quot; resultType=&quot;String&quot;&gt;</span><br><span class="line">     select name from v_emp where barcode=#&#123;code&#125; and  rownum = 1</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h4 id="8-项目运行测试"><a href="#8-项目运行测试" class="headerlink" title="8.项目运行测试"></a><strong>8.项目运行测试</strong></h4><p>测试连接<br><a href="http://localhost:8080/text/name?code=输入的内容" target="_blank" rel="noopener">http://localhost:8080/text/name?code=输入的内容</a></p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-java中用spring-boot连接oracle数据库&quot;&gt;1. java中用spring boot连接oracle数据库&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#项目创建详解&quot;&gt;项目创建详解&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1创建新的spring-boot项目-项目名为text&quot;&gt;&lt;strong&gt;1.创建新的spring boot项目 项目名为text&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2创建有关文件&quot;&gt;&lt;strong&gt;2.创建有关文件&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3pomxml文件&quot;&gt;&lt;strong&gt;3.pom.xml文件&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4applicationyml-源文件文件类型不是这样的将原来的文件后缀改成yml-&quot;&gt;&lt;strong&gt;4.application.yml （源文件文件类型不是这样的，将原来的文件后缀改成.yml ）&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5textconterllerjava文件&quot;&gt;&lt;strong&gt;5.TextConterller.java文件&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6textmapperjava文件&quot;&gt;&lt;strong&gt;6.TextMapper.java文件&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#7textmapperxml文件&quot;&gt;&lt;strong&gt;7.TextMapper.xml文件&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#8项目运行测试&quot;&gt;&lt;strong&gt;8.项目运行测试&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="解决方案" scheme="https://behappy00.github.io/categories/解决方案/"/>
    
    
    <category term="转载" scheme="https://behappy00.github.io/tags/转载/"/>
    
    <category term="SpringBoot项目" scheme="https://behappy00.github.io/tags/SpringBoot项目/"/>
    
    <category term="Vue框架" scheme="https://behappy00.github.io/tags/Vue框架/"/>
    
    <category term="前后端分离" scheme="https://behappy00.github.io/tags/前后端分离/"/>
    
  </entry>
  
  <entry>
    <title>BT知识科普</title>
    <link href="https://behappy00.github.io/2023/10/12/BT%E7%9F%A5%E8%AF%86%E7%A7%91%E6%99%AE/"/>
    <id>https://behappy00.github.io/2023/10/12/BT%E7%9F%A5%E8%AF%86%E7%A7%91%E6%99%AE/</id>
    <published>2023-10-12T14:22:27.000Z</published>
    <updated>2023-10-12T15:36:09.238Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><a href="#1bt下载慢原因">1.BT下载慢原因</a><ul><li><a href="#原因1-缺少开放环境">原因1: 缺少开放环境</a></li><li><a href="#原因2-带宽上下行不对等">原因2: 带宽上下行不对等</a></li><li><a href="#原因4-无人做种">原因4: 无人做种</a></li><li><a href="#原因5-网盘崛起">原因5: 网盘崛起</a></li></ul></li><li><a href="#bt下载软件">BT下载软件</a><ul><li><a href="#qbittorrent-45510-绿色便携增强版">qBittorrent 4.5.5.10 绿色便携增强版</a></li><li><a href="#utorrent-pro-v36046884">uTorrent Pro v3.6.0.46884</a></li></ul></li></ul><a id="more"></a><!-- TOC --><!-- /TOC --><hr><p>写在前面：</p><blockquote><p>如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com</p></blockquote><h3 id="1-BT下载慢原因"><a href="#1-BT下载慢原因" class="headerlink" title="1.BT下载慢原因"></a>1.BT下载慢原因</h3><p>要想知道为什么BT下载速度慢，首先要简单了解BT的原理及运作机制。<br>BT下载是P2P下载的一种，既每个用户都是服务器，每个用户都可以向互联网上正在下载同一文件的人发送数据，每个用户都可以收到互联网上其他人发送过来的数据。BT下载的速度都是其他人向你发送文件给你的，也就是说同时下载该文件的人越多，发送接收的数据就越多，速度就越快。<br>在BT下载中，你下载的文件来自于其他用户的分享，你的下载速度来自于其他分享者的上传速度。</p><h4 id="原因1-缺少开放环境"><a href="#原因1-缺少开放环境" class="headerlink" title="原因1: 缺少开放环境"></a>原因1: 缺少开放环境</h4><p>因为中国网络起步相对世界整体来说较晚，所以分到的IPV4地址只有4亿个，但中国却有14亿人口，与之相反的是美国，它们只有3亿人口却拥有15亿个IPv4地址。<br>国内的IPv4地址是不够分的，于是各大运营商干脆不发放IPv4地址，转而使用内网IP。<br>内网IP在BT下载中速度不受限制，但在上传做种中受到运营商的限制只能在内网IP池内分享。<br>传统的BT下载是在全球范围内组成BT网络，而国内的BT下载只能在国内甚至省内组成BT网络。<br>这样的结果就是同时下载的用户数量少，无法组成一个较为庞大的BT网络来互相分享文件。进而下载速度下降</p><h4 id="原因2-带宽上下行不对等"><a href="#原因2-带宽上下行不对等" class="headerlink" title="原因2: 带宽上下行不对等"></a>原因2: 带宽上下行不对等</h4><p>如果你测过网速你就会发现，自己的宽带只有下行带宽达到了运营商宣传的速度，而上行带宽只有下行带宽的三分之一或四分之一甚至更少。</p><p>原因3: 流氓软件(吸血用户)<br>迅雷只下载，不上传或仅在迅雷用户内上传，结合上面内网IP+上下行不对等，迅雷已经实现了国内BT垄断。<br>ABCDEF六位用户同时用BT下载一个文件，组成了一个6人的BT网。但因为DEF用的下载工具是迅雷，所以ABC无法接收到DEF发送的数据，原本6人的BT网在ABC视角只能获得3人的收益，但DEF却可以靠ABC发送的数据达到原本6人网络的速度。迅雷上传数据只发给用自己软件的用户，同时还吸其他用户的上传数据：</p><ol><li>把用户下载的文件私自存到自己服务器里，来达到冷门资源只有迅雷才有速度这一现象。</li><li>用P2P这种本来用户对用户互惠互利的免费下载协议收费，只有迅雷下载会员才能用迅雷的“高速“下载</li><li>把非会员作为会员的吸血工具，非会员下载到一定程度时会自动限速，延长下载时间给会员用户做种</li></ol><p>国内用户想高速下载BT文件只有选择加入迅雷的吸血网络，而随着用户的加入，迅雷的BT网络也越来越大，速度也随之提升，速度的提升又吸引一批用户加入，再扩大，再提速，再吸引。已经形成了一个闭环。</p><h4 id="原因4-无人做种"><a href="#原因4-无人做种" class="headerlink" title="原因4: 无人做种"></a>原因4: 无人做种</h4><p>BT下载速度取决于其他用户的上传速度，在每个人上传速度都不理想的情况下整个BT下载的速度就不理想。<br>做种指将自己的上传带宽贡献出来，来方便BT网络中的其他人下载。最简单的做法是下载后不移动下载好的文件，不关闭下载软件。<br>BT网络建立起来的本意是所有人一起贡献自己的带宽，来达到所有人高速下载。但现实中又有多少人贡献过自己的带宽呢？<br>国内用户大部分不了解P2P也不愿意去了解什么是P2P，不懂BT的基本原理。知道种子原理的人很少，愿意做种且自身硬件支持做种的就更少了。</p><p>因为一些种子没人保种，就会出现断种死种的情况，断种就是下了一半，另一半下不动了，死种就是根本下不了的种子。</p><h4 id="原因5-网盘崛起"><a href="#原因5-网盘崛起" class="headerlink" title="原因5: 网盘崛起"></a>原因5: 网盘崛起</h4><p>网盘靠着不会坏种，超长时间保存，方便管理文件等优点在近年抢走了大量的BT用户。<br>用户越多速度越快，网盘逐渐增加，导致BT用户总量变少了，很少人使用BT下载，速度自然就慢下来了</p><h3 id="BT下载软件"><a href="#BT下载软件" class="headerlink" title="BT下载软件"></a>BT下载软件</h3><h4 id="qBittorrent-4-5-5-10-绿色便携增强版"><a href="#qBittorrent-4-5-5-10-绿色便携增强版" class="headerlink" title="qBittorrent 4.5.5.10 绿色便携增强版"></a>qBittorrent 4.5.5.10 绿色便携增强版</h4><p>qBittorrent，免费开源BitTorrent客户端，磁力链接BT种子下载工具，无视敏感及版权文件，支持资源搜索引擎插件、订阅Tracker服务器列表、BT文件做种分享、DHT网络及匿名隐私，采用Vuze兼容协议加密，IP过滤用的Ajax技术，兼容Tracker及代-理服务器，基于UPnP/NAT-PMP端口映射排队优先次序。</p><p>qBittorrent项目旨在为μTorrent提供一种开源软件替代品。此外，qBittorrent在所有主要平台上运行并提供相同的功能。qBittorrent基于Qt工具包和libtorrent-rasterbar库。此版本是由github作者c0re100对原版进行二次开发的增强版。</p><p>功能特色：</p><ol><li>基于原版qBittorrent重编译，主要特色：自动屏蔽迅雷等BT下载工具吸血</li><li>增强提供了IP过滤规则高级功能，可以根据需要在选项自定义选择 tracker</li><li>增强提供了自动禁止来自中国地区的IP未知客户端功能（该选项默认关闭）</li><li>可以自动更新订阅公共Tracker服务器地址列表（该选项默认关闭）</li><li>提供下载完成后重新效验torrent种子文件功能（该选项默认开启）</li><li>解除原版客户端启动多开限制，不受原版限制可以多开运行</li></ol><p>如果你是 32位系统，那么只能选择 [qbittorrent.exe] 32位版。<br>如果你是 64位系统，那么请优先使用 [qbittorrent_x64.exe] 64位版，以使速度最大化。</p><p>下载地址：</p><h4 id="uTorrent-Pro-v3-6-0-46884"><a href="#uTorrent-Pro-v3-6-0-46884" class="headerlink" title="uTorrent Pro v3.6.0.46884"></a>uTorrent Pro v3.6.0.46884</h4><p>uTorrent Pro   v3.6.0.46884 是一款国外最流行BT种子下载神器、全球排名第一的BT下载客户端，默认不开机启动，不关联文件，不显示设备列表，uTorrent支持BitTorrent(BT扩展协议)、Magnet(磁力链接)，支持制作BT种子文件发布，支持DHT网络及UPnP映射，支持RSS订阅自动下载等。</p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1bt下载慢原因&quot;&gt;1.BT下载慢原因&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#原因1-缺少开放环境&quot;&gt;原因1: 缺少开放环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#原因2-带宽上下行不对等&quot;&gt;原因2: 带宽上下行不对等&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#原因4-无人做种&quot;&gt;原因4: 无人做种&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#原因5-网盘崛起&quot;&gt;原因5: 网盘崛起&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#bt下载软件&quot;&gt;BT下载软件&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#qbittorrent-45510-绿色便携增强版&quot;&gt;qBittorrent 4.5.5.10 绿色便携增强版&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#utorrent-pro-v36046884&quot;&gt;uTorrent Pro v3.6.0.46884&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://behappy00.github.io/categories/学习笔记/"/>
    
    
    <category term="转载" scheme="https://behappy00.github.io/tags/转载/"/>
    
    <category term="科普知识" scheme="https://behappy00.github.io/tags/科普知识/"/>
    
  </entry>
  
  <entry>
    <title>Java截取（提取）子字符串</title>
    <link href="https://behappy00.github.io/2023/10/03/Java%E6%88%AA%E5%8F%96%EF%BC%88%E6%8F%90%E5%8F%96%EF%BC%89%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://behappy00.github.io/2023/10/03/Java%E6%88%AA%E5%8F%96%EF%BC%88%E6%8F%90%E5%8F%96%EF%BC%89%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2023-10-03T09:59:56.000Z</published>
    <updated>2023-10-03T10:07:46.291Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><a href="#java截取提取子字符串substring">Java截取（提取）子字符串（substring()）</a><ul><li><a href="#1-substringint-beginindex-形式">1. substring(int beginIndex) 形式</a></li><li><a href="#2-substringint-beginindexint-endindex-形式">2. substring(int beginIndex，int endIndex) 形式</a></li><li><a href="#例-1">例 1</a></li></ul></li></ul><a id="more"></a><!-- TOC --><!-- /TOC --><hr><p>写在前面：</p><blockquote><p>如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com</p></blockquote><h3 id="Java截取（提取）子字符串（substring-）"><a href="#Java截取（提取）子字符串（substring-）" class="headerlink" title="Java截取（提取）子字符串（substring()）"></a>Java截取（提取）子字符串（substring()）</h3><p>在 String 中提供了两个截取字符串的方法，一个是从指定位置截取到字符串结尾，另一个是截取指定范围的内容。下面对这两种方法分别进行介绍。  </p><h4 id="1-substring-int-beginIndex-形式"><a href="#1-substring-int-beginIndex-形式" class="headerlink" title="1. substring(int beginIndex) 形式"></a>1. substring(int beginIndex) 形式</h4><p>此方式用于提取从索引位置开始至结尾处的字符串部分。调用时，括号中是需要提取字符串的开始位置，方法的返回值是提取的字符串。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str = &quot;我爱 [Java](http://c.biancheng.net/java/) 编程&quot;;</span><br><span class="line">String result = str.substring(3);</span><br><span class="line">System.out.println(result);    // 输出：Java 编程</span><br></pre></td></tr></table></figure><h4 id="2-substring-int-beginIndex，int-endIndex-形式"><a href="#2-substring-int-beginIndex，int-endIndex-形式" class="headerlink" title="2. substring(int beginIndex，int endIndex) 形式"></a>2. substring(int beginIndex，int endIndex) 形式</h4><p>此方法中的 beginIndex 表示截取的起始索引，截取的字符串中包括起始索引对应的字符；endIndex 表示结束索引，截取的字符串中不包括结束索引对应的字符，如果不指定 endIndex，则表示截取到目标字符串末尾。该方法用于提取位置 beginIndex 和位置 endIndex 位置之间的字符串部分。  </p><p>这里需要特别注意的是， 对于开始位置 beginIndex， Java 是基于字符串的首字符索引为 0 处理的，但是对于结束位置 endIndex，Java 是基于字符串的首字符索引为 1 来处理的，如图 1 所示。  </p><p><img src="/2023/10/03/Java截取（提取）子字符串/1.jpg" alt="图1 字符串中的字符索引">  </p><p>注意：substring() 方法是按字符截取，而不是按字节截取。</p><h4 id="例-1"><a href="#例-1" class="headerlink" title="例 1"></a>例 1</h4><p>创建一个字符串，对它使用 substring() 方法进行截取并输出结果。示例代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String\[\] args) &#123;</span><br><span class="line">    String day = &quot;Today is Monday&quot;;    //原始字符串</span><br><span class="line">    System.out.println(&quot;substring(0)结果：&quot;+day.substring(0));</span><br><span class="line">    System.out.println(&quot;substring(2)结果：&quot;+day.substring(2));</span><br><span class="line">    System.out.println(&quot;substring(10)结果：&quot;+day.substring(10));</span><br><span class="line">    System.out.println(&quot;substring(2,10)结果：&quot;+day.substring(2,10));</span><br><span class="line">    System.out.println(&quot;substring(0,5)结果：&quot;+day.substring(0,5));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出结果如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">substring(0)结果：Today is Monday</span><br><span class="line">substring(2)结果：day is Monday</span><br><span class="line">substring(10)结果：onday</span><br><span class="line">substring(2,10)结果：day is M</span><br><span class="line">substring(0,5)结果：Today</span><br></pre></td></tr></table></figure></p><p>本文转自 <a href="http://c.biancheng.net/view/830.html" target="_blank" rel="noopener">http://c.biancheng.net/view/830.html</a>，如有侵权，请联系删除。</p><p><a href="http://c.biancheng.net/java/" target="_blank" rel="noopener">Java教程</a></p><p>1 <a href="http://c.biancheng.net/java/10/" target="_blank" rel="noopener">Java入门基础及环境搭建</a></p><p>2 <a href="http://c.biancheng.net/java/20/" target="_blank" rel="noopener">Java程序设计基础</a></p><p>3 <a href="http://c.biancheng.net/java/30/" target="_blank" rel="noopener">Java流程控制语句</a></p><p>4 <a href="http://c.biancheng.net/java/40/" target="_blank" rel="noopener">Java字符串处理</a></p><p>4.1 <a href="http://c.biancheng.net/view/799.html" target="_blank" rel="noopener">Java定义字符串</a></p><p>4.2 <a href="http://c.biancheng.net/view/vip_7050.html" target="_blank" rel="noopener">小白如何使用Java API帮助文档？</a></p><p>4.3 <a href="http://c.biancheng.net/view/5820.html" target="_blank" rel="noopener">Java String和int的相互转换</a></p><p>4.4 <a href="http://c.biancheng.net/view/5790.html" target="_blank" rel="noopener">Java字符串拼接</a></p><p>4.5 <a href="http://c.biancheng.net/view/827.html" target="_blank" rel="noopener">Java获取字符串长度</a></p><p>4.6 <a href="http://c.biancheng.net/view/828.html" target="_blank" rel="noopener">Java字符串大小写转换</a></p><p>4.7 <a href="http://c.biancheng.net/view/829.html" target="_blank" rel="noopener">Java去除字符串中的空格</a></p><p>4.8 <a href="http://c.biancheng.net/view/830.html" target="_blank" rel="noopener">Java提取子字符串</a></p><p>4.9 <a href="http://c.biancheng.net/view/5807.html" target="_blank" rel="noopener">Java分割字符串</a></p><p>4.10 <a href="http://c.biancheng.net/view/834.html" target="_blank" rel="noopener">Java截取新闻标题</a></p><p>4.11 <a href="http://c.biancheng.net/view/836.html" target="_blank" rel="noopener">Java字符串的替换</a></p><p>4.12 <a href="http://c.biancheng.net/view/846.html" target="_blank" rel="noopener">Java字符串替换实例</a></p><p>4.13 <a href="http://c.biancheng.net/view/5808.html" target="_blank" rel="noopener">Java字符串比较</a></p><p>4.14 <a href="http://c.biancheng.net/view/vip_7052.html" target="_blank" rel="noopener">Java中容易混淆的空字符串和null</a></p><p>4.15 <a href="http://c.biancheng.net/view/5816.html" target="_blank" rel="noopener">Java查找字符串</a></p><p>4.16 <a href="http://c.biancheng.net/view/vip_7053.html" target="_blank" rel="noopener">【Java项目实战】校验文件名和邮箱地址</a></p><p>4.17 <a href="http://c.biancheng.net/view/vip_7054.html" target="_blank" rel="noopener">Java字符串实现简单加密解密</a></p><p>4.18 <a href="http://c.biancheng.net/view/852.html" target="_blank" rel="noopener">Java StringBuffer类</a></p><p>4.19 <a href="http://c.biancheng.net/view/vip_7056.html" target="_blank" rel="noopener">Java利用StringBuffer替换特殊字符</a></p><p>4.20 <a href="http://c.biancheng.net/view/5822.html" target="_blank" rel="noopener">String、StringBuffer和StringBuilder的区别</a></p><p>4.21 <a href="http://c.biancheng.net/view/5812.html" target="_blank" rel="noopener">Java正则表达式</a></p><p>4.22 <a href="http://c.biancheng.net/view/5814.html" target="_blank" rel="noopener">Pattern和Matcher的使用</a></p><p>4.23 <a href="http://c.biancheng.net/view/864.html" target="_blank" rel="noopener">Java正则表达式验证电话号码</a></p><p>4.24 <a href="http://c.biancheng.net/view/vip_7055.html" target="_blank" rel="noopener">Java使用正则表达式验证IP地址</a></p><p>5 <a href="http://c.biancheng.net/java/50/" target="_blank" rel="noopener">Java数字和日期处理</a></p><p>6 <a href="http://c.biancheng.net/java/60/" target="_blank" rel="noopener">Java内置包装类</a></p><p>7 <a href="http://c.biancheng.net/java/70/" target="_blank" rel="noopener">Java数组处理</a></p><p>8 <a href="http://c.biancheng.net/java/80/" target="_blank" rel="noopener">Java类和对象</a></p><p>9 <a href="http://c.biancheng.net/java/90/" target="_blank" rel="noopener">Java继承和多态</a></p><p>10 <a href="http://c.biancheng.net/java/100/" target="_blank" rel="noopener">Java异常处理</a></p><p>11 <a href="http://c.biancheng.net/java/110/" target="_blank" rel="noopener">Java集合、泛型和枚举</a></p><p>12 <a href="http://c.biancheng.net/java/120/" target="_blank" rel="noopener">Java反射机制</a></p><p>13 <a href="http://c.biancheng.net/java/130/" target="_blank" rel="noopener">Java输入/输出流</a></p><p>14 <a href="http://c.biancheng.net/java/java/135/" target="_blank" rel="noopener">Java注解</a></p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#java截取提取子字符串substring&quot;&gt;Java截取（提取）子字符串（substring()）&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-substringint-beginindex-形式&quot;&gt;1. substring(int beginIndex) 形式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-substringint-beginindexint-endindex-形式&quot;&gt;2. substring(int beginIndex，int endIndex) 形式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#例-1&quot;&gt;例 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://behappy00.github.io/categories/学习笔记/"/>
    
    
    <category term="转载" scheme="https://behappy00.github.io/tags/转载/"/>
    
    <category term="java" scheme="https://behappy00.github.io/tags/java/"/>
    
    <category term="java模块学习" scheme="https://behappy00.github.io/tags/java模块学习/"/>
    
    <category term="Java编码实践" scheme="https://behappy00.github.io/tags/Java编码实践/"/>
    
  </entry>
  
  <entry>
    <title>java读取文件更改并生成另一个文件</title>
    <link href="https://behappy00.github.io/2023/10/03/java%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E6%9B%B4%E6%94%B9%E5%B9%B6%E7%94%9F%E6%88%90%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6/"/>
    <id>https://behappy00.github.io/2023/10/03/java%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6%E6%9B%B4%E6%94%B9%E5%B9%B6%E7%94%9F%E6%88%90%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6/</id>
    <published>2023-10-03T09:58:08.000Z</published>
    <updated>2023-10-03T10:07:54.426Z</updated>
    
    <content type="html"><![CDATA[<hr><hr><p>写在前面：</p><blockquote><p>如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com</p></blockquote><a id="more"></a><!-- TOC --><!-- /TOC --><p>首先，用java读取文件和写入文件都其实很简单，但重点是修改文件。<br>修改可以为替换、删除、新增字符。所以不能用inputstream那种字节流的方式，以下例子使用BufferedReader的方式来读取每行的字符数据。<br>完成一个Util java文件如下：<br>主要要用到common-io.jar 包，其中有一些正则表达式规则来做替换工作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line">package com.zjhc.hcdream.util;</span><br><span class="line"></span><br><span class="line">import java.io.*;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.regex.Matcher;</span><br><span class="line">import java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by Gerrard on 2016-9-14.</span><br><span class="line"> */</span><br><span class="line">public class TransformUtil &#123;</span><br><span class="line">    public static void main(final String[] args) throws Exception &#123;</span><br><span class="line">        String inFile = &quot;D:/3XDATA/test/&quot;; // 输入文件路径</span><br><span class="line">        String outFile = &quot;D:/3XDATA/out/&quot;; // 输出文件路径</span><br><span class="line">        String paths=&quot;/user/hive/ggzyjy/&quot;;</span><br><span class="line">        String dbo=&quot;ggzyjy&quot;;</span><br><span class="line">        File file=new File(inFile);</span><br><span class="line">        File[] tempList = file.listFiles();</span><br><span class="line">        for (int i = 0; i &lt; tempList.length; i++) &#123;</span><br><span class="line">            if (tempList[i].isFile()) &#123;</span><br><span class="line">                tranformMethod(tempList[i].toString(),outFile,paths,dbo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void tranformMethod(String inFile,String outFile,String paths,String dbo) throws IOException &#123;</span><br><span class="line">        String fileName=&quot;&quot;;</span><br><span class="line">        BufferedReader bs  = null;</span><br><span class="line">        BufferedWriter bw = null;</span><br><span class="line">        try&#123;</span><br><span class="line">            bs = new BufferedReader(new FileReader(new File(inFile)));</span><br><span class="line">            List&lt;String&gt; outData =  new ArrayList&lt;String&gt;();</span><br><span class="line">            String line = null;</span><br><span class="line">            String[] data = null;</span><br><span class="line">            //如果确定ID1一直是整数的活，可以用整数比，否则可以用字符串的equals比较</span><br><span class="line">            int oldId1 = 0;</span><br><span class="line">            int newId1 = 0;</span><br><span class="line">            int oldId2 = -1;</span><br><span class="line">            int newId2 = -1;</span><br><span class="line">            int num=0;</span><br><span class="line">            int count=0;</span><br><span class="line">            while((line = bs.readLine()) != null)&#123;</span><br><span class="line">                String lowLine=line.toLowerCase();</span><br><span class="line">                // 把所有[]都去掉</span><br><span class="line">                lowLine=lowLine.replace(&quot;[&quot;,&quot;&quot;);</span><br><span class="line">                lowLine=lowLine.replace(&quot;]&quot;,&quot;&quot;);</span><br><span class="line">                if(num==1)&#123; // 字符修改处</span><br><span class="line">                    // 将Table换成</span><br><span class="line">                    if(lowLine.contains(&quot;table&quot;))&#123;</span><br><span class="line">                        lowLine=lowLine.replace(&quot;table&quot;,&quot;external table&quot;);</span><br><span class="line">                        lowLine=lowLine.replace(&quot;dbo&quot;,&quot;ggzyjy&quot;);</span><br><span class="line">                        // 获取表明</span><br><span class="line">                        Pattern pattern = Pattern.compile(&quot;ggzyjy.(.*)\\($&quot;);</span><br><span class="line">                        Matcher matcher = pattern.matcher(lowLine);</span><br><span class="line">                        while(matcher.find())&#123;</span><br><span class="line">                            fileName=matcher.group(1);</span><br><span class="line">                            fileName=fileName.trim();</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if(count==1)&#123;// 加固操作，只改()里面的</span><br><span class="line">                        // 替换字符类型</span><br><span class="line">                        boolean flag=false;</span><br><span class="line">                        String[] regex = &#123;&quot;nvarchar.*,$&quot;,&quot;datetime.*,$&quot;,&quot;bit.*,$&quot;,&quot;varchar.*,$&quot;,&quot;timestamp .*,$&quot;,</span><br><span class="line">                                &quot;date.*,$&quot;,&quot;ntext.*,$&quot;,&quot;int.*,$&quot;,&quot;bigint.*,$&quot;,&quot;float.*,$&quot;,&quot;double.*,$&quot;,&quot;numeric.*,$&quot;,&quot;nvarchar.*\\s+$&quot;,&quot;datetime.*\\s+$&quot;,&quot;bit.*\\s+$&quot;,&quot;varchar.*\\s+$&quot;,&quot;timestamp .*\\s+$&quot;,</span><br><span class="line">                                &quot;date.*\\s+$&quot;,&quot;ntext.*\\s+$&quot;,&quot;int.*\\s+$&quot;,&quot;bigint.*\\s+$&quot;,&quot;float.*\\s+$&quot;,&quot;double.*\\s+$&quot;,&quot;numeric.*\\s+$&quot;&#125;;// 设置最后一行不以逗号结尾的行</span><br><span class="line">                        String[] regex1=&#123;&quot;nvarchar.*&quot;,&quot;datetime.*&quot;,&quot;bit.*&quot;,&quot;varchar.*&quot;,&quot;timestamp .*&quot;,</span><br><span class="line">                                &quot;date.*&quot;,&quot;ntext.*&quot;,&quot;int.*&quot;,&quot;bigint.*&quot;,&quot;float.*&quot;,&quot;double.*&quot;,&quot;numeric.*\\s+$&quot;&#125;;</span><br><span class="line">                        for(int i=0;i&lt;regex.length;i++)&#123;</span><br><span class="line">                            Pattern pattern = Pattern.compile(regex[i]);</span><br><span class="line">                            Matcher matcher = pattern.matcher(lowLine);</span><br><span class="line">                            if(regex[i].startsWith(&quot;int&quot;) &amp;&amp; regex[i].endsWith(&quot;,$&quot;))&#123;</span><br><span class="line">                                lowLine = matcher.replaceAll(&quot;int ,&quot;);</span><br><span class="line">                            &#125;else if(regex[i].startsWith(&quot;bigint&quot;)  &amp;&amp; regex[i].endsWith(&quot;,$&quot;))&#123;</span><br><span class="line">                                lowLine = matcher.replaceAll(&quot;bigint ,&quot;);</span><br><span class="line">                            &#125;else if(regex[i].startsWith(&quot;float&quot;)  &amp;&amp; regex[i].endsWith(&quot;,$&quot;))&#123;</span><br><span class="line">                                lowLine = matcher.replaceAll(&quot;float ,&quot;);</span><br><span class="line">                            &#125;else if(regex[i].startsWith(&quot;double&quot;)  &amp;&amp; regex[i].endsWith(&quot;,$&quot;))&#123;</span><br><span class="line">                                lowLine = matcher.replaceAll(&quot;double ,&quot;);</span><br><span class="line">                            &#125;else if(regex[i].startsWith(&quot;numeric&quot;)  &amp;&amp; regex[i].endsWith(&quot;,$&quot;))&#123;</span><br><span class="line">                                lowLine = matcher.replaceAll(&quot;double ,&quot;);</span><br><span class="line">                            &#125;else if(regex[i].startsWith(&quot;int&quot;)  &amp;&amp; regex[i].endsWith(&quot;+$&quot;))&#123;</span><br><span class="line">                                lowLine = matcher.replaceAll(&quot;int&quot;);</span><br><span class="line">                            &#125;else if(regex[i].startsWith(&quot;bigint&quot;)  &amp;&amp; regex[i].endsWith(&quot;+$&quot;))&#123;</span><br><span class="line">                                lowLine = matcher.replaceAll(&quot;bigint&quot;);</span><br><span class="line">                            &#125;else if(regex[i].startsWith(&quot;float&quot;)  &amp;&amp; regex[i].endsWith(&quot;+$&quot;))&#123;</span><br><span class="line">                                lowLine = matcher.replaceAll(&quot;float&quot;);</span><br><span class="line">                            &#125;else if(regex[i].startsWith(&quot;double&quot;)  &amp;&amp; regex[i].endsWith(&quot;+$&quot;))&#123;</span><br><span class="line">                                lowLine = matcher.replaceAll(&quot;double&quot;);</span><br><span class="line">                            &#125;else if(regex[i].startsWith(&quot;numeric&quot;)  &amp;&amp; regex[i].endsWith(&quot;+$&quot;))&#123;</span><br><span class="line">                                lowLine = matcher.replaceAll(&quot;double&quot;);</span><br><span class="line">                            &#125;else&#123;</span><br><span class="line">                                if(regex[i].endsWith(&quot;+$&quot;))&#123;</span><br><span class="line">                                    lowLine = matcher.replaceAll(&quot;string &quot;);</span><br><span class="line">                                &#125;</span><br><span class="line">                                if(regex[i].endsWith(&quot;,$&quot;))&#123;</span><br><span class="line">                                    lowLine = matcher.replaceAll(&quot;string ,&quot;);</span><br><span class="line">                                &#125;</span><br><span class="line"></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if(count==2)&#123;</span><br><span class="line">                        String str=&quot;row format delimited\n&quot; +</span><br><span class="line">                                &quot;fields terminated by &apos;\\t&apos; \n&quot; +</span><br><span class="line">                                &quot;STORED AS TEXTFILE \n&quot; +</span><br><span class="line">                                &quot;location &apos;&quot;+paths+fileName+&quot;&apos; ;&quot;;</span><br><span class="line">                        outData.add(str);</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if(lowLine.endsWith(&quot;(&quot;) || lowLine.endsWith(&quot;)&quot;))&#123;</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if(!lowLine.equals(&quot;go&quot;))&#123;</span><br><span class="line">                        outData.add(lowLine);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if(lowLine.equals(&quot;go&quot;))&#123;</span><br><span class="line">                    num++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            // 在最后要新增的行数据</span><br><span class="line">            if(!outData.isEmpty())&#123;</span><br><span class="line">                bw = new BufferedWriter(new FileWriter(new File(outFile+fileName+&quot;.sql&quot;)));</span><br><span class="line">                for(String s : outData)&#123;</span><br><span class="line">                    bw.write(s + &quot;\r\n&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;catch(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally&#123;</span><br><span class="line">            if(bs != null)&#123;</span><br><span class="line">                bs.close();</span><br><span class="line">            &#125;</span><br><span class="line">            if(bw != null)&#123;</span><br><span class="line">                bw.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本文转自 <a href="https://blog.csdn.net/laijieyao/article/details/52540320" target="_blank" rel="noopener">https://blog.csdn.net/laijieyao/article/details/52540320</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;&lt;hr&gt;&lt;p&gt;写在前面：&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://behappy00.github.io/categories/学习笔记/"/>
    
    
    <category term="转载" scheme="https://behappy00.github.io/tags/转载/"/>
    
    <category term="java" scheme="https://behappy00.github.io/tags/java/"/>
    
    <category term="Java编码实践" scheme="https://behappy00.github.io/tags/Java编码实践/"/>
    
  </entry>
  
  <entry>
    <title>java中IO流详细解释</title>
    <link href="https://behappy00.github.io/2023/10/03/java%E4%B8%ADIO%E6%B5%81%E8%AF%A6%E7%BB%86%E8%A7%A3%E9%87%8A/"/>
    <id>https://behappy00.github.io/2023/10/03/java%E4%B8%ADIO%E6%B5%81%E8%AF%A6%E7%BB%86%E8%A7%A3%E9%87%8A/</id>
    <published>2023-10-03T09:46:22.000Z</published>
    <updated>2023-10-03T10:07:58.221Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><a href="#io流">IO流</a><ul><li><a href="#io流概述及其分类">IO流概述及其分类</a></li><li><a href="#常用的io流类">常用的IO流类</a></li><li><a href="#inputstream--fileinputstream-文件输入流">InputStream \&amp; FileInputStream 文件输入流</a></li><li><a href="#案例读取一个txt文件数据方法一">案例:读取一个txt文件数据(方法一)</a></li><li><a href="#案例读取一个txt文件数据方法二">案例:读取一个txt文件数据(方法二)</a></li><li><a href="#面试题read方法读取的是一个字节为什么返回是int而不是byte-">面试题:read()方法读取的是一个字节,为什么返回是int,而不是byte ？</a></li><li><a href="#outputstream--fileoutputstream-文件输出流">OutputStream \&amp; FileOutputStream 文件输出流</a></li><li><a href="#案例拷贝图片和音频">案例:拷贝图片和音频</a></li><li><a href="#字节数组拷贝之available方法">字节数组拷贝之available()方法</a></li><li><a href="#案例正确的拷贝文件的方法杯子思想缓冲思想">案例:正确的拷贝文件的方法（杯子思想、缓冲思想）</a></li><li><a href="#bufferedinputstream和bufferoutputstream">BufferedInputStream和BufferOutputStream</a></li><li><a href="#案例使用缓冲输入输出流拷贝文件">案例:使用缓冲输入输出流拷贝文件</a></li><li><a href="#带buffered的流和自己写的数组缓冲对比">带Buffered的流和自己写的数组缓冲对比</a></li><li><a href="#bufferoutputstream的flush和close方法的区别">BufferOutputStream的flush和close方法的区别</a></li><li><a href="#字节流读写中文乱码问题">字节流<strong>读写</strong>中文乱码问题</a></li><li><a href="#流的标准处理异常代码16版本及其以前">流的标准处理异常代码1.6版本及其以前</a></li><li><a href="#流的标准处理异常代码17以上版本">流的标准处理异常代码1.7以上版本</a></li><li><a href="#练习图片加密">练习:图片加密</a></li><li><a href="#练习根据用户输入的文件拷贝文件到当前项目目录">练习:根据用户输入的文件拷贝文件到当前项目目录</a></li><li><a href="#练习录入数据拷贝到文件">练习:录入数据拷贝到文件</a></li><li><a href="#字符流概念">字符流概念</a></li><li><a href="#filereader-读取字符流">FileReader 读取字符流</a></li><li><a href="#filewiter-写入字符流">FileWiter 写入字符流</a></li><li><a href="#案例字符流的拷贝">案例:字符流的拷贝</a></li><li><a href="#使用字符流的场景">使用字符流的场景</a></li></ul></li><li><a href="#带缓冲的字符流-bufferedreaderbufferedwriter">带缓冲的字符流 BufferedReader/BufferedWriter</a></li><li><a href="#装饰decorator设计模式">装饰(Decorator)设计模式</a></li><li><a href="#inputstreamreaderoutputstreamwriter">InputStreamReader\&amp;OutputStreamWriter</a></li><li><a href="#递归5-5个乘阶">递归(5！-5个乘阶)</a></li><li><a href="#sequenceinputstream-序列流">SequenceInputStream 序列流</a></li><li><a href="#bytearrayoutputstream字节数组输出流">ByteArrayOutputStream字节数组输出流</a></li><li><a href="#对象操作流objecoutputstream-objecinputstream-了解">对象操作流ObjecOutputStream\&amp; ObjecInputStream （了解）</a></li><li><a href="#serializable接口的id">Serializable接口的ID</a></li><li><a href="#打印流的概述和特点-掌握">打印流的概述和特点 (掌握)</a></li><li><a href="#标准输入输出流概述和输出语句了解">标准输入输出流概述和输出语句(了解)</a></li><li><a href="#随机访问流概述和读写数据">随机访问流概述和读写数据</a></li><li><a href="#dataoutputstreamdatainputstream">DataOutputStream\&amp;DataInputStream</a></li><li><a href="#properties的概述和作为map集合的使用">Properties的概述和作为Map集合的使用</a></li><li><a href="#捋一捋io流">捋一捋IO流</a></li></ul><a id="more"></a><!-- TOC --><!-- /TOC --><hr><p>写在前面：</p><blockquote><p>如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com</p></blockquote><h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><h2 id="IO流概述及其分类"><a href="#IO流概述及其分类" class="headerlink" title="IO流概述及其分类"></a>IO流概述及其分类</h2><p><strong>IO概念</strong></p><blockquote><p>IO流用来处理设备之间的数据传输,Java对数据的操作是通过流的方式<br>Java用于操作流的类都在IO包中，</p></blockquote><p><strong>流按流向分为两种:</strong></p><blockquote><p>输入流（读取数据）<br>输出流（写数据）</p></blockquote><p><strong>流按操作类型分为两种</strong>:</p><blockquote><p>字节流 : 字节流可以操作任何数据,因为在计算机中任何数据都是以字节的形式存储的<br>字符流 : 字符流只能操作纯字符数据，比较方便。</p></blockquote><h2 id="常用的IO流类"><a href="#常用的IO流类" class="headerlink" title="常用的IO流类"></a>常用的IO流类</h2><p><strong>字节流的抽象父类</strong></p><blockquote><p>InputStream<br>OutputStream</p></blockquote><p><strong>字符流的抽象父类：</strong></p><blockquote><p>Reader<br>Writer</p></blockquote><h2 id="InputStream-amp-FileInputStream-文件输入流"><a href="#InputStream-amp-FileInputStream-文件输入流" class="headerlink" title="InputStream &amp; FileInputStream 文件输入流"></a>InputStream &amp; FileInputStream 文件输入流</h2><p><strong>InputStream是抽象类，表示字节输入流。</strong></p><blockquote><p>直接已知子类：<br>●AudioInputStream<br>●ByteArrayInputStream<br>●FileInputStream(学习文件输入流)<br>●FilterInputStream<br>●ObjectInputStream<br>●PipedInputStream<br>●SequenceInputStream<br>●StringBufferInputStream</p></blockquote><p><strong>FileInputStream 文件输入流</strong></p><p><strong>概述</strong></p><blockquote><p>FileInputStream 从文件系统中的某个文件中获得输入字节。FileInputStream 用于读取诸如图像数据之类的原始字节流。要读取字符流，请考虑使用 FileReader</p></blockquote><p><strong>构造方法</strong></p><blockquote><p>FileInputStream(File file)<br>FileInputStream(String name)</p></blockquote><p><strong>成员方法</strong></p><blockquote><p>int read() 从此输入流中读取一个数据字节。</p></blockquote><h2 id="案例-读取一个txt文件数据-方法一"><a href="#案例-读取一个txt文件数据-方法一" class="headerlink" title="案例:读取一个txt文件数据(方法一)"></a>案例:读取一个txt文件数据(方法一)</h2><p><strong>知识点</strong></p><ul><li><p>1.FileInputStream用于读取文件数据，在构造方法中传入文件对象</p></li><li><p>2.构造方法，有可能抛出文件找不到的异常</p></li><li><p>3.read方法是每次读取一个字节的数据,把字节转成int返回</p><ul><li>读取数据也会抛出异常，比如突然文件某部份数据损坏了</li><li>读取的数据是文件编码的表值(ascii,GBK,unicode)</li><li>ascii是包含在GBK或者unicode中的</li><li>如果读取数据到最后，会返回一个-1（代表读完数据了）</li></ul></li><li><p>4.文件不用后，要关闭输入流，避免占用资源</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package lesson10;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 读取txt文件内容</span><br><span class="line"> * 1.通过FileInputStream来读取txt文件内容</span><br><span class="line"> * 2.读取内容通过read方法，</span><br><span class="line"> *   》read方法每次读文件1个字节(byte),把byte转成int返回</span><br><span class="line">      》当读到后的时候，返回-1，-1表示读取文件结束</span><br><span class="line">   3.当读完文件后，这个输入流要关闭，释放资源</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        //FileNotFoundException fnfe;</span><br><span class="line"></span><br><span class="line">        //案例：读取txt文件内容</span><br><span class="line">        //1.创建一个文件对象</span><br><span class="line">        File file = new File(&quot;a.txt&quot;);</span><br><span class="line">        </span><br><span class="line">        //2.创建一个文件输入流【读取文件数据】对象</span><br><span class="line">        FileInputStream fis1 = new FileInputStream(file);</span><br><span class="line">        </span><br><span class="line">        //再创建一个文件输入 流对象 </span><br><span class="line">        FileInputStream fis2 = new FileInputStream(&quot;b.txt&quot;);</span><br><span class="line">        </span><br><span class="line">        //3.读取a.txt的数据</span><br><span class="line">        /**</span><br><span class="line">         * 1.read方法每次读文件1个字节(byte),把byte转成int返回</span><br><span class="line">         * 2.当读到后的时候，返回-1，-1读取文件结束</span><br><span class="line">         */</span><br><span class="line">        System.out.println(fis1.read());</span><br><span class="line">        System.out.println(fis1.read());</span><br><span class="line">        System.out.println(fis1.read());</span><br><span class="line">        System.out.println(fis1.read());</span><br><span class="line">        </span><br><span class="line">        //4.关闭流</span><br><span class="line">        fis1.close();</span><br><span class="line">        fis2.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例-读取一个txt文件数据-方法二"><a href="#案例-读取一个txt文件数据-方法二" class="headerlink" title="案例:读取一个txt文件数据(方法二)"></a>案例:读取一个txt文件数据(方法二)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//1.创建一个文件对象</span><br><span class="line">File file = new File(&quot;abc.txt&quot;);</span><br><span class="line">System.out.println(file.getAbsolutePath());</span><br><span class="line">                </span><br><span class="line">//2.创建一个文件输入流</span><br><span class="line">FileInputStream inputStream = new FileInputStream(file);</span><br><span class="line">        </span><br><span class="line">int b;</span><br><span class="line">//while循环里，每次读取字节赋值给b</span><br><span class="line">while((b = inputStream.read()) != -1)&#123;</span><br><span class="line">System.out.println(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面试题-read-方法读取的是一个字节-为什么返回是int-而不是byte-？"><a href="#面试题-read-方法读取的是一个字节-为什么返回是int-而不是byte-？" class="headerlink" title="面试题:read()方法读取的是一个字节,为什么返回是int,而不是byte ？"></a>面试题:read()方法读取的是一个字节,为什么返回是int,而不是byte ？</h2><blockquote><p>因为字节输入流可以操作任意类型的文件,比如图片音频等,这些文件底层都是以二进制形式的存储的,如果每次读取都返回byte,有可能在读到中间的时候遇到111111111 那么这11111111是byte类型的-1,我们的程序是遇到-1就会停止不读了,后面的数据就读不到了,所以在读取的时候用int类型接收,如果11111111会在其前面补上 24个0凑足4个字节,那么byte类型的-1就变成int类型的255了这样可以保证整个数据读完,而结束标记的-1就是int类型</p></blockquote><hr><p><img src="/2023/10/03/java中IO流详细解释/1.webp" alt></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package lesson12;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //面试题:read()方法读取的是一个字节,为什么返回是int,而不是byte ？</span><br><span class="line">        //如果使用FileInputStream读取图片数据</span><br><span class="line">        /**</span><br><span class="line">         * 00010111 00010111 00010111 00010111</span><br><span class="line">         * 00010111 11111111 00010111 00010111</span><br><span class="line">         * </span><br><span class="line">         * byte:11111111 表示的-1</span><br><span class="line">         * int:00000000 00000000 00000000 11111111  byte转成int 补0 了不是-1   因此往后读数据</span><br><span class="line">         * </span><br><span class="line">         * 为什么11111111是表示-1？</span><br><span class="line">         * 因为计算机是以补码的方式计算</span><br><span class="line">         * 补码： 11111111 （-1）</span><br><span class="line">         * 反码： 11111110</span><br><span class="line">         * 原码:  10000001</span><br><span class="line">         * </span><br><span class="line">         * 假如使用FileInputStream读取图片的时候，</span><br><span class="line">         * 图片中间有一段数据刚好是 11111111，这八个一表示的-1，用byte接收</span><br><span class="line">         * java程序如果读取的是-1，后面的数据就不读取</span><br><span class="line">         * 如果把8个1转成int,那就是00000000 00000000 00000000 11111111,这个表示255，</span><br><span class="line">         * 就不是-1，归避后面数据没有读取问题</span><br><span class="line">         * </span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="OutputStream-amp-FileOutputStream-文件输出流"><a href="#OutputStream-amp-FileOutputStream-文件输出流" class="headerlink" title="OutputStream &amp; FileOutputStream 文件输出流"></a>OutputStream &amp; FileOutputStream 文件输出流</h2><ul><li><p>文件输出流是用于将数据写入 File 的输出流。</p></li><li><p>FileOutputStream 用于写入诸如图像数据之类的原始字节的流。</p></li><li><p>查看文档的构造方法和成员方法</p></li><li><p>案例:往一个abc.txt文件写数据（知识点）</p><ul><li><p>new FileOutputStream(file)这种构造方法，会把以前的内容都删除</p></li><li><p>new FileOutputStream(file,true);这种构造方法能追加内容</p></li><li><p>FileNotFoundException是IOException的子类</p></li><li><p>write(int b)，写数据</p></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package lesson13;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">/*      FileOutputStream:表示文件输出流，用于往文件写内容</span><br><span class="line"> *      </span><br><span class="line"> *      构造方法</span><br><span class="line"> *      FileOutputStream(String name)</span><br><span class="line"> *      FileOutputStream(File file) </span><br><span class="line"> *      </span><br><span class="line"> *      方法</span><br><span class="line"> *      write(int b);//每次写一个字节</span><br><span class="line"> *      write(byte[] b) ;//一次写多个字节</span><br><span class="line"> * */</span><br><span class="line">        </span><br><span class="line">        //案例：往b.txt 写个内容</span><br><span class="line">        //1.创建文件输出流对象</span><br><span class="line">        //FileOutputStream fos = new FileOutputStream(&quot;b.txt&quot;);</span><br><span class="line">        OutputStream fos = new FileOutputStream(&quot;b.txt&quot;);//多态写法</span><br><span class="line">        </span><br><span class="line">        //2.写数据 </span><br><span class="line">//      fos.write(97);//a</span><br><span class="line">//      fos.write(98);//b</span><br><span class="line">//      fos.write(99);//c</span><br><span class="line">        </span><br><span class="line">        //一次性写多个字节</span><br><span class="line">        byte[] bytes = &#123;97,98,99,100,101&#125;;</span><br><span class="line">        fos.write(bytes);</span><br><span class="line">        //3.关闭流</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例-拷贝图片和音频"><a href="#案例-拷贝图片和音频" class="headerlink" title="案例:拷贝图片和音频"></a>案例:拷贝图片和音频</h2><ul><li>原理，使用输入流读取数据，使用输出流写数据</li><li>画图讲原理和性能<br>每次都读一次字节，太慢，效率太低</li></ul><hr><p><img src="/2023/10/03/java中IO流详细解释/2.webp" alt></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package lesson14;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        </span><br><span class="line">        //案例:拷贝图片</span><br><span class="line">        /**</span><br><span class="line">         * 目的：结合输入流和输出流使用</span><br><span class="line">         * </span><br><span class="line">         * 图片路径：C:\Users\10301\Desktop\a\cm.jpg</span><br><span class="line">         */</span><br><span class="line">        </span><br><span class="line">        //1.先创建输入流对象和输出流对象</span><br><span class="line">        FileInputStream fis = new FileInputStream(&quot;C:/Users/10301/Desktop/a/cm.jpg&quot;);</span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;C:/Users/10301/Desktop/a/cm2.jpg&quot;);</span><br><span class="line">        </span><br><span class="line">        //2.通过输入流读取图片的数据</span><br><span class="line">        int b = 0;</span><br><span class="line">        while( (b = fis.read()) != -1)&#123;</span><br><span class="line">            //3.通过输出流写入图片数据</span><br><span class="line">            fos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //4.关闭流</span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        System.out.println(&quot;图片拷贝成功&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字节数组拷贝之available-方法"><a href="#字节数组拷贝之available-方法" class="headerlink" title="字节数组拷贝之available()方法"></a>字节数组拷贝之available()方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package lesson01;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        //案例:拷贝图片【优化一、这种方式在大文件下不建议使用】</span><br><span class="line">        /**</span><br><span class="line">         * 前面拷贝图片问题：每次只读一个字节，写入的时候也是一个字节一个字节写</span><br><span class="line">         *                  如果有10W个字节，就要读10W次，写10W次</span><br><span class="line">         * </span><br><span class="line">         * 字节数组拷贝之available()方法</span><br><span class="line">         */</span><br><span class="line">        //1.文件输入流</span><br><span class="line">        FileInputStream fis = new FileInputStream(&quot;C:/Users/10301/Desktop/a/cm.jpg&quot;);</span><br><span class="line">        int size = fis.available();//是返回文件的长度【字节为单位】</span><br><span class="line">        System.out.println(&quot;文件的大小:&quot; + size);</span><br><span class="line">        </span><br><span class="line">        //2.现在一次读文件大小的字节</span><br><span class="line">        //2.1定义一个字节数组</span><br><span class="line">        byte[] bytes = new byte[size];//相当于现在是一个空杯子</span><br><span class="line">        //2.2 把数据读到字节数组中</span><br><span class="line">        int r = fis.read(bytes);//这个方法的返回值读取到的实际长度</span><br><span class="line">        System.out.println(&quot;r:&quot; + r);</span><br><span class="line">        </span><br><span class="line">        //3.把字节数组一次性写入到文件</span><br><span class="line">        //3.1 输出流</span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;C:/Users/10301/Desktop/a/cm-副本.jpg&quot;);</span><br><span class="line">        //3.2 写数据</span><br><span class="line">        fos.write(bytes);</span><br><span class="line">        </span><br><span class="line">        //4.关闭流</span><br><span class="line">        fis.close();</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例-正确的拷贝文件的方法（杯子思想、缓冲思想）"><a href="#案例-正确的拷贝文件的方法（杯子思想、缓冲思想）" class="headerlink" title="案例:正确的拷贝文件的方法（杯子思想、缓冲思想）"></a>案例:正确的拷贝文件的方法（杯子思想、缓冲思想）</h2><blockquote><p>1.输入流读取数据的方法:<br>read(byte[] b) 读取指定字节数的数据<br>2.输出流写数据的方法:<br>write(byte[] b)<br>write(byte[] b, int off, int len)写出有效的字节个数</p></blockquote><hr><p><img src="/2023/10/03/java中IO流详细解释/3.webp" alt></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package lesson02;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 杯子思想,缓冲思想</span><br><span class="line"> * @author gyf</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        //案例:拷贝图片【优化二、这种方式开发中建议经常使用】</span><br><span class="line">        /**</span><br><span class="line">         * 1.每次只读一个字节，又觉得太慢</span><br><span class="line">         * 2.一次性读一个文件的所有数据，又怕内存装不下</span><br><span class="line">         *   内存只有2G,视频3G,这样就会内存溢出</span><br><span class="line">         * </span><br><span class="line">         * 3.最终解决方法：折中，定义每次读8KB</span><br><span class="line">         * </span><br><span class="line">         */</span><br><span class="line">        </span><br><span class="line">        //1.输入流</span><br><span class="line">        FileInputStream fis = new FileInputStream(&quot;C:/Users/10301/Desktop/a/cm.jpg&quot;);</span><br><span class="line">        //2.输出流</span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;C:/Users/10301/Desktop/a/cm-副本2.jpg&quot;);</span><br><span class="line">        </span><br><span class="line">        //3.定义个8kb字节数组，也叫缓冲区流</span><br><span class="line">        byte[] bytes =  new byte[1024 * 8];</span><br><span class="line">        </span><br><span class="line">        int len = 0;</span><br><span class="line">        int i = 0;</span><br><span class="line">        while( (len = fis.read(bytes)) != -1)&#123;</span><br><span class="line">            i++;</span><br><span class="line">            //4.写入文件</span><br><span class="line">            fos.write(bytes,0,len);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(&quot;读取的次数:&quot; + i);</span><br><span class="line">        </span><br><span class="line">        //5.关闭流</span><br><span class="line">        fis.close();</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BufferedInputStream和BufferOutputStream"><a href="#BufferedInputStream和BufferOutputStream" class="headerlink" title="BufferedInputStream和BufferOutputStream"></a>BufferedInputStream和BufferOutputStream</h2><ul><li>这两个流是内置了缓冲区流,也就是说内部有一个 字节数组</li><li>缓冲思想<br>字节流一次读写一个数组的速度明显比一次读写一个字节的速度快很多，<br>java本身在设计的时候,加入了数组这样的缓冲区效果，<br>也考虑到了这样的设计思想(装饰设计模式后面讲解)，所以提供了字节缓冲区流</li><li>BufferedInputStream<br>BufferedInputStream内置了一个缓冲区(数组)<br>从BufferedInputStream中读取一个字节时<br>BufferedInputStream会一次性从文件中读取8192个(8Kb), 存在缓冲区中, 返回给程序<br>程序再次读取时, 就不用找文件了, 直接从缓冲区中获取<br>直到缓冲区中所有的都被使用过, 才重新从文件中读取8192个</li><li>BufferedOutputStream<br>BufferedOutputStream也内置了一个缓冲区(数组)<br>程序向流中写出字节时, 不会直接写到文件, 先写到缓冲区中<br>直到缓冲区写满, BufferedOutputStream才会把缓冲区中的数据一次性写到文件里</li></ul><h2 id="案例-使用缓冲输入输出流拷贝文件"><a href="#案例-使用缓冲输入输出流拷贝文件" class="headerlink" title="案例:使用缓冲输入输出流拷贝文件"></a>案例:使用缓冲输入输出流拷贝文件</h2><hr><p><img src="/2023/10/03/java中IO流详细解释/4.webp" alt></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">package lesson03;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedInputStream;</span><br><span class="line">import java.io.BufferedOutputStream;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">        //1.创建文件输入流</span><br><span class="line">        FileInputStream fis = new FileInputStream(&quot;C:/Users/10301/Desktop/a/ghsy.mp3&quot;);</span><br><span class="line">        </span><br><span class="line">        //2.创建文件输出流</span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;C:/Users/10301/Desktop/a/ghsy-副本.mp3&quot;);</span><br><span class="line">        </span><br><span class="line">        //3.输入流读数据、输出流写数据</span><br><span class="line">        int b = 0;</span><br><span class="line">        while( (b = fis.read()) != -1)&#123;</span><br><span class="line">            fos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //4.关流</span><br><span class="line">        fis.close();</span><br><span class="line">        fos.close();</span><br><span class="line">        </span><br><span class="line">        System.out.println(&quot;音频拷贝完成...&quot;);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void test1() throws FileNotFoundException, IOException &#123;</span><br><span class="line">        /*  BufferedInputStream和BufferedOutputStream</span><br><span class="line">            &gt;这两个流是内置了缓冲区流,也就是说内部有一个字节数组</span><br><span class="line">            &gt;这个两个类没有前面我们写的好用，因为它内部每次读8kb字节，如果想读80kb,没办法</span><br><span class="line">    */</span><br><span class="line">            //案例：拷贝音频文件</span><br><span class="line">            //1.创建缓冲输入流</span><br><span class="line">            FileInputStream fis = new FileInputStream(&quot;C:/Users/10301/Desktop/a/ghsy.mp3&quot;);</span><br><span class="line">            BufferedInputStream bis = new BufferedInputStream(fis);</span><br><span class="line">            </span><br><span class="line">            //2.创建缓冲输出流</span><br><span class="line">            FileOutputStream fos = new FileOutputStream(&quot;C:/Users/10301/Desktop/a/ghsy-副本.mp3&quot;);</span><br><span class="line">            BufferedOutputStream bos =new BufferedOutputStream(fos);</span><br><span class="line">            </span><br><span class="line">            //3.输入流读数据、输出流写数据</span><br><span class="line">            </span><br><span class="line">            int b = 0;</span><br><span class="line">            // bis.read()方法，内部会读8kb数据</span><br><span class="line">            while( (b = bis.read()) != -1)&#123;</span><br><span class="line">                bos.write(b);//内部会写8kb数据</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            //4.关流,只需要关缓冲流，文件流不用关</span><br><span class="line">            bis.close();//【内部会关文件流输入流】</span><br><span class="line">            bos.close();//【内部会关文件流输出流】</span><br><span class="line">            </span><br><span class="line">            System.out.println(&quot;音频拷贝完成...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="带Buffered的流和自己写的数组缓冲对比"><a href="#带Buffered的流和自己写的数组缓冲对比" class="headerlink" title="带Buffered的流和自己写的数组缓冲对比"></a>带Buffered的流和自己写的数组缓冲对比</h2><blockquote><p>自己写 的数组的读写和带Buffered的读取哪个更快?<br>自己写数组会略胜一筹,因为读和写操作的是同一个数组<br>而Buffered操作的是两个数组</p></blockquote><h2 id="BufferOutputStream的flush和close方法的区别"><a href="#BufferOutputStream的flush和close方法的区别" class="headerlink" title="BufferOutputStream的flush和close方法的区别"></a>BufferOutputStream的flush和close方法的区别</h2><ul><li>flush()方法<br>用来刷新缓冲区的,刷新后可以再次写出</li><li>close()方法<br>用来关闭流释放资源的的,如果是带缓冲区的流对象的close()方法,不但会关闭流,还会再关闭流之前刷新缓冲区,关闭后不能再写出</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package lesson05;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedInputStream;</span><br><span class="line">import java.io.BufferedOutputStream;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        //BufferedOutputStream的flush和close方法的区别</span><br><span class="line">    /*  flush()方法</span><br><span class="line">            1.用来刷新缓冲区的,刷新后可以再次写出 </span><br><span class="line">        close()方法</span><br><span class="line">            2.用来关闭流释放资源的</span><br><span class="line">            3.如果是带缓冲区的流对象的close()方法,不但会关闭流,还会再关闭流之前刷新缓冲区,关闭后不能再写出 </span><br><span class="line">    */</span><br><span class="line">        </span><br><span class="line">        //案例：把a文件的内容拷贝到b文件</span><br><span class="line">        </span><br><span class="line">        //1.输入流</span><br><span class="line">        FileInputStream fis = new FileInputStream(&quot;a.txt&quot;);</span><br><span class="line">        BufferedInputStream bis = new BufferedInputStream(fis);</span><br><span class="line">        </span><br><span class="line">        //2.输出流</span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;b.txt&quot;);</span><br><span class="line">        BufferedOutputStream bos = new BufferedOutputStream(fos);</span><br><span class="line">        </span><br><span class="line">        //3.读写操作</span><br><span class="line">        int b = 0;</span><br><span class="line">        while( (b = bis.read()) != -1)&#123;</span><br><span class="line">            bos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        bos.flush();</span><br><span class="line">        bos.write(97);</span><br><span class="line">        //bos.flush();</span><br><span class="line">        //4.关闭流</span><br><span class="line">        bis.close();</span><br><span class="line">        bos.close();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字节流读写中文乱码问题"><a href="#字节流读写中文乱码问题" class="headerlink" title="字节流读写中文乱码问题"></a>字节流<strong>读写</strong>中文乱码问题</h2><blockquote><p>字节流读取中文:<br>字节流读取中文的问题<br>字节流在读中文的时候有可能会读到半个中文,造成乱码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package lesson06;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Demo06 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        //字节流读写中文乱码问题</span><br><span class="line"></span><br><span class="line">        //1.读数据</span><br><span class="line">        //创建文件输入流</span><br><span class="line">        FileInputStream fis = new FileInputStream(&quot;a.txt&quot;);</span><br><span class="line"></span><br><span class="line">        //读</span><br><span class="line">        //定义字节数组[杯子思想，缓冲区思想]</span><br><span class="line">        /**</span><br><span class="line">         * 在UTF-8编码表中，一个中文占3个字节,一个英文占1个字节</span><br><span class="line">         * 在GBK编译中，一个中文占2个字节</span><br><span class="line">         */</span><br><span class="line">        byte buf[] = new byte[3];</span><br><span class="line">        int len = 0;</span><br><span class="line">        while( (len = fis.read(buf)) != -1)&#123;</span><br><span class="line">            System.out.println(&quot;len:&quot; + len );</span><br><span class="line">            //把字节转成字符串</span><br><span class="line">            String s = new String(buf, 0, len);</span><br><span class="line">            System.out.println(&quot;s:&quot; + s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>字节流写入中文的问题<br>字节流直接操作的字节,所以写出中文必须将字符串转换成字节数组<br>写出回车换行 write(“\r\n”.getBytes());</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package lesson07;</span><br><span class="line"></span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123; </span><br><span class="line">        //案例：往a.txt文件写中文</span><br><span class="line">        </span><br><span class="line">        //1.输出流</span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;a.txt&quot;);</span><br><span class="line">        </span><br><span class="line">        //2.写中文</span><br><span class="line">        String s = &quot;你好，Gosling最近好吗？&quot;;</span><br><span class="line">        </span><br><span class="line">        //把字符转成字节数组</span><br><span class="line">        //byte[] bytes = s.getBytes();</span><br><span class="line">        </span><br><span class="line">        /**</span><br><span class="line">         * charsetName 字符编码 UTF-8(Unicode),GBK,ASCII</span><br><span class="line">         */</span><br><span class="line">        byte[] bytes = s.getBytes(&quot;UTF-8&quot;);</span><br><span class="line">        fos.write(bytes);</span><br><span class="line">        </span><br><span class="line">        //3.关流</span><br><span class="line">        fos.close();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流的标准处理异常代码1-6版本及其以前"><a href="#流的标准处理异常代码1-6版本及其以前" class="headerlink" title="流的标准处理异常代码1.6版本及其以前"></a>流的标准处理异常代码1.6版本及其以前</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">package lesson08;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException&#123;</span><br><span class="line">        //流的标准处理异常代码-jdk1.6版本及其以前</span><br><span class="line">        //案例：a.txt的内容拷贝到b.txt</span><br><span class="line">        </span><br><span class="line">        FileInputStream fis = new FileInputStream(&quot;a.txt&quot;);</span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;b.txt&quot;);</span><br><span class="line">        </span><br><span class="line">        try &#123;</span><br><span class="line">            //读写数据会抛出</span><br><span class="line">            int b = 0;</span><br><span class="line">            while((b = fis.read()) != -1)&#123;</span><br><span class="line">                fos.write(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            //关流</span><br><span class="line">            try &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125;finally &#123;</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void test1() throws FileNotFoundException &#123;</span><br><span class="line"></span><br><span class="line">        FileInputStream fis = new FileInputStream(&quot;a.txt&quot;);</span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;b.txt&quot;);</span><br><span class="line">        </span><br><span class="line">        try &#123;</span><br><span class="line">            //读写数据会抛出</span><br><span class="line">            int b = 0;</span><br><span class="line">            while((b = fis.read()) != -1)&#123;</span><br><span class="line">                fos.write(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;finally &#123;</span><br><span class="line">            //关流</span><br><span class="line">            try &#123;</span><br><span class="line">                fis.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            try &#123;</span><br><span class="line">                fos.close();</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="流的标准处理异常代码1-7以上版本"><a href="#流的标准处理异常代码1-7以上版本" class="headerlink" title="流的标准处理异常代码1.7以上版本"></a>流的标准处理异常代码1.7以上版本</h2><blockquote><p>原理：在try()中创建的流对象必须实现了AutoCloseable这个接口,如果实现了,在try后面的{}(读写代码)执行后就会自动调用,流对象的close方法将流关掉</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package lesson09;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)throws Exception &#123;</span><br><span class="line">        //流的标准处理异常代码1.7版本</span><br><span class="line">        /**</span><br><span class="line">         * 1.把流对象的声明放在try() 括号里面</span><br><span class="line">         * 2.操作流【读写数据】的代码放在花括号里面</span><br><span class="line">         * 3.这样写不用关闭流，java自动关闭流</span><br><span class="line">         * 4.在try的括号里的对象，必须是实现AutoCloseable的接口</span><br><span class="line">         */</span><br><span class="line">        try(</span><br><span class="line">            FileInputStream fis = new FileInputStream(&quot;a.txt&quot;);</span><br><span class="line">            FileOutputStream fos = new FileOutputStream(&quot;b.txt&quot;);</span><br><span class="line">            //Person p = new Person();</span><br><span class="line">            //声明一个自己输入流</span><br><span class="line">            MyInputStream myis = new MyInputStream();</span><br><span class="line">        )&#123;</span><br><span class="line">            int b = 0;</span><br><span class="line">            while((b = fis.read()) != -1)&#123;</span><br><span class="line">                fos.write(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Person&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class MyInputStream implements AutoCloseable&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void close() throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;我的输入流关闭了...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习-图片加密"><a href="#练习-图片加密" class="headerlink" title="练习:图片加密"></a>练习:图片加密</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package lesson10;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args)throws IOException &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        //练习:图片加密</span><br><span class="line">        </span><br><span class="line">        //1.输入输出流</span><br><span class="line">        FileInputStream fis = new FileInputStream(&quot;C:/Users/10301/Desktop/a/cm2.jpg&quot;);</span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;C:/Users/10301/Desktop/a/cm.jpg&quot;);</span><br><span class="line">        </span><br><span class="line">        //2.读写数据</span><br><span class="line">        /**</span><br><span class="line">         * 加密操作</span><br><span class="line">         * 解密操作</span><br><span class="line">         * </span><br><span class="line">         * 一个数异或2次，数据不变</span><br><span class="line">         */</span><br><span class="line">        int b = 0;</span><br><span class="line">        while((b = fis.read()) != -1)&#123;</span><br><span class="line">            fos.write(b ^ 5);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //3.关流</span><br><span class="line">        fis.close();</span><br><span class="line">        fos.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;图片加密完成&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习-根据用户输入的文件拷贝文件到当前项目目录"><a href="#练习-根据用户输入的文件拷贝文件到当前项目目录" class="headerlink" title="练习:根据用户输入的文件拷贝文件到当前项目目录"></a>练习:根据用户输入的文件拷贝文件到当前项目目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package lesson11;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        //练习:根据用户输入的文件[图片]拷贝文件到当前项目目录</span><br><span class="line">        //C:/Users/10301/Desktop/a/cm2.jpg</span><br><span class="line">        </span><br><span class="line">        //1.获取用户输入的文件路径</span><br><span class="line">        Scanner scanner = new Scanner(System.in);</span><br><span class="line">        System.out.println(&quot;请输入一个文件的路径[请不要输入文件夹路径]:&quot;);</span><br><span class="line">        String path = scanner.nextLine();</span><br><span class="line">        </span><br><span class="line">        //2.判断这个路径是否为文件</span><br><span class="line">        File file = new File(path);</span><br><span class="line">        if(file.isDirectory())&#123;</span><br><span class="line">            System.out.println(&quot;您输入的路径不是一个文件&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //3.如果是文件就拷贝</span><br><span class="line">        //3.1 输入流</span><br><span class="line">        FileInputStream fis = new FileInputStream(path);</span><br><span class="line">        </span><br><span class="line">        //3.2输出流</span><br><span class="line">        FileOutputStream fos = new FileOutputStream(file.getName());</span><br><span class="line">        </span><br><span class="line">        //3.3读写【性能】</span><br><span class="line">        byte[] buf = new byte[8 * 1024];</span><br><span class="line">        </span><br><span class="line">        int len = 0;</span><br><span class="line">        while((len = fis.read(buf)) != -1)&#123;</span><br><span class="line">            fos.write(buf, 0, len);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //3.4关流</span><br><span class="line">        fis.close();</span><br><span class="line">        fos.close();</span><br><span class="line">        </span><br><span class="line">        System.out.println(&quot;文件拷贝完成...&quot;);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习-录入数据拷贝到文件"><a href="#练习-录入数据拷贝到文件" class="headerlink" title="练习:录入数据拷贝到文件"></a>练习:录入数据拷贝到文件</h2><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;       /**</span><br><span class="line">&gt; </span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">         * 根据用户在键盘中输入的内容，然后写到一个文件中去</span><br><span class="line">         * </span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package lesson12;</span><br><span class="line"></span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        //练习:录入数据拷贝到文件</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        //1.创建一个文件输出流</span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;new.txt&quot;);</span><br><span class="line">        </span><br><span class="line">        //2.创建一个Scanner对象</span><br><span class="line">        Scanner scanner = new Scanner(System.in);</span><br><span class="line">        System.out.println(&quot;请输入需要录入内容...输入quit代表退出&quot;);</span><br><span class="line">        </span><br><span class="line">        //3.通过死循环来获取用户输入【当输入quit，代表不录入】</span><br><span class="line">        while(true)&#123;</span><br><span class="line">            //获取用户的输入</span><br><span class="line">            String line = scanner.nextLine();</span><br><span class="line">            </span><br><span class="line">            //退出循环</span><br><span class="line">            if(line.equals(&quot;quit&quot;))&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            //写入文件</span><br><span class="line">            fos.write(line.getBytes());</span><br><span class="line">            //换行</span><br><span class="line">            fos.write(&quot;\r\n&quot;.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //4.关流</span><br><span class="line">        fos.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符流概念"><a href="#字符流概念" class="headerlink" title="字符流概念"></a>字符流概念</h2><p><strong>字符流是什么</strong></p><blockquote><p>1、字符流是可以直接读写字符的IO流<br>2、字符流读取字符, 就要先读取到字节数据, 然后转为字符.<br>3、写入字符, 需要把字符转为字节再写出.</p></blockquote><p><strong>字符流有Reader和Writer两大派,开发中使用它们的子类(查看API)</strong></p><blockquote><p>FileReader 读取字符流类<br>FileWrite 写入字符流类</p></blockquote><h2 id="FileReader-读取字符流"><a href="#FileReader-读取字符流" class="headerlink" title="FileReader 读取字符流"></a>FileReader 读取字符流</h2><blockquote><p>查看API的方法<br>案例:使用FileReader 读取一个文本数据（知识点):<br>1、read方法是读取字符char<br>2、一个字符可能占用1个字节，2个字节，或者3个字节<br>3、占用字节个的数根据码表决定(ASCII:1字节，GBK:2字节 unicode:3个字节)<br>4、用int表示字节，假如读取到2个字节，int有4个字节，前个两个字节可以补0<br>5、GBK,unicode中，中文的字符的第一个字节都是负数，所以知道怎么去读取<br>6、读取的方式与FileInputStream字节流差不多，会用FileInputStream，就会用 FileReader</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">package lesson13;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 以后读纯文本文件，使用FileReader这个类，为什么？因为我们不用考虑乱码问题</span><br><span class="line"> */</span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        //读字节</span><br><span class="line">        FileInputStream fis = new FileInputStream(&quot;a.txt&quot;);</span><br><span class="line">        //int 00000000 00000000 00000000 11111111</span><br><span class="line">        System.out.println((byte)fis.read());</span><br><span class="line">        System.out.println((byte)fis.read());</span><br><span class="line">        System.out.println((byte)fis.read());</span><br><span class="line">        </span><br><span class="line">        System.out.println((byte)fis.read());</span><br><span class="line">    </span><br><span class="line">        System.out.println((byte)fis.read());</span><br><span class="line">        System.out.println((byte)fis.read());</span><br><span class="line">        System.out.println((byte)fis.read());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void test1() throws FileNotFoundException, IOException &#123;</span><br><span class="line">        //FileReader </span><br><span class="line">        /**</span><br><span class="line">         * FileReader 用于读取字符</span><br><span class="line">         */</span><br><span class="line">        </span><br><span class="line">        //1.创建对象</span><br><span class="line">        FileReader reader = new FileReader(&quot;a.txt&quot;);</span><br><span class="line">        </span><br><span class="line">        //2.读取数据</span><br><span class="line">        /**</span><br><span class="line">         * reader.read() : 先读取到字节数据, 然后转为字符</span><br><span class="line">         */</span><br><span class="line">        System.out.println((char)reader.read());</span><br><span class="line">        System.out.println((char)reader.read());</span><br><span class="line">        System.out.println((char)reader.read());</span><br><span class="line">        System.out.println((char)reader.read());</span><br><span class="line">        System.out.println((char)reader.read());</span><br><span class="line">        System.out.println(reader.read());</span><br><span class="line">        </span><br><span class="line">        int c;</span><br><span class="line">        while((c = reader.read()) != -1)&#123;</span><br><span class="line">            System.out.println((char)c);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //3.关闭流</span><br><span class="line">        reader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FileWiter-写入字符流"><a href="#FileWiter-写入字符流" class="headerlink" title="FileWiter 写入字符流"></a>FileWiter 写入字符流</h2><p><strong>查看API中FileWriter的方法</strong></p><p><strong>案例:使用FileWrite写入数据（知识点）</strong></p><blockquote><p>1.其实内部是通过一个字符数组缓冲区写入文件<br>2.内部方法，创建一个字符串长度的字符数组缓存区</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package lesson14;</span><br><span class="line"></span><br><span class="line">import java.io.FileWriter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * FileWiter:</span><br><span class="line"> * 掌握：</span><br><span class="line"> * 1.write方法使用</span><br><span class="line"> * 2.write方法内部实现，内部是通过一个字符数组缓冲区写入文件</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        //FileWiter 文件写入流、文件写入字符流</span><br><span class="line"></span><br><span class="line">        //案例：使用FileWiter往一个文件a.txt写内容</span><br><span class="line">        </span><br><span class="line">        //1.创建writer对象</span><br><span class="line">        FileWriter writer = new FileWriter(&quot;a.txt&quot;);</span><br><span class="line">        </span><br><span class="line">        //2.写内容</span><br><span class="line">        writer.write(&quot;你好!&quot;);</span><br><span class="line">        writer.write(&quot;\r\n&quot;);</span><br><span class="line">        writer.write(&quot;你好!&quot;);</span><br><span class="line">        writer.write(&quot;\r\n&quot;);</span><br><span class="line">        writer.write(&quot;你好!&quot;);</span><br><span class="line">        writer.write(&quot;\r\n&quot;);</span><br><span class="line">        writer.write(&quot;你好!&quot;);</span><br><span class="line">        </span><br><span class="line">        //3.关闭</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例-字符流的拷贝"><a href="#案例-字符流的拷贝" class="headerlink" title="案例:字符流的拷贝"></a>案例:字符流的拷贝</h2><blockquote><p>//案例:字符流的拷贝<br>//思路：用FileReader读字符,用FileWriter写字符</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package lesson15;</span><br><span class="line"></span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.FileWriter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        //案例:字符流的拷贝</span><br><span class="line">        //思路：用FileReader读字符,用FileWriter写字符</span><br><span class="line">        </span><br><span class="line">        //1.创建 “读取流” 对象</span><br><span class="line">        FileReader reader = new FileReader(&quot;a.txt&quot;);</span><br><span class="line">        </span><br><span class="line">        //2.创建 &quot;写入流&quot; 对象</span><br><span class="line">        FileWriter writer = new FileWriter(&quot;b.txt&quot;);</span><br><span class="line">        </span><br><span class="line">        //3.读取和写入【缓冲思想】</span><br><span class="line">        char[] buf = new char[8 * 1024];</span><br><span class="line">        int len = 0;</span><br><span class="line">        while( (len = reader.read(buf)) != -1)&#123;</span><br><span class="line">            writer.write(buf, 0, len);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //4.关闭流</span><br><span class="line">        reader.close();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void test1() throws FileNotFoundException, IOException &#123;</span><br><span class="line">        //1.创建 “读取流” 对象</span><br><span class="line">        FileReader reader = new FileReader(&quot;a.txt&quot;);</span><br><span class="line">        </span><br><span class="line">        //2.创建 &quot;写入流&quot; 对象</span><br><span class="line">        FileWriter writer = new FileWriter(&quot;b.txt&quot;);</span><br><span class="line">        </span><br><span class="line">        //3.读取和写入</span><br><span class="line">        int c = 0;</span><br><span class="line">        while((c = reader.read()) != -1)&#123;</span><br><span class="line">            writer.write(c);</span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        //4.关闭流</span><br><span class="line">        reader.close();</span><br><span class="line">        writer.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用字符流的场景"><a href="#使用字符流的场景" class="headerlink" title="使用字符流的场景"></a>使用字符流的场景</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">package lesson01;</span><br><span class="line"></span><br><span class="line">import java.io.FileWriter;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //使用字符流的场景</span><br><span class="line">        /**</span><br><span class="line">         * 1.使用FileReader读取字符</span><br><span class="line">         *      原理：先读字节，把字节转成字符（byte -&gt; char）</span><br><span class="line">         * 2.使用FileWriter写入字符</span><br><span class="line">         *      原理：writer(String str),str 转成 字符数组 再转成 字节写入文件</span><br><span class="line">         *      (string -&gt; char[] -&gt; char -&gt; byte)</span><br><span class="line">         * 如果是读取文本文件，使用FileReader比较好,不考虑乱码问题</span><br><span class="line">         * 如果是写入文本文件，不建议使用FileWriter,直接使用FileOutputStream好一点</span><br><span class="line">         */</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="带缓冲的字符流-BufferedReader-BufferedWriter"><a href="#带缓冲的字符流-BufferedReader-BufferedWriter" class="headerlink" title="带缓冲的字符流 BufferedReader/BufferedWriter"></a>带缓冲的字符流 BufferedReader/BufferedWriter</h1><ol><li><p>BufferedReader</p><ol><li>read()方法读取字符时会一次读取若干字符到缓冲区,然后逐个返回给程序, 降低读取文件的次数, 提高效率</li></ol></li><li><p>BufferedWriter</p><ol><li>write()方法写出字符时会先写到缓冲区缓冲区写满时才会写到文件, 降低写文件的次数, 提高效率</li><li>查看源码:字符缓冲区的大小是8192</li></ol></li></ol><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">package lesson02;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.BufferedWriter;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.FileWriter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 带缓冲的字符流 BufferedReader/BufferedWriter</span><br><span class="line">         * 1.这两个类，内部都一个缓冲区，字符数组</span><br><span class="line">         * 2.br.read()方法，内部会读8192（8*1024）个字符</span><br><span class="line">         * 3.bw.write(),内部会写8192（8*1024）个字符</span><br><span class="line">         * </span><br><span class="line">         * 回顾：带缓冲的字节流,BufferedInputStream/BufferedOutputStream</span><br><span class="line">         * 1.这两个类，内部都一个缓冲区，字节数组</span><br><span class="line">         */</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        //需求：拷贝文件,a.txt -&gt; b.txt</span><br><span class="line">        //1.创建Reader</span><br><span class="line">        FileReader fr = new FileReader(&quot;a.txt&quot;);</span><br><span class="line">        BufferedReader br = new BufferedReader(fr);</span><br><span class="line">        </span><br><span class="line">        //2.创建Writer</span><br><span class="line">        FileWriter fw =new FileWriter(&quot;b.txt&quot;);</span><br><span class="line">        BufferedWriter bw = new BufferedWriter(fw);</span><br><span class="line">        </span><br><span class="line">        //3.读写</span><br><span class="line">        int c = 0;</span><br><span class="line">        while( (c = br.read()) != -1)&#123;</span><br><span class="line">            bw.write(c);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //4.关流</span><br><span class="line">        br.close();//内部关闭FileReader</span><br><span class="line">        bw.close();//内部关闭FileWriter</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BufferedReader的readLine()&amp;BufferedWriter的newLine()方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package lesson03;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        //BufferedReader的readLine()&amp;BufferedWriter的newLine()方法</span><br><span class="line">        /**</span><br><span class="line">         * 1.readLine()，每次读取一行数据</span><br><span class="line">         */</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        //1.创建Reader</span><br><span class="line">        FileReader fr = new FileReader(&quot;a.txt&quot;);</span><br><span class="line">        BufferedReader br = new BufferedReader(fr);</span><br><span class="line">        </span><br><span class="line">        //2.读一行数据</span><br><span class="line">/*      System.out.println(br.readLine());</span><br><span class="line">        System.out.println(br.readLine());</span><br><span class="line">        System.out.println(br.readLine());</span><br><span class="line">        System.out.println(br.readLine());</span><br><span class="line">        System.out.println(br.readLine());</span><br><span class="line">        System.out.println(br.readLine());*/</span><br><span class="line">        String line = null;</span><br><span class="line">        while((line = br.readLine()) != null)&#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //3.关流</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>BufferedWriter的newLine()方法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package lesson04;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.BufferedWriter;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.FileWriter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        //BufferedWriter的newLine()方法</span><br><span class="line">        // newLine()换行</span><br><span class="line">        </span><br><span class="line">        //往b.txt写a.txt文件的内容【一行一行拷贝,读一行写一行】</span><br><span class="line">        //1.创建Reader</span><br><span class="line">        FileReader fr = new FileReader(&quot;a.txt&quot;);</span><br><span class="line">        BufferedReader br = new BufferedReader(fr);</span><br><span class="line">        </span><br><span class="line">        //2.创建writer</span><br><span class="line">        FileWriter fw = new FileWriter(&quot;b.txt&quot;);</span><br><span class="line">        BufferedWriter bw = new BufferedWriter(fw);</span><br><span class="line">        </span><br><span class="line">        //3.读一行写一行</span><br><span class="line">        String line = null;</span><br><span class="line">        while((line = br.readLine()) != null)&#123;</span><br><span class="line">            bw.write(line);</span><br><span class="line">            /**</span><br><span class="line">             * 当使用readline读取一行数据时，不会读回车换行&quot;\r\n&quot;字符</span><br><span class="line">             */</span><br><span class="line">            //bw.write(&quot;\r\n&quot;);</span><br><span class="line">            bw.newLine();//换行</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //4.关流</span><br><span class="line">        br.close();</span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>案例:使用带缓冲的字符流拷贝文件</strong></p><p>**BufferedReader的readLine()&amp;BufferedWriter的newLine()方法 **</p><ol><li><p>BufferedReader的readLine()方法可以读取一行字符(不包含换行符号)</p></li><li><p>BufferedWriter的newLine()可以输出一个跨平台的换行符号”\r\n”</p></li></ol><p><strong>案例:将文本反转</strong></p><blockquote><p>一个文本文档上的文本反转,第一行和倒数第一行交换,第二行和倒数第二行交换</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">package lesson05;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.BufferedWriter;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.FileWriter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 掌握思想：</span><br><span class="line"> * 1.for循环的倒序遍历</span><br><span class="line"> */</span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        //案例:将文本反转写入另一个文件</span><br><span class="line">        </span><br><span class="line">        //1.把文本每一行内容读取出来存在List&lt;String&gt; 集合</span><br><span class="line">        //1.1 集合对象</span><br><span class="line">        List&lt;String&gt; list = new ArrayList&lt;String&gt;();</span><br><span class="line">        </span><br><span class="line">        //1.2一行行读取文件</span><br><span class="line">        BufferedReader br = new BufferedReader(new FileReader(&quot;a.txt&quot;));</span><br><span class="line">        String line = null;</span><br><span class="line">        while((line = br.readLine()) != null)&#123;</span><br><span class="line">            list.add(line);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(list);</span><br><span class="line">        </span><br><span class="line">        //2.当我们要写入文件时，倒序保存List集合中的内容到文件中</span><br><span class="line">        BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;b.txt&quot;));</span><br><span class="line">        for(int i = list.size() - 1 ; i&gt;=0; i--)&#123;</span><br><span class="line">            bw.write(list.get(i));</span><br><span class="line">            bw.newLine();//换行 </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //3.关闭流</span><br><span class="line">        br.close();</span><br><span class="line">        bw.close();</span><br><span class="line">        System.out.println(&quot;finish....&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="装饰-Decorator-设计模式"><a href="#装饰-Decorator-设计模式" class="headerlink" title="装饰(Decorator)设计模式"></a>装饰(Decorator)设计模式</h1><p><strong>装饰模式的概念:</strong><br>动态的给一个对象添加一些额外的功能，就增加功能来说，装饰模式比生成子类更为灵活。<br>在不必改变原类文件和使用继承的情况下，动态的扩展一个对象的功能。<br>它是创建一个包装对象，也就是使用装饰来包裹真实的对象。</p><p><strong>适用性</strong></p><ol><li>需要扩展一个类的功能，或给一个类添加附加职责。</li><li>当不能采用生成子类来实现，比如final类</li></ol><p><strong>装饰模式的实现方式</strong></p><ol><li>装饰对象和真实对象有相同的接口。</li><li>装饰对象包含一个真实对象的引用（reference）</li><li>装饰对象的所有方法，内部实现都是通过真实对象的引用来调用，然后实现自己的功能</li></ol><p>案例1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">package lesson06;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //</span><br><span class="line">        /**</span><br><span class="line">         * 一、设计模式【一种固定代码风格】</span><br><span class="line">         *     面试题：Java中有哪些设计模式</span><br><span class="line">         *     常用设计模式：装饰模式、单例模式、模版模式、适配器模式、代理模式、工厂模式...</span><br><span class="line">         * </span><br><span class="line">         * 二、装饰(Decorator)设计模式</span><br><span class="line">         *  1.装饰模式的概念:</span><br><span class="line">            装饰模式是动态的给一个对象添加一些额外的功能，就增加功能来说，装饰模式比生成子类更为灵活。</span><br><span class="line">            装饰模式是在不必改变原类文件和使用继承的情况下，动态的扩展一个对象的功能。</span><br><span class="line">            装饰模式是创建一个包装对象，也就是使用装饰来包裹真实的对象。  </span><br><span class="line">            </span><br><span class="line">            2.装饰模式的实现方式</span><br><span class="line">                1. 装饰对象和真实对象有相同的接口/抽象类。</span><br><span class="line">                2. 装饰对象包含一个真实对象的引用（reference）</span><br><span class="line">                3. 装饰对象的所有方法，内部实现都是通过真实对象的引用来调用，然后实现自己的功能</span><br><span class="line"></span><br><span class="line">            3.适用性</span><br><span class="line">                1. 需要扩展一个类的功能，或给一个类添加附加职责。</span><br><span class="line">                2. 当不能采用生成子类来实现，比如final类    </span><br><span class="line">         */</span><br><span class="line">        </span><br><span class="line">    /*  BufferedInputStream bis = new BufferedInputStream(new FileInputStream(&quot;a.txt&quot;));</span><br><span class="line">        BufferedOutputStream bos;</span><br><span class="line">        BufferedReader br;</span><br><span class="line">        BufferedWriter bw;*/</span><br><span class="line">        </span><br><span class="line">        /*GYFStudent stu = new GYFStudent();</span><br><span class="line">        stu.code();*/</span><br><span class="line">        </span><br><span class="line">        GYFStudent stu = new GYFStudent(new UniversityStudent());</span><br><span class="line">        stu.code();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//1.接口</span><br><span class="line">interface Person&#123;</span><br><span class="line">    public void code();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//2.接口实现类</span><br><span class="line">final class UniversityStudent implements Person&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void code() &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        System.out.println(&quot;在大学期间学了一点点C语言...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*class GYFStudent extends UniversityStudent&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void code() &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        super.code();</span><br><span class="line">        System.out.println(&quot;在GYF IT EDU 学习Java语言...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;*/</span><br><span class="line"></span><br><span class="line">class GYFStudent implements Person&#123;</span><br><span class="line"></span><br><span class="line">    private UniversityStudent us;</span><br><span class="line">    public GYFStudent(UniversityStudent us)&#123;</span><br><span class="line">        this.us = us;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //装饰对象的所有方法，内部实现都是通过真实对象的引用来调用，然后实现自己的功能</span><br><span class="line">    @Override</span><br><span class="line">    public void code() &#123;</span><br><span class="line">        us.code();</span><br><span class="line">        System.out.println(&quot;在GYF IT EDU 学习Java语言...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">package com.gyf.lesson09;</span><br><span class="line"></span><br><span class="line">public class Demo &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        GYFStudent stu = new GYFStudent();</span><br><span class="line">        </span><br><span class="line">        stu.coding();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">interface Person &#123;</span><br><span class="line">    //人可以具备编码的功能</span><br><span class="line">    public void coding();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//大学生</span><br><span class="line">class UniversityStudent implements Person&#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void coding() &#123;</span><br><span class="line">        System.out.println(&quot;我会一点c基础编程...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void piano()&#123;</span><br><span class="line">        System.out.println(&quot;我会钢琴...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//第一种继承类的写法</span><br><span class="line">class GYFStudent extends UniversityStudent&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void coding() &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        super.coding();</span><br><span class="line">        System.out.println(&quot;我会java基础编程了...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//class GYFStudent implements Person&#123;</span><br><span class="line">//  </span><br><span class="line">//  private UniversityStudent uStu;</span><br><span class="line">//  </span><br><span class="line">//  public GYFStudent(UniversityStudent uStu) &#123;</span><br><span class="line">//      super();</span><br><span class="line">//      this.uStu = uStu;</span><br><span class="line">//  &#125;</span><br><span class="line">//</span><br><span class="line">//</span><br><span class="line">//  @Override</span><br><span class="line">//  public void coding() &#123;</span><br><span class="line">//      // TODO Auto-generated method stub</span><br><span class="line">//      uStu.coding();</span><br><span class="line">//      System.out.println(&quot;我会java基础编程了...&quot;);</span><br><span class="line">//  &#125;</span><br><span class="line">//&#125;</span><br></pre></td></tr></table></figure><h1 id="InputStreamReader-amp-OutputStreamWriter"><a href="#InputStreamReader-amp-OutputStreamWriter" class="headerlink" title="InputStreamReader&amp;OutputStreamWriter"></a>InputStreamReader&amp;OutputStreamWriter</h1><ul><li><p>这两个类用于使用指定的码表读写字符</p></li><li><p>FileReader是使用默认码表读取文件, 如果需要使用指定码表读取请使用InputStreamReader(字符流,编码表)</p></li><li><p>FileWriter是使用默认码表写出文件, 如果需要使用指定码表写入请使用OutputStreamWriter(字符流,编码表)</p></li></ul><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package lesson07;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">/*      InputStreamReader&amp;OutputStreamWriter</span><br><span class="line">        1&gt;这两个类用于使用指定的码表读写字符*/</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        //案例1：使用指定 “码表UTF-8&amp;GBK” 读取字符</span><br><span class="line">        /**</span><br><span class="line">         * charsetName：字符编码的名称</span><br><span class="line">         */</span><br><span class="line">        FileInputStream fis = new FileInputStream(&quot;a.txt&quot;);</span><br><span class="line">        InputStreamReader isr = new InputStreamReader(fis, &quot;UTF-8&quot;);</span><br><span class="line">        </span><br><span class="line">        //读一个字符</span><br><span class="line">    /*  System.out.println((char)isr.read());</span><br><span class="line">        System.out.println((char)isr.read());*/</span><br><span class="line">        </span><br><span class="line">        //读一行</span><br><span class="line">        BufferedReader br = new BufferedReader(isr);</span><br><span class="line">        System.out.println(br.readLine());</span><br><span class="line">        </span><br><span class="line">        br.close();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>案例2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package lesson07;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedWriter;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.OutputStreamWriter;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 掌握：</span><br><span class="line"> * 1.当读取文件内容，还有写入文件，可以指定编码格式</span><br><span class="line"> * 2.使用InputStreamReader&amp;OutputStreamWriter这个类</span><br><span class="line"> * @author gyf</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class Demo02 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">    /*  OutputStreamWriter</span><br><span class="line">        1&gt;使用指定的编码 写入文件</span><br><span class="line">        */</span><br><span class="line">        </span><br><span class="line">        //1.创建Writer</span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;c.txt&quot;);</span><br><span class="line">        OutputStreamWriter osw = new OutputStreamWriter(fos, &quot;GBK&quot;);</span><br><span class="line">        BufferedWriter bw = new BufferedWriter(osw);</span><br><span class="line">        </span><br><span class="line">        //2.写</span><br><span class="line">        bw.write(&quot;你好，IO流...搞的我有点晕...&quot;);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        bw.write(&quot;你好，IO流...搞的我有点晕...&quot;);</span><br><span class="line">        bw.newLine();</span><br><span class="line">        </span><br><span class="line">        //3.关流</span><br><span class="line">        bw.close();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编码转换流图解</strong></p><p><img src="/2023/10/03/java中IO流详细解释/5.webp" alt></p><p><strong>练习:获取文本上字符出现的次数</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">package lesson08;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedWriter;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileReader;</span><br><span class="line">import java.io.FileWriter;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line">import java.util.Map.Entry;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 掌握:当键盘敲 enter键，两个字符\r\n : 回车换行</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        //练习:获取文本上字符出现的次数,把数据写入文件</span><br><span class="line">/*      思路：</span><br><span class="line">        1.遍历文本每一个字符</span><br><span class="line">        2.字符出现的次数存在Map中</span><br><span class="line">        *//**</span><br><span class="line">         * Map&lt;Character,Integer&gt; map = new HashMap&lt;Character,Integer&gt;();</span><br><span class="line">         * map.put(&apos;a&apos;,18);</span><br><span class="line">         * map.put(&apos;你&apos;,2);</span><br><span class="line">         *//*</span><br><span class="line">        3.把map中的数据写入文件*/</span><br><span class="line">        </span><br><span class="line">        //==================================</span><br><span class="line">        //1.创建Map集合</span><br><span class="line">        Map&lt;Character,Integer&gt; map = new HashMap&lt;Character,Integer&gt;();</span><br><span class="line">        //System.out.println(map.get(&apos;a&apos;));</span><br><span class="line">        </span><br><span class="line">        //2.遍历每一个字符,每一个字符出现的次数放到map中</span><br><span class="line">        FileReader reader = new FileReader(&quot;a.txt&quot;);</span><br><span class="line">        int c = 0;</span><br><span class="line">        while((c = reader.read()) != -1)&#123;</span><br><span class="line">            //int 还原 char</span><br><span class="line">            char ch = (char)c;</span><br><span class="line">            // 判断char是否在map中第一次出现</span><br><span class="line">            if(map.get(ch) == null)&#123;</span><br><span class="line">                map.put(ch, 1);</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                map.put(ch, map.get(ch) + 1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //3.把map中数据存在文件count.txt</span><br><span class="line">        //3.1 创建Writer</span><br><span class="line">        BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;count.txt&quot;));</span><br><span class="line">        </span><br><span class="line">        //3.2 遍历map,再写入数据</span><br><span class="line">        for(Entry&lt;Character, Integer&gt; entry :map.entrySet())&#123;</span><br><span class="line">            switch (entry.getKey()) &#123;</span><br><span class="line">            case &apos; &apos;:</span><br><span class="line">                bw.write(&quot;空格=&quot; + entry.getValue());</span><br><span class="line">                break;</span><br><span class="line">            case &apos;\t&apos;://\t表示tab 键字符</span><br><span class="line">                bw.write(&quot;tab键=&quot; + entry.getValue());</span><br><span class="line">                break;</span><br><span class="line">            case &apos;\r&apos;://</span><br><span class="line">                bw.write(&quot;回车=&quot; + entry.getValue());</span><br><span class="line">                break;</span><br><span class="line">            case &apos;\n&apos;://</span><br><span class="line">                bw.write(&quot;换行=&quot; + entry.getValue());</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                bw.write(entry.getKey() + &quot;=&quot; + entry.getValue());</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            bw.newLine();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //4.关流</span><br><span class="line">        reader.close();</span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="递归-5！-5个乘阶"><a href="#递归-5！-5个乘阶" class="headerlink" title="递归(5！-5个乘阶)"></a>递归(5！-5个乘阶)</h1><p><strong>概述</strong></p><ul><li><p>递归做为一种算法,在程序设计语言中广泛应用。<br>递归：就方法内部调用自己</p></li><li><p>递归的弊端:不能调用次数过多,容易导致栈内存溢出<br>递归的好处:不用知道循环次数</p></li><li><p>构造方法是否可以递归调用?<br>构造方法不能使用递归调用</p></li><li><p>递归调用是否必须有返回值?<br>不一定(可以有,也可以没有)</p></li></ul><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package lesson09;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //递归</span><br><span class="line">        /**</span><br><span class="line">         * 递归做为一种算法,在程序设计语言中广泛应用。 </span><br><span class="line">              递归：就方法内部调用自己</span><br><span class="line">              </span><br><span class="line">              递归的弊端:不能调用次数过多,容易导致栈内存溢出</span><br><span class="line">              递归的好处:不用知道循环次数</span><br><span class="line">         */</span><br><span class="line">        </span><br><span class="line">        //使用递归来写乘阶</span><br><span class="line">        int r = jiecheng(116);</span><br><span class="line">        System.out.println(&quot;r=&quot; + r);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * jiecheng(6)  i = 6</span><br><span class="line">     * 6 * jecheng(5)</span><br><span class="line">     * 6 * 5 * jecheng(4)</span><br><span class="line">     * 6 * 5 * 4 * jecheng(3)</span><br><span class="line">     * 6 * 5 * 4 * 3 * jecheng(2)</span><br><span class="line">     * 6 * 5 * 4 * 3 * 2 * jecheng(1)</span><br><span class="line">     * 6 * 5 * 4 * 3 * 2 * 1</span><br><span class="line">     */</span><br><span class="line">    public static int jiecheng(int i)&#123;</span><br><span class="line">        if(i==1)&#123;</span><br><span class="line">            return 1;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            return i * jiecheng(i - 1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 使用for循环写阶乘</span><br><span class="line">     */</span><br><span class="line">    public static void test1() &#123;</span><br><span class="line">        //5！-5的阶乘，5个乘阶</span><br><span class="line">        //5*4*3*2*1</span><br><span class="line">        </span><br><span class="line">        int r = 1;//结果</span><br><span class="line">        for(int i=1;i&lt;=5;i++)&#123;</span><br><span class="line">            r = r * i;</span><br><span class="line">            /**</span><br><span class="line">             * i = 1 ; r = 1*1</span><br><span class="line">             * i = 2 ; r = 1* 1 * 2</span><br><span class="line">             * i = 3 ; r = 1* 1 * 2 * 3</span><br><span class="line">             * .....</span><br><span class="line">             */</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(&quot;r=&quot; + r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>递归:文件目录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package lesson10;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 任务：计算一个文件夹大小：累加文件的大小</span><br><span class="line"> * @author gyf</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //递归:文件目录</span><br><span class="line">        /**打印出a目录所有文件名称，包括子文件夹的文件*/</span><br><span class="line">        </span><br><span class="line">        //1.创建目录对象</span><br><span class="line">        File dir = new File(&quot;C:/Users/10301/Desktop/a&quot;);</span><br><span class="line">        </span><br><span class="line">        //2.打印目录的子文件</span><br><span class="line">        printSubFile(dir);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static void printSubFile(File dir)&#123;</span><br><span class="line">        //打印目录的子文件</span><br><span class="line">        File[] subfiles = dir.listFiles();</span><br><span class="line">        </span><br><span class="line">        for(File f : subfiles)&#123;</span><br><span class="line">            if(f.isDirectory())&#123;//文件夹</span><br><span class="line">                printSubFile(f);</span><br><span class="line">            &#125;else&#123;//文件</span><br><span class="line">                System.out.println(f.getAbsolutePath());</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习:从键盘输入接收一个文件夹路径,打印出该文件夹下所有的.jpg文件名</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package lesson11;</span><br><span class="line"></span><br><span class="line">import java.io.File;</span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Demo02 &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        //练习:从键盘输入接收一个文件夹路径,打印出该文件夹下所有的.jpg文件名</span><br><span class="line"></span><br><span class="line">        //1.获取文件路径</span><br><span class="line">        Scanner scanner = new Scanner(System.in);</span><br><span class="line">        System.out.println(&quot;请输入一个文件夹路径...&quot;);</span><br><span class="line">        String path = scanner.nextLine();</span><br><span class="line">        </span><br><span class="line">        //2.把路径封装成File对象</span><br><span class="line">        File file = new File(path);</span><br><span class="line">        if(!file.exists())&#123;</span><br><span class="line">            System.out.println(&quot;此路径对应的文件不存在&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        if(!file.isDirectory())&#123;</span><br><span class="line">            System.out.println(&quot;请输入文件夹路径，而不文件路径&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //3.遍历文件夹下的子文件</span><br><span class="line">        printSubFile(file);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public static void printSubFile(File dir)&#123;</span><br><span class="line">        //打印目录的子文件</span><br><span class="line">        File[] subfiles = dir.listFiles();</span><br><span class="line">        </span><br><span class="line">        for(File f : subfiles)&#123;</span><br><span class="line">            if(f.isDirectory())&#123;//文件夹</span><br><span class="line">                printSubFile(f);</span><br><span class="line">            &#125;else&#123;//文件</span><br><span class="line">                if(f.getName().endsWith(&quot;.jpg&quot;))&#123;</span><br><span class="line">                    System.out.println(f.getAbsolutePath());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><hr><h1 id="SequenceInputStream-序列流"><a href="#SequenceInputStream-序列流" class="headerlink" title="SequenceInputStream 序列流"></a>SequenceInputStream 序列流</h1><p><strong>什么是序列流</strong></p><blockquote><p>序列流可以把多个字节输入流整合成一个, 从序列流中读取数据时, 将从被整合的第一个流开始读, 读完一个之后继续读第二个, 以此类推.</p></blockquote><p>案例：使用字节流把两个件数据写到另一个文件</p><p>案例：使用序列流把两个件数据写到另一个文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">package lesson12;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.SequenceInputStream;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        //SequenceInputStream 序列流</span><br><span class="line">        /**</span><br><span class="line">         * InputStream:输入流</span><br><span class="line">         * Sequence:序列 连续</span><br><span class="line">         * </span><br><span class="line">         * 序列流可以把多个字节输入流整合成一个, 从序列流中读取数据时, </span><br><span class="line">         * 将从被整合的第一个流开始读, 读完一个之后继续读第二个, 以此类推.</span><br><span class="line">         */</span><br><span class="line">        test2();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void test2() throws FileNotFoundException, IOException &#123;</span><br><span class="line">        //需求：a.txt,b.txt 依次写c.txt</span><br><span class="line">        </span><br><span class="line">        //创建序列流</span><br><span class="line">        FileInputStream fis1 = new FileInputStream(&quot;a.txt&quot;);</span><br><span class="line">        FileInputStream fis2 = new FileInputStream(&quot;b.txt&quot;);</span><br><span class="line">        SequenceInputStream sis = new SequenceInputStream(fis1, fis2);</span><br><span class="line">        </span><br><span class="line">        //创建输出流</span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;c.txt&quot;);</span><br><span class="line">        </span><br><span class="line">        //读写 </span><br><span class="line">        int b = 0;</span><br><span class="line">        while((b = sis.read()) != -1)&#123;</span><br><span class="line">            fos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        fis2.close();</span><br><span class="line">        sis.close();</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void test1() throws FileNotFoundException, IOException &#123;</span><br><span class="line">        //需求：a.txt,b.txt 依次写c.txt</span><br><span class="line">        //1.创建两个输入流</span><br><span class="line">        FileInputStream fis1 = new FileInputStream(&quot;a.txt&quot;);</span><br><span class="line">        FileInputStream fis2 = new FileInputStream(&quot;b.txt&quot;);</span><br><span class="line">        </span><br><span class="line">        //2.创建一个输出流</span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;c.txt&quot;);</span><br><span class="line">        </span><br><span class="line">        //3.先把a文件的内容写到c.txt</span><br><span class="line">        int b = 0;</span><br><span class="line">        while((b=fis1.read()) != -1)&#123;</span><br><span class="line">            fos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        fos.write(&quot;\r\n&quot;.getBytes());//换行</span><br><span class="line">        </span><br><span class="line">        //4.再把b文件内容写到c.txt</span><br><span class="line">        while((b=fis2.read()) != -1)&#123;</span><br><span class="line">            fos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //5.关流</span><br><span class="line">        fis1.close();</span><br><span class="line">        fis2.close();</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>序列流整合多个字节流（了解）</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package lesson13;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.SequenceInputStream;</span><br><span class="line">import java.util.Enumeration;</span><br><span class="line">import java.util.Vector;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        //SequenceInputStream序列流使用二</span><br><span class="line">        //需求，把a.txt b.txt c.txt 的内容拷贝到d.txt</span><br><span class="line">        //1.Vector是集合</span><br><span class="line">        Vector&lt;InputStream&gt; vector = new Vector&lt;InputStream&gt;();</span><br><span class="line">        vector.add(new FileInputStream(&quot;a.txt&quot;));</span><br><span class="line">        vector.add(new FileInputStream(&quot;b.txt&quot;));</span><br><span class="line">        vector.add(new FileInputStream(&quot;c.txt&quot;));</span><br><span class="line">        </span><br><span class="line">        //2.Enumeration枚举</span><br><span class="line">        Enumeration&lt;InputStream&gt; e = vector.elements();</span><br><span class="line">        </span><br><span class="line">        //3.序列流</span><br><span class="line">        SequenceInputStream sis = new SequenceInputStream(e);</span><br><span class="line">        </span><br><span class="line">        //4.创建输出流</span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;d.txt&quot;);</span><br><span class="line">        </span><br><span class="line">        //读写 </span><br><span class="line">        int b = 0;</span><br><span class="line">        while((b = sis.read()) != -1)&#123;</span><br><span class="line">            fos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sis.close();</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ByteArrayOutputStream字节数组输出流"><a href="#ByteArrayOutputStream字节数组输出流" class="headerlink" title="ByteArrayOutputStream字节数组输出流"></a>ByteArrayOutputStream字节数组输出流</h1><blockquote><p>此类实现了一个输出流，其中的数据被写入一个 byte 数组。缓冲区会随着数据的不断写入而自动增长。可使用 toByteArray() 和 toString() 获取数据。</p></blockquote><p><img src="/2023/10/03/java中IO流详细解释/6.webp" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package lesson01;</span><br><span class="line"></span><br><span class="line">import java.io.ByteArrayOutputStream;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        //ByteArrayOutputStream 字节数组输出流</span><br><span class="line">        /**</span><br><span class="line">         * 1.前面学习的流-必需关于一个文件</span><br><span class="line">         * FileOutputStream fos = new FileOutputStream(&quot;a.txt&quot;)</span><br><span class="line">         * </span><br><span class="line">         * 2.ByteArrayOutputStream 不需要关联文件</span><br><span class="line">         *  </span><br><span class="line">         * 3.此类实现了一个输出流，其中的数据被写入一个 byte 数组。</span><br><span class="line">         *    缓冲区会随着数据的不断写入而自动增长。</span><br><span class="line">         *   可使用 toByteArray() 和 toString() 获取数据。</span><br><span class="line">         */</span><br><span class="line">                </span><br><span class="line">        //1.创建字节数组输出流对象</span><br><span class="line">        ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="line">                </span><br><span class="line">        //2.输入流</span><br><span class="line">        FileInputStream fis = new FileInputStream(&quot;a.txt&quot;);</span><br><span class="line">        </span><br><span class="line">        //3.写入输出流</span><br><span class="line">        int b = 0;</span><br><span class="line">        while((b = fis.read()) != -1)&#123;</span><br><span class="line">            baos.write(b);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //自动把字节数组 转成 字符串</span><br><span class="line">        System.out.println(baos.toString());</span><br><span class="line">        System.out.println(baos.toString(&quot;UTF-8&quot;));//指定编码格式的字符串</span><br><span class="line">        </span><br><span class="line">        //获取文件数据</span><br><span class="line">        byte[] bytes = baos.toByteArray();</span><br><span class="line">        System.out.println(new String(bytes));</span><br><span class="line">        System.out.println(new String(bytes, &quot;UTF-8&quot;));//指定编码格式的字符串</span><br><span class="line">        </span><br><span class="line">        //4.关流</span><br><span class="line">        fis.close();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>面试题：找bug</strong></p><blockquote><p>定义一个文件输入流,调用read(byte[] b)方法,将a.txt文件中的内容打印出来(byte数组大小限制为5)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package lesson02;</span><br><span class="line"></span><br><span class="line">import java.io.ByteArrayOutputStream;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">/*      面试题：找bug</span><br><span class="line">        定义一个文件输入流,调用read(byte[] b)方法,</span><br><span class="line">        将a.txt文件中的内容打印出来(byte数组大小限制为5)*/</span><br><span class="line"></span><br><span class="line">        //1.文件输入流</span><br><span class="line">        FileInputStream fis = new FileInputStream(&quot;a.txt&quot;);</span><br><span class="line">        </span><br><span class="line">        //2.字节数组输出流</span><br><span class="line">        ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class="line">        </span><br><span class="line">        //3.字节数组【缓冲区思想，杯子思想】</span><br><span class="line">        byte[] arr = new byte[5];</span><br><span class="line">        int len;</span><br><span class="line">        while((len = fis.read(arr)) != -1) &#123;</span><br><span class="line">            //通过字节缓冲数组写入</span><br><span class="line">            baos.write(arr, 0, len);</span><br><span class="line">            </span><br><span class="line">            //把字节转成字符串</span><br><span class="line">            /**</span><br><span class="line">             * 中文乱码问题</span><br><span class="line">             */</span><br><span class="line">            System.out.println(new String(arr,0,len));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //内部会调用toString方法,把字节数组转成字符串</span><br><span class="line">        System.out.println(baos);</span><br><span class="line">        </span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="对象操作流ObjecOutputStream-amp-ObjecInputStream-（了解）"><a href="#对象操作流ObjecOutputStream-amp-ObjecInputStream-（了解）" class="headerlink" title="对象操作流ObjecOutputStream&amp; ObjecInputStream （了解）"></a>对象操作流ObjecOutputStream&amp; ObjecInputStream （了解）</h1><p><strong>什么是对象操作流</strong></p><p>该流可以将一个对象写出, 或者读取一个对象到程序中. 也就是执行了序列化和反序列化的操作.</p><p><strong>归档（序列化） ：将对象存在一个文件<br>解归档=反序列化：把一个文件解析出对象</strong></p><p>ObjecOutputStream对象输出流，把一个对象存储起来，存储的对象必须实现Serializable接口<br>ObjecInputStream对象输入流，把存的数据还原成一个对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">package lesson03;</span><br><span class="line"></span><br><span class="line">import java.io.EOFException;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.ObjectInput;</span><br><span class="line">import java.io.ObjectInputStream;</span><br><span class="line">import java.io.ObjectOutputStream;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        //对象操作流ObjectOutputStream&amp; ObjectInputStream</span><br><span class="line">        /**</span><br><span class="line">         * 一、ObjectOutputStream：将一个对象写入文件</span><br><span class="line">         *    1.如果使用这个类写入对象，这个对象需要序列化</span><br><span class="line">         *    2.序列化就是让这个对象实现一个Serializable接口</span><br><span class="line">         *    3.如果没实现Serializable接口，会抛异常NotSerializableException</span><br><span class="line"></span><br><span class="line">         * 二、ObjectInputStream：从文件中读一个对象</span><br><span class="line">         */</span><br><span class="line">        </span><br><span class="line">        //案例：从文件中取出女朋友对象</span><br><span class="line">        //1.创建一个对象输入流</span><br><span class="line">        FileInputStream fis = new FileInputStream(&quot;gf.data&quot;);</span><br><span class="line">        ObjectInputStream ois = new ObjectInputStream(fis);</span><br><span class="line">        </span><br><span class="line">        //2.读数据</span><br><span class="line">        GirlFriend gf1 = (GirlFriend) ois.readObject();</span><br><span class="line">        System.out.println(gf1);</span><br><span class="line">        GirlFriend gf2 = (GirlFriend) ois.readObject();</span><br><span class="line">        System.out.println(gf2);</span><br><span class="line">        </span><br><span class="line">        /**</span><br><span class="line">         * 如果没有数据可读了，强制读的时候报错了EOFException，</span><br><span class="line">         */</span><br><span class="line">        System.out.println(ois.readObject());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void test1() throws FileNotFoundException, IOException &#123;</span><br><span class="line">        //案例：将对象直接存入文件</span><br><span class="line">        //1.创建女朋友对象</span><br><span class="line">        GirlFriend gf1 = new GirlFriend(&quot;林志玲&quot;, 1.78);</span><br><span class="line">        GirlFriend gf2 = new GirlFriend(&quot;林心如&quot;, 1.68);</span><br><span class="line">        </span><br><span class="line">        //2.创建对象输出流</span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;gf.data&quot;);</span><br><span class="line">        ObjectOutputStream oos = new ObjectOutputStream(fos);</span><br><span class="line">        </span><br><span class="line">        //3.往文件存入对象</span><br><span class="line">        oos.writeObject(gf1);</span><br><span class="line">        oos.writeObject(gf2);</span><br><span class="line">        </span><br><span class="line">        //4.关流</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class GirlFriend implements Serializable&#123;</span><br><span class="line">    String name;</span><br><span class="line">    double height;</span><br><span class="line">    public GirlFriend(String name, double height) &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;GirlFriend [name=&quot; + name + &quot;, height=&quot; + height + &quot;]&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对象操作流优化</strong></p><p>为了方便读取多个对象<br>建立把将对象存储在集合中，然后将集合对象存入取出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">package lesson05;</span><br><span class="line"></span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.ObjectOutputStream;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, IOException &#123;</span><br><span class="line">        //对象操作流优化-思路，存多个对象时，把对象存在list里面</span><br><span class="line">        </span><br><span class="line">        //把女朋友对象存在List中，再把List写入文件【序列化/归档】</span><br><span class="line">        </span><br><span class="line">        //1.创建集合</span><br><span class="line">        List&lt;GirlFriend&gt; list = new ArrayList&lt;GirlFriend&gt;();</span><br><span class="line">        </span><br><span class="line">        //2.添加女朋友</span><br><span class="line">        list.add(new GirlFriend(&quot;林志玲&quot;, 1.78));</span><br><span class="line">        list.add(new GirlFriend(&quot;林心如&quot;, 1.68));</span><br><span class="line">        list.add(new GirlFriend(&quot;林嘉欣&quot;, 1.58));</span><br><span class="line">        </span><br><span class="line">        //3.把list存入文件</span><br><span class="line">        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;list.data&quot;));</span><br><span class="line">        oos.writeObject(list);</span><br><span class="line">        </span><br><span class="line">        //4.关流</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class GirlFriend implements Serializable&#123;</span><br><span class="line">    String name;</span><br><span class="line">    double height;</span><br><span class="line">    public GirlFriend(String name, double height) &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.height = height;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;GirlFriend [name=&quot; + name + &quot;, height=&quot; + height + &quot;]&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package lesson05;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.ObjectInput;</span><br><span class="line">import java.io.ObjectInputStream;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class Demo02 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, ClassNotFoundException &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">        //案例：从list.data 读取所有的女朋友对象【反序列化、解归档】</span><br><span class="line">        </span><br><span class="line">        //1.创建对象输入流</span><br><span class="line">        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(&quot;list.data&quot;));</span><br><span class="line">        </span><br><span class="line">        //2.读取List对象</span><br><span class="line">        Object obj = ois.readObject();</span><br><span class="line">        </span><br><span class="line">        //把obj转list</span><br><span class="line">        @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">        List&lt;GirlFriend&gt; list = (List&lt;GirlFriend&gt;)obj;</span><br><span class="line">        System.out.println(obj.getClass());</span><br><span class="line">        </span><br><span class="line">        //遍历</span><br><span class="line">        for(GirlFriend gf : list)&#123;</span><br><span class="line">            System.out.println(gf);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        ois.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Serializable接口的ID"><a href="#Serializable接口的ID" class="headerlink" title="Serializable接口的ID"></a>Serializable接口的ID</h1><p>要归档或者序列化的对象必须实现Serializable接口才能被序列化<br>Serializable 中有个id，但ID不是一定有加的<br>SerialVersionUid，简言之，其目的是序列化对象版本控制，有关各版本反序列化时是否兼容。<br>如果在新版本中这个值修改了，新版本就不兼容旧版本，反序列化时会抛出InvalidClassException异常。<br>如果修改较小，比如仅仅是增加了一个属性，我们希望向下兼容，老版本的数据都能保留，那就不用修改；<br>如果我们删除了一个属性，或者更改了类的继承关系，必然不兼容旧数据，这时就应该手动更新版本号，即SerialVersionUid。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">package lesson06;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.ObjectInputStream;</span><br><span class="line">import java.io.ObjectOutputStream;</span><br><span class="line">import java.io.Serializable;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, ClassNotFoundException&#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">    /*  Serializable接口的ID</span><br><span class="line">        1.要归档或者序列化的对象必须实现Serializable接口才能被序列化 </span><br><span class="line">        2.Serializable 中有个id，但ID不是一定要加的</span><br><span class="line">        3.SerialVersionUid，简言之，其目的是以序列化对象进行版本控制，有关各版本</span><br><span class="line">        反序列化时是否兼容。</span><br><span class="line">        4.如果在新版本中这个值修改了，新版本就不兼容旧版本，反序列化时会抛出InvalidClassException异常。</span><br><span class="line">        5.如果修改较小，比如仅仅是增加了一个属性，我们希望向下兼容，老版本</span><br><span class="line">            的数据都能保留，那就不用修改；</span><br><span class="line">        6.如果我们删除了一个属性，或者更改了类的继承关系，必然不兼容旧数据，</span><br><span class="line">                这时就应该手动更新版本号，即SerialVersionUid。</span><br><span class="line">        7.一般不会添加ID,就算添加了ID,版本号最好不要修改</span><br><span class="line">*/</span><br><span class="line">        </span><br><span class="line">        //save();</span><br><span class="line">        //取学生</span><br><span class="line">        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(&quot;stu.data&quot;));</span><br><span class="line">        Student stu = (Student) ois.readObject();</span><br><span class="line">        System.out.println(stu);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void save() throws IOException, FileNotFoundException &#123;</span><br><span class="line">        //1.创建学生对象</span><br><span class="line">        Student stu = new Student(&quot;霍建华&quot;);</span><br><span class="line">        </span><br><span class="line">        //2.把学生存入文件</span><br><span class="line">        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(&quot;stu.data&quot;));</span><br><span class="line">        </span><br><span class="line">        /**</span><br><span class="line">         * 存的学生的版本号是1</span><br><span class="line">         */</span><br><span class="line">        oos.writeObject(stu);</span><br><span class="line">        </span><br><span class="line">        //3.关流</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Student implements Serializable&#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 序列化版本ID</span><br><span class="line">     */</span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line">    </span><br><span class="line">    private String name;</span><br><span class="line">    </span><br><span class="line">    private String hometown;</span><br><span class="line"></span><br><span class="line">    public Student(String name) &#123;</span><br><span class="line">        super();</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Student [name=&quot; + name + &quot;]&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="打印流的概述和特点-掌握"><a href="#打印流的概述和特点-掌握" class="headerlink" title="打印流的概述和特点 (掌握)"></a>打印流的概述和特点 (掌握)</h1><p>**什么是打印流 **</p><p>该流可以很方便的将对象的toString()结果输出, 并且自动加上换行, 而且可以使用自动刷出的模式<br>System.out就是一个PrintStream, 其默认向控制台输出信息<br>PrintStream和PrintWriter分别是打印的字节流和字符流</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package lesson07;</span><br><span class="line"></span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.PrintStream;</span><br><span class="line">import java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">        //打印流的概述和特点 (掌握)</span><br><span class="line">    /*  什么是打印流 </span><br><span class="line">        1.该流可以很方便的将对象的toString()结果输出, 并且自动加上换行, 而且可以使用自动刷出的模式</span><br><span class="line">        2.System.out就是一个PrintStream, 其默认向控制台输出信息</span><br><span class="line">        3.PrintStream和PrintWriter分别是打印的字节流和字符流*/</span><br><span class="line">        </span><br><span class="line">        //1.打印的字节流【打印到控制台】</span><br><span class="line">        PrintStream ps = System.out;</span><br><span class="line">        ps.println(&quot;你好，元宵节快乐&quot;);//打印字符串</span><br><span class="line">        ps.println(19.6);</span><br><span class="line">        </span><br><span class="line">        //2.打印的字符流</span><br><span class="line">        /**</span><br><span class="line">         * 1.PrintWriter调用打印方法，控制台是没有内容，它是把内容写到文件中</span><br><span class="line">         * 2.如果打印了内容，没有调用flush或者close，内容在文件中也不存在</span><br><span class="line">         */</span><br><span class="line">        PrintWriter pw = new PrintWriter(&quot;test.txt&quot;);</span><br><span class="line">        pw.println(&quot;吃汤圆了...&quot;);</span><br><span class="line">        pw.print(&quot;超市一包汤圆10几块钱&quot;);</span><br><span class="line">        pw.print(13.01);</span><br><span class="line">        //pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="标准输入输出流概述和输出语句-了解"><a href="#标准输入输出流概述和输出语句-了解" class="headerlink" title="标准输入输出流概述和输出语句(了解)"></a>标准输入输出流概述和输出语句(了解)</h1><p>System.in是InputStream, 标准输入流, 默认可以从键盘输入读取字节数据</p><p>System.out是PrintStream, 标准输出流, 默认可以向Console中输出字符和字节数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package lesson08;</span><br><span class="line"></span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.io.PrintStream;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        //标准输入输出流概述和输出语句(了解)</span><br><span class="line">/*      System.in是InputStream, 标准输入流, 默认可以从键盘输入读取字节数据</span><br><span class="line">        System.out是PrintStream, 标准输出流, 默认可以向Console中输出字符和字节数据*/</span><br><span class="line">        </span><br><span class="line">        InputStream is = System.in;//标准输入流</span><br><span class="line">        PrintStream ps = System.out;//标准输出流</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="随机访问流概述和读写数据"><a href="#随机访问流概述和读写数据" class="headerlink" title="随机访问流概述和读写数据"></a>随机访问流概述和读写数据</h1><p>**随机访问流概述 **</p><p>RandomAccessFile概述<br>RandomAccessFile类不属于流，是Object类的子类。但它融合了InputStream和OutputStream的功能。<br>支持对随机访问文件的读取和写入。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">package lesson09;</span><br><span class="line"></span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.RandomAccessFile;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * RandomAccessFile这个类用于文件断点下载</span><br><span class="line"> * @author gyf</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        //随机访问流概述和读写数据</span><br><span class="line">/*      随机访问流概述</span><br><span class="line">        RandomAccessFile概述</span><br><span class="line">        RandomAccessFile类不属于流，是Object类的子类。但它融合了InputStream和OutputStream的功能。</span><br><span class="line">        支持对随机访问文件的读取和写入。*/</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 构造方法两个参数：</span><br><span class="line">         * name:文件名称、路径</span><br><span class="line">         * mode:模式 ，r=read 只读、 w=write</span><br><span class="line">         */</span><br><span class="line">        //1.创建一个随机访问流对象，以读写的方式打开文件</span><br><span class="line">        RandomAccessFile raf = new RandomAccessFile(&quot;a.txt&quot;, &quot;rw&quot;);</span><br><span class="line">        </span><br><span class="line">        //2.读字符</span><br><span class="line">        /**</span><br><span class="line">         * 使用RandomAccessFile的readChar/readLine方法读文件有乱码问题</span><br><span class="line">         */</span><br><span class="line">/*      System.out.println(raf.readChar());</span><br><span class="line">        System.out.println(raf.readChar());</span><br><span class="line">        System.out.println(raf.readChar());</span><br><span class="line">        System.out.println(raf.readLine());*/</span><br><span class="line">        </span><br><span class="line">        //使用字节数组来读比较好</span><br><span class="line">/*      byte[] buf = new byte[1024];</span><br><span class="line">        int len;</span><br><span class="line">        while((len = raf.read(buf)) != -1)&#123;</span><br><span class="line">            System.out.println(new String(buf,0,len));</span><br><span class="line">        &#125;*/</span><br><span class="line">        </span><br><span class="line">        //3.写数据</span><br><span class="line">        //raf.writeChars(&quot;abc&quot;);</span><br><span class="line">        //raf.writeBytes(&quot;abc&quot;);</span><br><span class="line">        raf.seek(4);//指定位置</span><br><span class="line">        raf.write(97);</span><br><span class="line">        raf.write(98);</span><br><span class="line">        raf.write(99);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DataOutputStream-amp-DataInputStream"><a href="#DataOutputStream-amp-DataInputStream" class="headerlink" title="DataOutputStream&amp;DataInputStream"></a>DataOutputStream&amp;DataInputStream</h1><p><strong>什么是数据输入输出流</strong></p><p>DataInputStream, DataOutputStream可以按照基本数据类型大小读写数据<br>例如:<br>按Long大小写出一个数字, 写出时该数据占8字节. 读取的时候也可以按照Long类型读取, 一次读取8个字节.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">package lesson10;</span><br><span class="line"></span><br><span class="line">import java.io.DataInputStream;</span><br><span class="line">import java.io.DataOutputStream;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">        //DataOutputStream&amp;DataInputStream 数据输入输出流</span><br><span class="line">/*      DataInputStream, DataOutputStream可以按照基本数据类型大小读写数据 </span><br><span class="line">        例如按Long大小写出一个数字, 写出时该数据占8字节. </span><br><span class="line">        读取的时候也可以按照Long类型读取, 一次读取8个字节.*/</span><br><span class="line"></span><br><span class="line">        //读3个long数据</span><br><span class="line">        DataInputStream dis = new DataInputStream(new FileInputStream(&quot;a.txt&quot;));</span><br><span class="line">        System.out.println(dis.readLong());//读8个字节</span><br><span class="line">        System.out.println(dis.readLong());//读8个字节</span><br><span class="line">        System.out.println(dis.readLong());//读8个字节</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void test1() throws FileNotFoundException, IOException &#123;</span><br><span class="line">        long a = 997;</span><br><span class="line">        long b = 998;</span><br><span class="line">        long c = 999;</span><br><span class="line">        </span><br><span class="line">        //使用FileOutputStream没法写入long类型数据</span><br><span class="line">        FileOutputStream fos = new FileOutputStream(&quot;a.txt&quot;);</span><br><span class="line">        //byte -128~127 0~255</span><br><span class="line">/*      fos.write(997);只会写一个字节，不会写4个字节</span><br><span class="line">        fos.write(998);</span><br><span class="line">        fos.write(999);*/</span><br><span class="line">        </span><br><span class="line">        //fos.wr</span><br><span class="line">        DataOutputStream dos = new DataOutputStream(fos);</span><br><span class="line">        dos.writeLong(a);//写4个字节</span><br><span class="line">        dos.writeLong(b);</span><br><span class="line">        dos.writeLong(c);</span><br><span class="line">        </span><br><span class="line">        dos.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Properties的概述和作为Map集合的使用"><a href="#Properties的概述和作为Map集合的使用" class="headerlink" title="Properties的概述和作为Map集合的使用"></a>Properties的概述和作为Map集合的使用</h1><p><strong>Properties的概述</strong></p><p>Properties 类表示了一个持久的属性集。</p><p>Properties 可保存在流中或从流中加载。</p><p>属性列表中每个键及其对应值都是一个字符串。</p><p><strong>方法</strong></p><p>Properties的load()和store()</p><p>public Object setProperty(String key,String value)</p><p>public String getProperty(String key)</p><p>public Enumeration<string> stringPropertyNames()</string></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">package lesson11;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileNotFoundException;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.time.Period;</span><br><span class="line">import java.util.Map.Entry;</span><br><span class="line">import java.util.Properties;</span><br><span class="line">import java.util.Set;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException, IOException &#123;</span><br><span class="line">        //Properties的概述和作为Map集合的使用【掌握-经常用】</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * Properties:属性</span><br><span class="line">            1.Properties 类表示了一个持久的属性集。</span><br><span class="line">            2.Properties 可保存在流中或从流中加载。</span><br><span class="line">            3.属性列表中每个键及其对应值都是一个字符串。</span><br><span class="line">         */</span><br><span class="line">        </span><br><span class="line">        //遍历properties所有属性key和值value</span><br><span class="line">        //1.创建属性对象</span><br><span class="line">        Properties p = new Properties();</span><br><span class="line">        </span><br><span class="line">        //2.关联文件</span><br><span class="line">        p.load(new FileInputStream(&quot;info.properties&quot;));</span><br><span class="line">        </span><br><span class="line">        //3.遍历一</span><br><span class="line">        Set&lt;Object&gt; keys = p.keySet();</span><br><span class="line">        for(Object key : keys)&#123;</span><br><span class="line">            System.out.println(key + &quot;=&quot; + p.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        //System.out.println(keys);</span><br><span class="line">        </span><br><span class="line">        //4.遍历二</span><br><span class="line">        System.out.println(&quot;=====================&quot;);</span><br><span class="line">        //p.entrySet();</span><br><span class="line">        for(Entry&lt;Object, Object&gt; entry :p.entrySet())&#123;</span><br><span class="line">            System.out.println(entry.getKey() + &quot;=&quot; + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void test2() throws IOException, FileNotFoundException &#123;</span><br><span class="line">        //使用Properties读取数据</span><br><span class="line">        //1.创建属性对象</span><br><span class="line">        Properties p = new Properties();</span><br><span class="line">        </span><br><span class="line">        //2.关联文件</span><br><span class="line">        p.load(new FileInputStream(&quot;info.properties&quot;));</span><br><span class="line">        </span><br><span class="line">        //3.通过key读数据</span><br><span class="line">        String name = p.getProperty(&quot;name&quot;);</span><br><span class="line">        String city = p.getProperty(&quot;city&quot;);</span><br><span class="line">        String hometown = p.getProperty(&quot;hometown&quot;);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(city);</span><br><span class="line">        System.out.println(hometown);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 使用Properties来存储数据</span><br><span class="line">     */</span><br><span class="line">    public static void test1() throws IOException, FileNotFoundException &#123;</span><br><span class="line">        //1.创建属性对象</span><br><span class="line">        Properties p = new Properties();</span><br><span class="line">        </span><br><span class="line">        //2.存数据</span><br><span class="line">        p.setProperty(&quot;name&quot;, &quot;gyf&quot;);</span><br><span class="line">        p.setProperty(&quot;city&quot;, &quot;广州&quot;);</span><br><span class="line">        p.setProperty(&quot;hometown&quot;, &quot;梅州&quot;);</span><br><span class="line">        </span><br><span class="line">        //3.关联文件</span><br><span class="line">        /**</span><br><span class="line">         * 当Properties把key和value存入文件，把中文转成unicode编码</span><br><span class="line">         */</span><br><span class="line">        p.store(new FileOutputStream(&quot;info.properties&quot;), null);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="捋一捋IO流"><a href="#捋一捋IO流" class="headerlink" title="捋一捋IO流"></a>捋一捋IO流</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">package lesson12;</span><br><span class="line"></span><br><span class="line">public class Demo01 &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line"></span><br><span class="line">        //捋一捋IO流</span><br><span class="line">        </span><br><span class="line">        /**</span><br><span class="line">         * 一、IO流-输入输出流</span><br><span class="line">         * I:input</span><br><span class="line">         * O:out</span><br><span class="line">         * IO流 操作文件，读取文件内容，往文件写内容</span><br><span class="line">         * </span><br><span class="line">         * 二、字节流</span><br><span class="line">         * </span><br><span class="line">         * &gt;InputStream</span><br><span class="line">         *  -FileInputStream 文件输入流，读的单位是字节</span><br><span class="line">         *  -BufferedInputStream 缓冲输入流，内部有个byte[]字节数组</span><br><span class="line">         *  -SequenceInputStream 序列流，把多个字节流整合成一个流</span><br><span class="line">         *  -ObjectInputStream 对象输入流，直接从文件中读取一个对象,这个对象要实现serilazable接口</span><br><span class="line">         *  -Sytem.in 标准输入流-指键盘</span><br><span class="line">         *  -DataInputStream 数据输入流，按基本数据类型的大小(long) 读取文件</span><br><span class="line">         *  </span><br><span class="line">         * &gt;OutputStream</span><br><span class="line">         *  -FileOutputStream 文件输出流，写的单位是字节</span><br><span class="line">         *  -BufferedOutputStream 缓冲输出流，内部有个byte[]字节数组</span><br><span class="line">         *  -ByteArrayOutputStream 字节数组输出流，把数据读取到内存中，这个类不需要关联文件</span><br><span class="line">         *  -ObjectOutputStream 对象输出流，直接把一个对象存入文件，</span><br><span class="line">         *  -PrintStream 打印流，把内容打印到控制台</span><br><span class="line">         *  -System.out 标准输出流-指控制台</span><br><span class="line">         *  -DataOutputStream 数据输出流，按基本数据类型的大小(long) 写入文件</span><br><span class="line">         *  </span><br><span class="line">         * 三、字符流</span><br><span class="line">         * &gt;Reader</span><br><span class="line">         *  -FileReader 文件读取流，读取的单位是字符</span><br><span class="line">         *  -BufferedReader 缓冲读取流，内部有个char[] 字符数组</span><br><span class="line">         *  -InputStreamReader 指定字符编码读取文件</span><br><span class="line">         * </span><br><span class="line">         * &gt;Writer</span><br><span class="line">         *  -FileWriter 文件写入流,写入的单位是字符</span><br><span class="line">         *  -BufferedWriter,缓冲写入流，内部有个char[] 字符数组</span><br><span class="line">         *  -OutputStreamWriter 指定字符编码写入文件</span><br><span class="line">         *  -PrintWriter 打印流，把内容打印一个文件</span><br><span class="line">         *  </span><br><span class="line">         *  </span><br><span class="line">         * RandomAccessFile 随机访问流，特点：读和写都在一个类中</span><br><span class="line">         * </span><br><span class="line">         * Properties 相当于Map一样使用，这个类把数据存在一个后缀名为.properties文件</span><br><span class="line">         */</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本文转自 <a href="https://www.jianshu.com/p/21fe1af672ac" target="_blank" rel="noopener">https://www.jianshu.com/p/21fe1af672ac</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#io流&quot;&gt;IO流&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#io流概述及其分类&quot;&gt;IO流概述及其分类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#常用的io流类&quot;&gt;常用的IO流类&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#inputstream--fileinputstream-文件输入流&quot;&gt;InputStream \&amp;amp; FileInputStream 文件输入流&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#案例读取一个txt文件数据方法一&quot;&gt;案例:读取一个txt文件数据(方法一)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#案例读取一个txt文件数据方法二&quot;&gt;案例:读取一个txt文件数据(方法二)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#面试题read方法读取的是一个字节为什么返回是int而不是byte-&quot;&gt;面试题:read()方法读取的是一个字节,为什么返回是int,而不是byte ？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#outputstream--fileoutputstream-文件输出流&quot;&gt;OutputStream \&amp;amp; FileOutputStream 文件输出流&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#案例拷贝图片和音频&quot;&gt;案例:拷贝图片和音频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#字节数组拷贝之available方法&quot;&gt;字节数组拷贝之available()方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#案例正确的拷贝文件的方法杯子思想缓冲思想&quot;&gt;案例:正确的拷贝文件的方法（杯子思想、缓冲思想）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#bufferedinputstream和bufferoutputstream&quot;&gt;BufferedInputStream和BufferOutputStream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#案例使用缓冲输入输出流拷贝文件&quot;&gt;案例:使用缓冲输入输出流拷贝文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#带buffered的流和自己写的数组缓冲对比&quot;&gt;带Buffered的流和自己写的数组缓冲对比&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#bufferoutputstream的flush和close方法的区别&quot;&gt;BufferOutputStream的flush和close方法的区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#字节流读写中文乱码问题&quot;&gt;字节流&lt;strong&gt;读写&lt;/strong&gt;中文乱码问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#流的标准处理异常代码16版本及其以前&quot;&gt;流的标准处理异常代码1.6版本及其以前&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#流的标准处理异常代码17以上版本&quot;&gt;流的标准处理异常代码1.7以上版本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#练习图片加密&quot;&gt;练习:图片加密&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#练习根据用户输入的文件拷贝文件到当前项目目录&quot;&gt;练习:根据用户输入的文件拷贝文件到当前项目目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#练习录入数据拷贝到文件&quot;&gt;练习:录入数据拷贝到文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#字符流概念&quot;&gt;字符流概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#filereader-读取字符流&quot;&gt;FileReader 读取字符流&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#filewiter-写入字符流&quot;&gt;FileWiter 写入字符流&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#案例字符流的拷贝&quot;&gt;案例:字符流的拷贝&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#使用字符流的场景&quot;&gt;使用字符流的场景&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#带缓冲的字符流-bufferedreaderbufferedwriter&quot;&gt;带缓冲的字符流 BufferedReader/BufferedWriter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#装饰decorator设计模式&quot;&gt;装饰(Decorator)设计模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#inputstreamreaderoutputstreamwriter&quot;&gt;InputStreamReader\&amp;amp;OutputStreamWriter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#递归5-5个乘阶&quot;&gt;递归(5！-5个乘阶)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sequenceinputstream-序列流&quot;&gt;SequenceInputStream 序列流&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#bytearrayoutputstream字节数组输出流&quot;&gt;ByteArrayOutputStream字节数组输出流&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#对象操作流objecoutputstream-objecinputstream-了解&quot;&gt;对象操作流ObjecOutputStream\&amp;amp; ObjecInputStream （了解）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#serializable接口的id&quot;&gt;Serializable接口的ID&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#打印流的概述和特点-掌握&quot;&gt;打印流的概述和特点 (掌握)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#标准输入输出流概述和输出语句了解&quot;&gt;标准输入输出流概述和输出语句(了解)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#随机访问流概述和读写数据&quot;&gt;随机访问流概述和读写数据&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#dataoutputstreamdatainputstream&quot;&gt;DataOutputStream\&amp;amp;DataInputStream&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#properties的概述和作为map集合的使用&quot;&gt;Properties的概述和作为Map集合的使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#捋一捋io流&quot;&gt;捋一捋IO流&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="学习笔记" scheme="https://behappy00.github.io/categories/学习笔记/"/>
    
    
    <category term="转载" scheme="https://behappy00.github.io/tags/转载/"/>
    
    <category term="java" scheme="https://behappy00.github.io/tags/java/"/>
    
    <category term="java模块学习" scheme="https://behappy00.github.io/tags/java模块学习/"/>
    
    <category term="Java编码实践" scheme="https://behappy00.github.io/tags/Java编码实践/"/>
    
  </entry>
  
  <entry>
    <title>markdown汇总</title>
    <link href="https://behappy00.github.io/2023/10/03/markdown%E6%B1%87%E6%80%BB/"/>
    <id>https://behappy00.github.io/2023/10/03/markdown%E6%B1%87%E6%80%BB/</id>
    <published>2023-10-02T16:05:12.000Z</published>
    <updated>2023-10-03T04:43:10.543Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><a href="#1markdown使用toc自动生成导航栏">1.Markdown使用TOC自动生成导航栏</a></li><li><a href="#2markdown让文字居中和带颜色">2.markdown让文字居中和带颜色</a></li><li><a href="#3markdown-文本内跳转生成目录">3.markdown 文本内跳转,生成目录</a></li><li><a href="#4markdown-前景色背景色">4.Markdown 前景色、背景色</a></li><li><a href="#5markdown-图片设置大小居中">5.Markdown-图片设置（大小，居中）</a></li><li><a href="#6markdown语法进阶三文字居中图片处理插入视频音乐标准字体">6.MarkDown语法进阶（三）（文字居中、图片处理、插入视频音乐、标准字体）</a></li><li><a href="#7vscode之markdown自动生成目录toc解决目录不整齐问题">7.VSCode之Markdown自动生成目录#TOC#解决目录不整齐问题</a></li><li><a href="#8markdown设置图片居中显示并调整大小">8.MarkDown设置图片居中显示并调整大小</a></li><li><a href="#9markdown公式特殊字符上下标求和积分分式根式字体">9.Markdown公式、特殊字符、上下标、求和/积分、分式/根式、字体</a></li><li><a href="#10markdown-最全数学符号与公式速查">10.Markdown 最全数学符号与公式速查</a></li><li><a href="#11markdown-mermaid种草3_-流程图">11.Markdown mermaid种草(3)_ 流程图</a></li><li><a href="#12用markdown来画流程图">12.用markdown来画流程图</a></li></ul><a id="more"></a><!-- TOC --><!-- /TOC --><hr><p>写在前面：</p><blockquote><p>如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com</p></blockquote><h2 id="1-Markdown使用TOC自动生成导航栏"><a href="#1-Markdown使用TOC自动生成导航栏" class="headerlink" title="1.Markdown使用TOC自动生成导航栏"></a>1.<a href="https://behappy00.github.io/2023/10/02/Markdown%E4%BD%BF%E7%94%A8TOC%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%AF%BC%E8%88%AA%E6%A0%8F/">Markdown使用TOC自动生成导航栏</a></h2><hr><h2 id="2-markdown让文字居中和带颜色"><a href="#2-markdown让文字居中和带颜色" class="headerlink" title="2.markdown让文字居中和带颜色"></a>2.<a href="https://behappy00.github.io/2023/10/02/markdown%E8%AE%A9%E6%96%87%E5%AD%97%E5%B1%85%E4%B8%AD%E5%92%8C%E5%B8%A6%E9%A2%9C%E8%89%B2/">markdown让文字居中和带颜色</a></h2><hr><h2 id="3-markdown-文本内跳转-生成目录"><a href="#3-markdown-文本内跳转-生成目录" class="headerlink" title="3.markdown 文本内跳转,生成目录"></a>3.<a href="https://behappy00.github.io/2023/10/02/markdown-%E6%96%87%E6%9C%AC%E5%86%85%E8%B7%B3%E8%BD%AC-%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95/">markdown 文本内跳转,生成目录</a></h2><hr><h2 id="4-Markdown-前景色、背景色"><a href="#4-Markdown-前景色、背景色" class="headerlink" title="4.Markdown 前景色、背景色"></a>4.<a href="https://behappy00.github.io/2023/10/02/Markdown-%E5%89%8D%E6%99%AF%E8%89%B2%E3%80%81%E8%83%8C%E6%99%AF%E8%89%B2/">Markdown 前景色、背景色</a></h2><hr><h2 id="5-Markdown-图片设置（大小，居中）"><a href="#5-Markdown-图片设置（大小，居中）" class="headerlink" title="5.Markdown-图片设置（大小，居中）"></a>5.<a href="https://behappy00.github.io/2023/10/02/Markdown-%E5%9B%BE%E7%89%87%E8%AE%BE%E7%BD%AE%EF%BC%88%E5%A4%A7%E5%B0%8F%EF%BC%8C%E5%B1%85%E4%B8%AD%EF%BC%89/">Markdown-图片设置（大小，居中）</a></h2><hr><h2 id="6-MarkDown语法进阶（三）（文字居中、图片处理、插入视频音乐、标准字体）"><a href="#6-MarkDown语法进阶（三）（文字居中、图片处理、插入视频音乐、标准字体）" class="headerlink" title="6.MarkDown语法进阶（三）（文字居中、图片处理、插入视频音乐、标准字体）"></a>6.<a href="https://behappy00.github.io/2023/10/02/MarkDown%E8%AF%AD%E6%B3%95%E8%BF%9B%E9%98%B6%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%88%E6%96%87%E5%AD%97%E5%B1%85%E4%B8%AD%E3%80%81%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E3%80%81%E6%8F%92%E5%85%A5%E8%A7%86%E9%A2%91%E9%9F%B3%E4%B9%90%E3%80%81%E6%A0%87%E5%87%86%E5%AD%97%E4%BD%93%EF%BC%89/">MarkDown语法进阶（三）（文字居中、图片处理、插入视频音乐、标准字体）</a></h2><hr><h2 id="7-VSCode之Markdown自动生成目录-TOC-解决目录不整齐问题"><a href="#7-VSCode之Markdown自动生成目录-TOC-解决目录不整齐问题" class="headerlink" title="7.VSCode之Markdown自动生成目录#TOC#解决目录不整齐问题"></a>7.<a href="https://behappy00.github.io/2023/10/02/VSCode%E4%B9%8BMarkdown%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95-TOC-%E8%A7%A3%E5%86%B3%E7%9B%AE%E5%BD%95%E4%B8%8D%E6%95%B4%E9%BD%90%E9%97%AE%E9%A2%98/">VSCode之Markdown自动生成目录#TOC#解决目录不整齐问题</a></h2><hr><h2 id="8-MarkDown设置图片居中显示并调整大小"><a href="#8-MarkDown设置图片居中显示并调整大小" class="headerlink" title="8.MarkDown设置图片居中显示并调整大小"></a>8.<a href="https://behappy00.github.io/2023/10/02/MarkDown%E8%AE%BE%E7%BD%AE%E5%9B%BE%E7%89%87%E5%B1%85%E4%B8%AD%E6%98%BE%E7%A4%BA%E5%B9%B6%E8%B0%83%E6%95%B4%E5%A4%A7%E5%B0%8F/">MarkDown设置图片居中显示并调整大小</a></h2><hr><h2 id="9-Markdown公式、特殊字符、上下标、求和-积分、分式-根式、字体"><a href="#9-Markdown公式、特殊字符、上下标、求和-积分、分式-根式、字体" class="headerlink" title="9.Markdown公式、特殊字符、上下标、求和/积分、分式/根式、字体"></a>9.<a href="https://behappy00.github.io/2023/10/02/Markdown%E5%85%AC%E5%BC%8F%E3%80%81%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E3%80%81%E4%B8%8A%E4%B8%8B%E6%A0%87%E3%80%81%E6%B1%82%E5%92%8C-%E7%A7%AF%E5%88%86%E3%80%81%E5%88%86%E5%BC%8F-%E6%A0%B9%E5%BC%8F%E3%80%81%E5%AD%97%E4%BD%93/">Markdown公式、特殊字符、上下标、求和/积分、分式/根式、字体</a></h2><hr><h2 id="10-Markdown-最全数学符号与公式速查"><a href="#10-Markdown-最全数学符号与公式速查" class="headerlink" title="10.Markdown 最全数学符号与公式速查"></a>10.<a href="https://behappy00.github.io/2023/10/02/Markdown-%E6%9C%80%E5%85%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7%E4%B8%8E%E5%85%AC%E5%BC%8F%E9%80%9F%E6%9F%A5/">Markdown 最全数学符号与公式速查</a></h2><hr><h2 id="11-Markdown-mermaid种草-3-流程图"><a href="#11-Markdown-mermaid种草-3-流程图" class="headerlink" title="11.Markdown mermaid种草(3)_ 流程图"></a>11.<a href="https://behappy00.github.io/2023/10/02/Markdown-mermaid%E7%A7%8D%E8%8D%89-3-%E6%B5%81%E7%A8%8B%E5%9B%BE/">Markdown mermaid种草(3)_ 流程图</a></h2><hr><h2 id="12-用markdown来画流程图"><a href="#12-用markdown来画流程图" class="headerlink" title="12.用markdown来画流程图"></a>12.<a href="https://behappy00.github.io/2023/10/02/%E7%94%A8markdown%E6%9D%A5%E7%94%BB%E6%B5%81%E7%A8%8B%E5%9B%BE/">用markdown来画流程图</a></h2><hr>]]></content>
    
    
    <summary type="html">这里是markdown汇总</summary>
    
    
    
    <category term="学习笔记" scheme="https://behappy00.github.io/categories/学习笔记/"/>
    
    
    <category term="原创" scheme="https://behappy00.github.io/tags/原创/"/>
    
    <category term="markdown" scheme="https://behappy00.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客搜索显示异样</title>
    <link href="https://behappy00.github.io/2023/10/02/hexo%E5%8D%9A%E5%AE%A2%E6%90%9C%E7%B4%A2%E6%98%BE%E7%A4%BA%E5%BC%82%E6%A0%B7/"/>
    <id>https://behappy00.github.io/2023/10/02/hexo%E5%8D%9A%E5%AE%A2%E6%90%9C%E7%B4%A2%E6%98%BE%E7%A4%BA%E5%BC%82%E6%A0%B7/</id>
    <published>2023-10-02T15:18:01.000Z</published>
    <updated>2023-10-02T15:35:30.955Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><a href="#问题描述">问题描述</a></li><li><a href="#问题分析">问题分析</a></li><li><a href="#解决">解决</a></li></ul><hr><p>写在前面：</p><blockquote><p>如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com</p></blockquote><a id="more"></a><!-- TOC --><!-- /TOC --><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>今天发现自己博客搜索出来的文章标题显示有些奇怪，如下图</p><p><img src="/2023/10/02/hexo博客搜索显示异样/1.JPG" alt="搜索结果最后出现奇怪符号 \]\]&gt;"></p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>通过F12查看发现类别为 search-result-title<br><img src="/2023/10/02/hexo博客搜索显示异样/2.JPG" alt="确定类别"></p><p>然后通过VSCODE打开NEXT主题文件夹，在next主题中全局搜索 search-result-title 找到文件<br>*\source\js\local-search.js</p><p><img src="/2023/10/02/hexo博客搜索显示异样/3.JPG" alt="确定类别位置"></p><p>最后修改相应结果<br><img src="/2023/10/02/hexo博客搜索显示异样/4.JPG" alt="修改代码"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">添加如下字符</span><br><span class="line">.replace(&apos;]]&gt;&apos;, &apos;&apos;)</span><br></pre></td></tr></table></figure><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p><img src="/2023/10/02/hexo博客搜索显示异样/5.JPG" alt="修复完成"></p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#问题描述&quot;&gt;问题描述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#问题分析&quot;&gt;问题分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#解决&quot;&gt;解决&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr&gt;&lt;p&gt;写在前面：&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="解决方案" scheme="https://behappy00.github.io/categories/解决方案/"/>
    
    
    <category term="原创" scheme="https://behappy00.github.io/tags/原创/"/>
    
    <category term="hexo" scheme="https://behappy00.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Markdown使用TOC自动生成导航栏</title>
    <link href="https://behappy00.github.io/2023/10/02/Markdown%E4%BD%BF%E7%94%A8TOC%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%AF%BC%E8%88%AA%E6%A0%8F/"/>
    <id>https://behappy00.github.io/2023/10/02/Markdown%E4%BD%BF%E7%94%A8TOC%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E5%AF%BC%E8%88%AA%E6%A0%8F/</id>
    <published>2023-10-02T12:43:01.000Z</published>
    <updated>2023-10-03T03:56:23.531Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><a href="#0x00-安装">0x00 安装</a></li><li><a href="#0x01-命令行">0x01 命令行</a></li><li><a href="#0x02-亮点">0x02 亮点</a></li><li><a href="#0x03-用法">0x03 用法</a></li><li><a href="#0x04-api">0x04 API</a></li><li><a href="#0x05-选项">0x05 选项</a></li></ul><a id="more"></a><!-- TOC --><!-- /TOC --><hr><p>写在前面：</p><blockquote><p>如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com</p></blockquote><p>参考文章：</p><ol><li><a href="https://www.cnblogs.com/demonxian3/p/11001295.html" target="_blank" rel="noopener">https://www.cnblogs.com/demonxian3/p/11001295.html</a></li></ol><blockquote><p>自己写的基本思路就是</p></blockquote><ul><li>轮询监听滚动条的位置，通过抛锚和跳锚实现</li></ul><blockquote><p>插件</p></blockquote><ul><li><a href="https://github.com/jonschlinkert/markdown-toc" target="_blank" rel="noopener">markdown-toc</a></li></ul><h3 id="0x00-安装"><a href="#0x00-安装" class="headerlink" title="0x00 安装"></a>0x00 安装</h3><p>TOC = Table of content ， 将内容制作成导航</p><p>这个插件是基于 nodejs 的，因此需要安装 node 和 npm ，这里同样采用nvm的形式安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nvm list -remote</span><br><span class="line">nvm install v10.16.0</span><br><span class="line">node -v</span><br></pre></td></tr></table></figure><p>安装好nvm后，就可以使用npm 安装插件了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save markdown-toc</span><br></pre></td></tr></table></figure><h3 id="0x01-命令行"><a href="#0x01-命令行" class="headerlink" title="0x01 命令行"></a>0x01 命令行</h3><p>这个插件带Cli命令，使用帮助如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">markdown-doc \[选项\] &lt;输入&gt;</span><br></pre></td></tr></table></figure><p>&lt;输入&gt;   表示需要使用 TOC 的 markdown 文件，可以通过标准输入读取</p><p>[选项]</p><table border="0"><tbody><tr><td>-i</td><td>直接往 &lt;输入&gt; 的文件注入TOC标识符： &lt;!-- toc --&gt;，如果没有这个参数就输出到屏幕，不修改md文件</td></tr><tr><td>--json</td><td>通过json格式打印TOC</td></tr><tr><td>--append</td><td>在字符串的后面追加TOC</td></tr><tr><td>--bullets</td><td>指定需要被生成TOC项的标识符号，可以指定多个： --bullets "*" --bullets "+"</td></tr><tr><td>--maxdepth</td><td>TOC最大深度，就是可以折叠多少层，默认6层</td></tr><tr><td>--no-stripHeadingTags</td><td>在强力功能前，不删去标题无关的HTML标签</td></tr></tbody></table><h3 id="0x02-亮点"><a href="#0x02-亮点" class="headerlink" title="0x02 亮点"></a>0x02 亮点</h3><p>特点：</p><p>1. 可根据自己的需求生成TOC模板</p><p>2. 对重复标题生效</p><p>3. 默认采用sane，也可以自己定制</p><p>4. 过滤器可以筛掉你不想要的标题</p><p>5. 导入期可以导入你想加入的标题</p><p>6. 可以使用强劲的函数来改变链接生成</p><p>7. 可作为 remarkable 的插件使用</p><p>很安全：</p><p>不会像其他TOC生成器一样，破坏前面的内容，或将前面的内容属性误认为标题</p><h3 id="0x03-用法"><a href="#0x03-用法" class="headerlink" title="0x03 用法"></a>0x03 用法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var toc = require(&apos;markdown-toc&apos;);</span><br><span class="line"></span><br><span class="line">toc(&apos;# One\\n\\n# Two&apos;).content;</span><br><span class="line">// Results in:</span><br><span class="line">// - \[One\](#one)</span><br><span class="line">// - \[Two\](#two)</span><br></pre></td></tr></table></figure><p>为了自定义输出，下面有几个属性将会返回</p><p>- content 自动生成导航导航的内容，你可以自定义样式</p><p>- highest  找到最高的等级标题，用于重新调整缩进</p><p>- tokens 可自定义的标题符号</p><h3 id="0x04-API"><a href="#0x04-API" class="headerlink" title="0x04 API"></a>0x04 API</h3><p><strong>1 - toc.plugin</strong></p><p>作为 remarkable 插件使用，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var Remarkable = require(&apos;remarkable&apos;);</span><br><span class="line">var toc = require(&apos;markdown-toc&apos;);</span><br><span class="line"></span><br><span class="line">function render(str, options) &#123;</span><br><span class="line">  return new Remarkable()</span><br><span class="line">    .use(toc.plugin(options)) // &lt;= register the plugin</span><br><span class="line">    .render(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var results = render(&apos;# AAA\\n# BBB\\n# CCC\\nfoo\\nbar\\nbaz&apos;);</span><br></pre></td></tr></table></figure><p><strong>2 - toc.json</strong></p><p>可生成json格式的TOC对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">toc(&apos;# AAA\\n## BBB\\n### CCC\\nfoo&apos;).json;</span><br><span class="line"></span><br><span class="line">// results in</span><br><span class="line">\[ &#123; content: &apos;AAA&apos;, slug: &apos;aaa&apos;, lvl: 1 &#125;,</span><br><span class="line">  &#123; content: &apos;BBB&apos;, slug: &apos;bbb&apos;, lvl: 2 &#125;,</span><br><span class="line">  &#123; content: &apos;CCC&apos;, slug: &apos;ccc&apos;, lvl: 3 &#125; \]</span><br></pre></td></tr></table></figure><p><strong>3 - toc.insert</strong></p><p>在想插入TOC的位置写上 <!-- toc --> 或者 <!--toc--> 内容 <!--tocstop--></p><p>(使用注释作为占位符可以避免破坏原本的代码)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- toc --&gt;</span><br><span class="line">- old toc 1</span><br><span class="line">- old toc 2</span><br><span class="line">- old toc 3</span><br><span class="line">&lt;!-- tocstop --&gt;</span><br><span class="line"></span><br><span class="line">## abc</span><br><span class="line">This is a b c.</span><br><span class="line"></span><br><span class="line">## xyz</span><br><span class="line">This is x y z.</span><br></pre></td></tr></table></figure><p>结果是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- toc --&gt;</span><br><span class="line">- \[abc\](#abc)</span><br><span class="line">\- \[xyz\](#xyz)</span><br><span class="line">&lt;!-- tocstop --&gt;</span><br><span class="line"></span><br><span class="line">## abc</span><br><span class="line">This is a b c.</span><br><span class="line"></span><br><span class="line">## xyz</span><br><span class="line">This is x y z.</span><br></pre></td></tr></table></figure><p><strong>4 - 通用函数</strong></p><p>为了方便给想定制TOC的用户folk一份，插件提供了一些通用函数</p><ul><li><code>toc.bullets()</code>: 通过数组获取标题标记符</li><li><code>toc.linkify()</code>: 链接到一个标题字符</li><li><code>toc.slugify()</code>: 从标题字符中应用强力函数</li><li><code>toc.strip()</code>: 从标题字符中去掉某些字符</li></ul><p>例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var result = toc(&apos;# AAA\\n## BBB\\n### CCC\\nfoo&apos;);</span><br><span class="line">var str = &apos;&apos;;</span><br><span class="line"></span><br><span class="line">result.json.forEach(function(heading) &#123;</span><br><span class="line">  str += toc.linkify(heading.content);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="0x05-选项"><a href="#0x05-选项" class="headerlink" title="0x05 选项"></a>0x05 选项</h3><p><strong>1 - 追加 (append)</strong></p><p>追加一些字符串到匹配的标题标识符后面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">toc(str, &#123;append: &apos;\\n\_(TOC generated by Verb)\_&apos;&#125;);</span><br></pre></td></tr></table></figure><p><strong>2 - 过滤 (filter)</strong></p><p>类型： 函数</p><p>默认:  undefined</p><p>参数：</p><p>  str  命中的标题字符串</p><p>  ele 标题记号对象</p><p>  arr 所有的标题对象</p><p>过滤掉一些极端的匹配命中的标题，如下就是一个坏标题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\[.aaa(\[foo\], ...) another bad heading\](#-aaa--foo--------another-bad-heading)</span><br></pre></td></tr></table></figure><p>为了去除这种极端的情况，可以使用过滤器筛掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function removeJunk(str, ele, arr) &#123;</span><br><span class="line">  return str.indexOf(&apos;...&apos;) === -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var result = toc(str, &#123;filter: removeJunk&#125;);</span><br><span class="line">//\=&gt; beautiful TOC</span><br></pre></td></tr></table></figure><p><strong>3 - 强劲(slugify)</strong></p><p>类型: 函数</p><p>默认: 默认替换掉特殊符号</p><p>例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var str = toc(&apos;# Some Article&apos;, &#123;slugify: require(&apos;uslug&apos;)&#125;);</span><br></pre></td></tr></table></figure><p><strong>4 - 符号(bullet)</strong></p><p>类型： 字符或者数组</p><p>默认： *</p><p>就是层叠的列表符号，传入数组 [‘*‘, ‘-‘, ‘+’]</p><p><strong>5 - 首项 (first1)</strong></p><p>类型：布尔</p><p>默认： true</p><p>排除文件中的第一个h1级标题。这样可以防止自述文件中的第一个标题出现在TOC中</p><p><strong>6 - 最大深度 (first1)</strong></p><p>类型： 数字</p><p>默认： 6</p><p>最大深度</p><p><strong>6 - 去除头部标签(stripHeadingTags)</strong></p><p>类型:<code>布尔</code></p><p>默认: <code>true</code></p><p>去除多余的标记，类似github 的 markdown 表现</p><p>本文转自 <a href="https://www.cnblogs.com/demonxian3/p/11001295.html" target="_blank" rel="noopener">https://www.cnblogs.com/demonxian3/p/11001295.html</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#0x00-安装&quot;&gt;0x00 安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#0x01-命令行&quot;&gt;0x01 命令行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#0x02-亮点&quot;&gt;0x02 亮点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#0x03-用法&quot;&gt;0x03 用法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#0x04-api&quot;&gt;0x04 API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#0x05-选项&quot;&gt;0x05 选项&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="解决方案" scheme="https://behappy00.github.io/categories/解决方案/"/>
    
    
    <category term="转载" scheme="https://behappy00.github.io/tags/转载/"/>
    
    <category term="markdown" scheme="https://behappy00.github.io/tags/markdown/"/>
    
    <category term="自动导航栏" scheme="https://behappy00.github.io/tags/自动导航栏/"/>
    
    <category term="插件" scheme="https://behappy00.github.io/tags/插件/"/>
    
  </entry>
  
  <entry>
    <title>markdown让文字居中和带颜色</title>
    <link href="https://behappy00.github.io/2023/10/02/markdown%E8%AE%A9%E6%96%87%E5%AD%97%E5%B1%85%E4%B8%AD%E5%92%8C%E5%B8%A6%E9%A2%9C%E8%89%B2/"/>
    <id>https://behappy00.github.io/2023/10/02/markdown%E8%AE%A9%E6%96%87%E5%AD%97%E5%B1%85%E4%B8%AD%E5%92%8C%E5%B8%A6%E9%A2%9C%E8%89%B2/</id>
    <published>2023-10-02T12:41:20.000Z</published>
    <updated>2023-10-14T17:27:56.004Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><a href="#1说明">1.说明</a></li><li><a href="#2文字的居中">2.文字的居中</a></li><li><a href="#3文字的字体及颜色">3.文字的字体及颜色</a><ul><li><a href="#31-字体更换">3.1 字体更换</a></li><li><a href="#32-大小更换">3.2 大小更换</a></li><li><a href="#33-颜色替换">3.3 颜色替换</a></li></ul></li><li><a href="#4-总结">4 总结</a></li></ul><a id="more"></a><!-- TOC --><!-- /TOC --><hr><p>写在前面：</p><blockquote><p>如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com</p></blockquote><p>参考文章：</p><ol><li><a href="https://www.cnblogs.com/bigmagic/p/3301b25e8b0b8ef8b9415379385a798c.html" target="_blank" rel="noopener">https://www.cnblogs.com/bigmagic/p/3301b25e8b0b8ef8b9415379385a798c.html</a></li></ol><h3 id="1-说明"><a href="#1-说明" class="headerlink" title="1.说明"></a>1.说明</h3><p>本文主要叙述如何写出更加优美的markdown文档。在我们观看文档的过程中，良好的格式将会带来很大的收益。对于不同颜色的字体也并不会显得花里胡哨，只会让我们表达的内容更加的清晰。下面来具体的看一下操作的流程。</p><h3 id="2-文字的居中"><a href="#2-文字的居中" class="headerlink" title="2.文字的居中"></a>2.文字的居中</h3><p>对于标准的markdown文本，是不支持居中对齐的。还好markdown支持html语言，所以我们采用html语法格式即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;center&gt;这一行需要居中&lt;/center&gt;</span><br></pre></td></tr></table></figure><p>下面就是排版后的结果</p><p>这一行需要居中</p><h3 id="3-文字的字体及颜色"><a href="#3-文字的字体及颜色" class="headerlink" title="3.文字的字体及颜色"></a>3.文字的字体及颜色</h3><h4 id="3-1-字体更换"><a href="#3-1-字体更换" class="headerlink" title="3.1 字体更换"></a>3.1 字体更换</h4><p>同样我们也需要遵照其标准的语法格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt;</span><br></pre></td></tr></table></figure><p>下面是测试结果</p><p><img src="/2023/10/02/markdown让文字居中和带颜色/1.JPG" alt></p><h4 id="3-2-大小更换"><a href="#3-2-大小更换" class="headerlink" title="3.2 大小更换"></a>3.2 大小更换</h4><p>大小为size</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;font face=&quot;黑体&quot; size=10&gt;我是黑体字&lt;/font&gt;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/markdown让文字居中和带颜色/2.JPG" alt></p><h4 id="3-3-颜色替换"><a href="#3-3-颜色替换" class="headerlink" title="3.3 颜色替换"></a>3.3 颜色替换</h4><p>对于html语音中，颜色是用color来表示，所以可以表示如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;font color=red size=72&gt;颜色&lt;/font&gt;</span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="/2023/10/02/markdown让文字居中和带颜色/3.JPG" alt></p><h3 id="4-总结"><a href="#4-总结" class="headerlink" title="4 总结"></a>4 总结</h3><p>善用markdown语法，记住markdown语法是兼容html预言的，这很重要。</p><p>本文转自 <a href="https://www.cnblogs.com/bigmagic/p/3301b25e8b0b8ef8b9415379385a798c.html" target="_blank" rel="noopener">https://www.cnblogs.com/bigmagic/p/3301b25e8b0b8ef8b9415379385a798c.html</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1说明&quot;&gt;1.说明&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2文字的居中&quot;&gt;2.文字的居中&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3文字的字体及颜色&quot;&gt;3.文字的字体及颜色&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#31-字体更换&quot;&gt;3.1 字体更换&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#32-大小更换&quot;&gt;3.2 大小更换&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#33-颜色替换&quot;&gt;3.3 颜色替换&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-总结&quot;&gt;4 总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="解决方案" scheme="https://behappy00.github.io/categories/解决方案/"/>
    
    
    <category term="转载" scheme="https://behappy00.github.io/tags/转载/"/>
    
    <category term="markdown" scheme="https://behappy00.github.io/tags/markdown/"/>
    
    <category term="图片" scheme="https://behappy00.github.io/tags/图片/"/>
    
    <category term="文字" scheme="https://behappy00.github.io/tags/文字/"/>
    
  </entry>
  
  <entry>
    <title>markdown 文本内跳转,生成目录</title>
    <link href="https://behappy00.github.io/2023/10/02/markdown-%E6%96%87%E6%9C%AC%E5%86%85%E8%B7%B3%E8%BD%AC-%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95/"/>
    <id>https://behappy00.github.io/2023/10/02/markdown-%E6%96%87%E6%9C%AC%E5%86%85%E8%B7%B3%E8%BD%AC-%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95/</id>
    <published>2023-10-02T12:40:05.000Z</published>
    <updated>2023-10-02T13:02:57.869Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><a href="#1生成目录的方法">1.生成目录的方法</a></li></ul><hr><p>写在前面：</p><blockquote><p>如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com</p></blockquote><a id="more"></a><!-- TOC --><!-- /TOC --><p>参考文章：</p><ol><li><a href="https://blog.csdn.net/dss_dssssd/article/details/82959037" target="_blank" rel="noopener">https://blog.csdn.net/dss_dssssd/article/details/82959037</a></li></ol><h3 id="1-生成目录的方法"><a href="#1-生成目录的方法" class="headerlink" title="1.生成目录的方法"></a>1.生成目录的方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">* [一.数据集获取及预处理](#1)</span><br><span class="line"></span><br><span class="line">   * [1 数据集导入](#1.1)</span><br><span class="line"></span><br><span class="line">    * [2数据集划分](#1.2)</span><br><span class="line"></span><br><span class="line"> * [二、binary classification    二元分类器](#2)</span><br><span class="line">   * [自己实现交叉验证函数](#2.1)</span><br><span class="line">   * [confusion matrix](#2.2)</span><br><span class="line">   * [precision/recall tradeoff](#2.3)</span><br><span class="line">   * [Precision/Recall曲线](#2.4)</span><br><span class="line">   * [ ROC 曲线](#2.5)</span><br><span class="line">   * [AUC](#2.6)</span><br><span class="line"> * [ 三、Multiclass Classification](#3)</span><br><span class="line">   *  [Error Analysis](#3.1)</span><br><span class="line">   * [numpy broadcast](#3.2)</span><br><span class="line"> * [四、 Multilabel Classification  多标签分类](#4)</span><br><span class="line"> *  [五、Multioutput Classification](#5)</span><br></pre></td></tr></table></figure><p>在正文中，只要将章节标题的id对应上去即可:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">###  &lt;h2 id=&quot;1&quot;&gt;一.数据集获取及预处理&lt;/h2&gt;</span><br><span class="line">#### &lt;h2 id=&quot;1.1&quot;&gt;1. 数据集导入&lt;/h2&gt;</span><br><span class="line">#### &lt;h2 id=&quot;1.2&quot;&gt;2.数据集划分&lt;/h2&gt;</span><br></pre></td></tr></table></figure><p>以下为实现效果图：</p><ul><li><p><a href="about:blank#1" target="_blank" rel="noopener">一.数据集获取及预处理</a></p><ul><li><p><a href="about:blank#1.1" target="_blank" rel="noopener">1 数据集导入</a></p></li><li><p><a href="about:blank#1.2" target="_blank" rel="noopener">2数据集划分</a></p></li></ul></li><li><p><a href="about:blank#2" target="_blank" rel="noopener">二、binary classification 二元分类器</a></p><ul><li><a href="about:blank#2.1" target="_blank" rel="noopener">自己实现交叉验证函数</a></li><li><a href="about:blank#2.2" target="_blank" rel="noopener">confusion matrix</a></li><li><a href="about:blank#2.3" target="_blank" rel="noopener">precision/recall tradeoff</a></li><li><a href="about:blank#2.4" target="_blank" rel="noopener">Precision/Recall曲线</a></li><li><a href="about:blank#2.5" target="_blank" rel="noopener">ROC 曲线</a></li><li><a href="about:blank#2.6" target="_blank" rel="noopener">AUC</a></li></ul></li><li><p><a href="about:blank#3" target="_blank" rel="noopener">三、Multiclass Classification</a></p><ul><li><a href="about:blank#3.1" target="_blank" rel="noopener">Error Analysis</a></li><li><a href="about:blank#3.2" target="_blank" rel="noopener">numpy broadcast</a></li></ul></li><li><p><a href="about:blank#4" target="_blank" rel="noopener">四、 Multilabel Classification 多标签分类</a></p></li><li><p><a href="about:blank#5" target="_blank" rel="noopener">五、Multioutput Classification</a></p></li></ul><p>本文转自 <a href="https://blog.csdn.net/dss_dssssd/article/details/82959037" target="_blank" rel="noopener">https://blog.csdn.net/dss_dssssd/article/details/82959037</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1生成目录的方法&quot;&gt;1.生成目录的方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr&gt;&lt;p&gt;写在前面：&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="解决方案" scheme="https://behappy00.github.io/categories/解决方案/"/>
    
    
    <category term="转载" scheme="https://behappy00.github.io/tags/转载/"/>
    
    <category term="markdown" scheme="https://behappy00.github.io/tags/markdown/"/>
    
    <category term="自动导航栏" scheme="https://behappy00.github.io/tags/自动导航栏/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 前景色、背景色</title>
    <link href="https://behappy00.github.io/2023/10/02/Markdown-%E5%89%8D%E6%99%AF%E8%89%B2%E3%80%81%E8%83%8C%E6%99%AF%E8%89%B2/"/>
    <id>https://behappy00.github.io/2023/10/02/Markdown-%E5%89%8D%E6%99%AF%E8%89%B2%E3%80%81%E8%83%8C%E6%99%AF%E8%89%B2/</id>
    <published>2023-10-02T12:39:07.000Z</published>
    <updated>2023-10-14T17:51:06.790Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><a href="#1-前言">1. 前言</a></li><li><a href="#2-语法详解">2. 语法详解</a><ul><li><a href="#21-前景色">2.1 前景色</a></li><li><a href="#22-背景色">2.2 背景色</a></li></ul></li><li><a href="#3-使用场景及应用实例">3. 使用场景及应用实例</a></li><li><a href="#小结">小结</a></li></ul><hr><p>写在前面：</p><a id="more"></a><!-- TOC --><!-- /TOC --><blockquote><p>如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com</p></blockquote><p>参考文章：</p><ol><li><a href="http://www.imooc.com/wiki/markdownlesson" target="_blank" rel="noopener">Markdown 入门教程</a></li><li><a href="http://www.imooc.com/wiki/markdownlesson/markdownfont.html" target="_blank" rel="noopener">10 Markdown 字体字号</a></li><li><a href="http://www.imooc.com/wiki/markdownlesson/markdowninlinecode.html" target="_blank" rel="noopener">12 Markdown 行内代码</a></li></ol><h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>颜色可以使普通文字表达出更深刻的含义，比如红色用于醒目与警示、绿色用于表达良好与正常等。</p><p>Markdown 使普通文本具有格式，但它的原生语法并不支持修改前景色和背景色。为了实现丰富文本颜色的需求，我们需要通过增加 HTML 标签实现此类效果。</p><p><strong>环境说明</strong>：<br>考虑到 Markdown 工具之间的不兼容，有的内容直接从页面复制粘贴到本地不会正常显示，大家学习时自己动手写是肯定没问题的。本节所有实例代码及演示效果均使用 Typora 工具完成。<br>本节所有截图均为 Typora 导出为 HTML 后渲染效果。</p><h2 id="2-语法详解"><a href="#2-语法详解" class="headerlink" title="2. 语法详解"></a>2. 语法详解</h2><h3 id="2-1-前景色"><a href="#2-1-前景色" class="headerlink" title="2.1 前景色"></a>2.1 前景色</h3><p>在 Markdown 文件中，建议使用 <code>&lt;font&gt;</code> 标签的 <code>color</code> 属性修改文字颜色。</p><p><strong>实例 1</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#### 使用 `&lt;font&gt;` 的标签的修改文字前景色</span><br><span class="line"></span><br><span class="line">&lt;font color=&quot;red&quot;&gt;红色&lt;/font&gt;</span><br><span class="line">&lt;font color=&quot;green&quot;&gt;绿色&lt;/font&gt;</span><br><span class="line">&lt;font color=&quot;blue&quot;&gt;蓝色&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&lt;font color=&quot;rgb(200, 100, 100)&quot;&gt;使用 rgb 颜色值&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&lt;font color=&quot;#FF00BB&quot;&gt;使用十六进制颜色值&lt;/font&gt;</span><br></pre></td></tr></table></figure><p>渲染结果如下：</p><p><img src="/2023/10/02/Markdown-前景色、背景色/1.JPG" alt></p><p>除了修改 <code>color</code> 属性外，还可以使用 <code>style</code> 样式属性修改文字颜色。</p><p><strong>实例 2</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#### 使用 `style` 的标签的修改文字前景色</span><br><span class="line"></span><br><span class="line">&lt;font style=&quot;color: red&quot;&gt;红色&lt;/font&gt;</span><br><span class="line">&lt;font style=&quot;color: green&quot;&gt;绿色&lt;/font&gt;</span><br><span class="line">&lt;font style=&quot;color: blue&quot;&gt;蓝色&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&lt;font style=&quot;color: rgb(200,100,100)&quot;&gt;使用 rgb 颜色值&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&lt;font style=&quot;color: #FF00BB&quot;&gt;使用十六进制颜色值&lt;/font&gt;</span><br></pre></td></tr></table></figure><p>其渲染结果如下：</p><p><img src="/2023/10/02/Markdown-前景色、背景色/2.JPG" alt></p><h3 id="2-2-背景色"><a href="#2-2-背景色" class="headerlink" title="2.2 背景色"></a>2.2 背景色</h3><p>Markdown 文档中定义文字背景色需要通过修改 <code>style</code> 样式实现。</p><p><strong>实例 3</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#### 使用 `style` 属性修改文字的背景色</span><br><span class="line"></span><br><span class="line">&lt;font style=&quot;background: red&quot;&gt;红色&lt;/font&gt;</span><br><span class="line">&lt;font style=&quot;background: green&quot;&gt;绿色&lt;/font&gt;</span><br><span class="line">&lt;font style=&quot;background: blue&quot;&gt;蓝色&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&lt;font style=&quot;background: rgb(200,100,100)&quot;&gt;使用 rgb 颜色值&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&lt;font style=&quot;background: #FF00BB&quot;&gt;使用十六进制颜色值&lt;/font&gt;</span><br></pre></td></tr></table></figure><p>其渲染结果如下：</p><p><img src="/2023/10/02/Markdown-前景色、背景色/3.JPG" alt></p><p><strong>实例 4</strong>：</p><p>利用 <code>style</code> 的丰富样式，我们可以定义出丰富的文字形式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#### 更丰富背景样式</span><br><span class="line"></span><br><span class="line">## &lt;font style=&quot;background: url(&apos;http://www.wenliku.com/d/file/patterns/2019-06-26/d8fac26c38c9b2a7e2393fc9af766e8f.jpg&apos;) &quot;&gt;I wish you a Merry Christmas&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">使用图片作背景</span><br><span class="line"></span><br><span class="line">## &lt;font style=&quot;background: linear-gradient( to right, #ff1616, #ff7716, #ffdc16, #36c945, #10a5ce, #0f0096, #a51eff, #ff1616);&quot;&gt;太阳太阳，给我们带来，七色光彩&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">渐变背景色</span><br></pre></td></tr></table></figure><p>其渲染结果如下：</p><p><img src="/2023/10/02/Markdown-前景色、背景色/4.JPG" alt></p><h2 id="3-使用场景及应用实例"><a href="#3-使用场景及应用实例" class="headerlink" title="3. 使用场景及应用实例"></a>3. 使用场景及应用实例</h2><p>利用前景色和背景色、以及字体字号等样式，我们可以定义出丰富的渲染主题，以适应不同的设备或阅读需求，比如阅读类 APP 中常见的夜晚模式、笔记类 APP 的更换纸张的效果等。</p><p><strong>实例 5</strong>：</p><p>夜晚模式效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#### 夜读模式</span><br><span class="line"></span><br><span class="line">##### 《春》 朱自清</span><br><span class="line"></span><br><span class="line">盼望着，盼望着，东风来了，春天的脚步近了。</span><br><span class="line"></span><br><span class="line">一切都像刚睡醒的样子，欣欣然张开了眼。山朗润起来了，水涨起来了，太阳的脸红起来了。</span><br><span class="line"></span><br><span class="line">小草偷偷地从土里钻出来，嫩嫩的，绿绿的。园子里，田野里，瞧去，一大片一大片满是的。坐着，躺着，打两个滚，踢几脚球，赛几趟跑，捉几回迷藏。风轻悄悄的，草软绵绵的。</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">body &#123; background-color: #000 !important; &#125;</span><br><span class="line">h1,h2,h3,h4,h5,h6,h7,p &#123; color: #999 !important; &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>其渲染结果如下：</p><p><img src="/2023/10/02/Markdown-前景色、背景色/5.JPG" alt></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ol><li>同一颜色值在不同显示器上会有色差，选取颜色时尽量使用安全色。</li><li>为了确保整篇文章的整体风格一致，通常只需要配置全局的前景色和背景色即可。</li></ol><p>对于颜色，请尽量使用柔和的颜色，防止刺伤眼睛。</p><p>本文转自 <a href="http://www.imooc.com/wiki/markdownlesson/markdowncolor.html" target="_blank" rel="noopener">http://www.imooc.com/wiki/markdownlesson/markdowncolor.html</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-前言&quot;&gt;1. 前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-语法详解&quot;&gt;2. 语法详解&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#21-前景色&quot;&gt;2.1 前景色&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#22-背景色&quot;&gt;2.2 背景色&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-使用场景及应用实例&quot;&gt;3. 使用场景及应用实例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#小结&quot;&gt;小结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr&gt;&lt;p&gt;写在前面：&lt;/p&gt;</summary>
    
    
    
    <category term="解决方案" scheme="https://behappy00.github.io/categories/解决方案/"/>
    
    
    <category term="转载" scheme="https://behappy00.github.io/tags/转载/"/>
    
    <category term="markdown" scheme="https://behappy00.github.io/tags/markdown/"/>
    
    <category term="文字" scheme="https://behappy00.github.io/tags/文字/"/>
    
  </entry>
  
  <entry>
    <title>Markdown-图片设置（大小，居中）</title>
    <link href="https://behappy00.github.io/2023/10/02/Markdown-%E5%9B%BE%E7%89%87%E8%AE%BE%E7%BD%AE%EF%BC%88%E5%A4%A7%E5%B0%8F%EF%BC%8C%E5%B1%85%E4%B8%AD%EF%BC%89/"/>
    <id>https://behappy00.github.io/2023/10/02/Markdown-%E5%9B%BE%E7%89%87%E8%AE%BE%E7%BD%AE%EF%BC%88%E5%A4%A7%E5%B0%8F%EF%BC%8C%E5%B1%85%E4%B8%AD%EF%BC%89/</id>
    <published>2023-10-02T12:38:00.000Z</published>
    <updated>2023-10-14T17:28:51.341Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><a href="#图片位置-居左居中居右">图片位置-居左/居中/居右</a></li><li><a href="#图片大小">图片大小</a></li></ul><hr><p>写在前面：</p><blockquote><p>如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com</p></blockquote><a id="more"></a><!-- TOC --><!-- /TOC --><p>参考文章：</p><ol><li><a href="https://blog.csdn.net/qq_35451572/article/details/79443467" target="_blank" rel="noopener">https://blog.csdn.net/qq_35451572/article/details/79443467</a></li></ol><h3 id="图片位置-居左-居中-居右"><a href="#图片位置-居左-居中-居右" class="headerlink" title="图片位置-居左/居中/居右"></a>图片位置-居左/居中/居右</h3><p>利用markdown在编写文档时插入图片是默认靠左，有些时候将图片设置为居中时可以更加的美观，这时就需要在图片的信息前边添加如下程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div align=center&gt;![这里写图片描述](http:...)</span><br></pre></td></tr></table></figure><p>如果想将图片位于右侧，只需要将center改为right</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div align=right&gt;![这里写图片描述](http:...)</span><br></pre></td></tr></table></figure><h3 id="图片大小"><a href="#图片大小" class="headerlink" title="图片大小"></a>图片大小</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;http:...&quot; width = &quot;100&quot; height = &quot;100&quot; div align=right /&gt;</span><br></pre></td></tr></table></figure><p>如上格式，在图片的最后添加 width = “100” height = “100”，就可以设置图片的大小。也可以在后边输入百分比为多少，如 width = 20% height = 20%</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;http:...&quot; width = 30% height = 30% /&gt;</span><br></pre></td></tr></table></figure><p>本文转自 <a href="https://blog.csdn.net/qq_35451572/article/details/79443467" target="_blank" rel="noopener">https://blog.csdn.net/qq_35451572/article/details/79443467</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#图片位置-居左居中居右&quot;&gt;图片位置-居左/居中/居右&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#图片大小&quot;&gt;图片大小&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr&gt;&lt;p&gt;写在前面：&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="解决方案" scheme="https://behappy00.github.io/categories/解决方案/"/>
    
    
    <category term="转载" scheme="https://behappy00.github.io/tags/转载/"/>
    
    <category term="markdown" scheme="https://behappy00.github.io/tags/markdown/"/>
    
    <category term="图片" scheme="https://behappy00.github.io/tags/图片/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown语法进阶（三）（文字居中、图片处理、插入视频音乐、标准字体）</title>
    <link href="https://behappy00.github.io/2023/10/02/MarkDown%E8%AF%AD%E6%B3%95%E8%BF%9B%E9%98%B6%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%88%E6%96%87%E5%AD%97%E5%B1%85%E4%B8%AD%E3%80%81%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E3%80%81%E6%8F%92%E5%85%A5%E8%A7%86%E9%A2%91%E9%9F%B3%E4%B9%90%E3%80%81%E6%A0%87%E5%87%86%E5%AD%97%E4%BD%93%EF%BC%89/"/>
    <id>https://behappy00.github.io/2023/10/02/MarkDown%E8%AF%AD%E6%B3%95%E8%BF%9B%E9%98%B6%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%88%E6%96%87%E5%AD%97%E5%B1%85%E4%B8%AD%E3%80%81%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E3%80%81%E6%8F%92%E5%85%A5%E8%A7%86%E9%A2%91%E9%9F%B3%E4%B9%90%E3%80%81%E6%A0%87%E5%87%86%E5%AD%97%E4%BD%93%EF%BC%89/</id>
    <published>2023-10-02T12:36:23.000Z</published>
    <updated>2023-10-14T17:29:15.149Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><a href="#1文字居中">1、文字居中：</a></li><li><a href="#2插入图片及图片居中定义大小">2、插入图片及图片居中、定义大小</a></li><li><a href="#3插入音乐">3、插入音乐</a></li><li><a href="#4插入视频">4、插入视频</a></li><li><a href="#5跳转链接">5、跳转链接</a></li><li><a href="#6使用标准字体">6、使用标准字体</a></li><li><a href="#7多种矩阵形式输入">7、多种矩阵形式输入</a></li></ul><a id="more"></a><!-- TOC --><!-- /TOC --><hr><p>写在前面：</p><blockquote><p>如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com</p></blockquote><p>参考文章：</p><ol><li><a href="https://blog.csdn.net/m0_37925202/article/details/80461714" target="_blank" rel="noopener">https://blog.csdn.net/m0_37925202/article/details/80461714</a></li></ol><ul><li><p>Markdown编辑器本身是内容写作工具，本身并不支持文字排版，理论上它只是指出哪些内容是表格、哪些内容是标题、哪些是正文图片代码超链。</p></li><li><p>但是由于markdown需要输出，自带html/css整合，因此需要指定格式时可以通过内嵌html或者内嵌css来实现。</p></li></ul><p>如果对Markdown 语法不够熟悉，可以查看下面两篇博客：</p><p><a href="https://blog.csdn.net/m0_37925202/article/details/78380297" target="_blank" rel="noopener">MarkDown下载以及入门语法（一）</a></p><p><a href="https://blog.csdn.net/m0_37925202/article/details/80302722" target="_blank" rel="noopener">Markdown字体大小颜色、大小、背景色 （二）</a></p><hr><h6 id="1、文字居中："><a href="#1、文字居中：" class="headerlink" title="1、文字居中："></a>1、文字居中：</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;center&gt;诶嘿&lt;/center&gt;</span><br></pre></td></tr></table></figure><p>左对齐：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p align=&quot;left&quot;&gt;诶嘿&lt;/p&gt;</span><br></pre></td></tr></table></figure><h6 id="2、插入图片及图片居中、定义大小"><a href="#2、插入图片及图片居中、定义大小" class="headerlink" title="2、插入图片及图片居中、定义大小"></a>2、插入图片及图片居中、定义大小</h6><ul><li>让图片靠左 显示</li></ul><p>基本形式是：<code>![这里放图片描述](这里放图片链接)</code><br>例子：<code>![这里描述了***样的图片](https://img-prod-cms-rt-microsoft-com.akamaized.net/cms/api/am/imageFileData/RE4wHfY?ver=4766)</code></p><ul><li>定义尺寸</li></ul><p><code>&lt;img width = &#39;150&#39; height =&#39;150&#39; src =&quot;https://img-prod-cms-rt-microsoft-com.akamaized.net/cms/api/am/imageFileData/RE4wHfY?ver=4766&quot;/&gt;</code></p><ul><li>定义大小并居中显示</li></ul><p><code>&lt;div align=center&gt;&lt;img width = &#39;150&#39; height =&#39;150&#39; src =&quot;https://img-prod-cms-rt-microsoft-com.akamaized.net/cms/api/am/imageFileData/RE4wHfY?ver=4766&quot;/&gt;&lt;/div&gt;</code></p><h6 id="3、插入音乐"><a href="#3、插入音乐" class="headerlink" title="3、插入音乐"></a>3、插入音乐</h6><p><code>&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=528478901&amp;auto=1&amp;height=66&quot;&gt;&lt;/iframe&gt;</code></p><h6 id="4、插入视频"><a href="#4、插入视频" class="headerlink" title="4、插入视频"></a>4、插入视频</h6><blockquote><p>不支持优酷，可以用youtube。</p></blockquote><p><code>&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Ilg3gGewQ5U&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;</code></p><h6 id="5、跳转链接"><a href="#5、跳转链接" class="headerlink" title="5、跳转链接"></a>5、跳转链接</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;http://askunix.top/&quot; target=&quot;_blank&quot;&gt;跳到自己博客列表&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">跳到自己博客列表：&lt;a href=&quot;http://askunix.top/&quot; </span><br><span class="line"></span><br><span class="line">target=&quot;_blank&quot;&gt;http://askunix.top/&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><a href="http://askunix.top/" target="_blank" rel="noopener">跳到自己博客列表</a><br>跳到自己博客列表：<a href="http://askunix.top/" target="_blank" rel="noopener"></a><br><a href="http://askunix.top/" target="_blank" rel="noopener">http://askunix.top/</a></p><h6 id="6、使用标准字体"><a href="#6、使用标准字体" class="headerlink" title="6、使用标准字体"></a>6、使用标准字体</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;font face=&quot;黑体&quot;&gt;我是黑体字&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;微软雅黑&quot;&gt;我是微软雅黑&lt;/font&gt;</span><br><span class="line">&lt;font face=&quot;STCAIYUN&quot;&gt;我是华文彩云&lt;/font&gt;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/MarkDown语法进阶（三）（文字居中、图片处理、插入视频音乐、标准字体）/1.JPG" alt></p><h6 id="7、多种矩阵形式输入"><a href="#7、多种矩阵形式输入" class="headerlink" title="7、多种矩阵形式输入"></a>7、多种矩阵形式输入</h6><ul><li>不带括号的：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$$\begin&#123;matrix&#125;</span><br><span class="line">1&amp;2 \\  3&amp;4 \\ 5&amp;6</span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/MarkDown语法进阶（三）（文字居中、图片处理、插入视频音乐、标准字体）/2.JPG" alt></p><ul><li>带大括号的：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$$\left\&#123;</span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line">1&amp;2 \\  3&amp;4 \\ 5&amp;6</span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">\right\&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/MarkDown语法进阶（三）（文字居中、图片处理、插入视频音乐、标准字体）/3.JPG" alt></p><ul><li>带中括号的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$$\left[</span><br><span class="line">\begin&#123;matrix&#125;</span><br><span class="line">1&amp;2 \\  3&amp;4 \\ 5&amp;6</span><br><span class="line">\end&#123;matrix&#125;</span><br><span class="line">\right]</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/MarkDown语法进阶（三）（文字居中、图片处理、插入视频音乐、标准字体）/4.JPG" alt></p><p>本文转自 <a href="https://blog.csdn.net/m0_37925202/article/details/80461714" target="_blank" rel="noopener">https://blog.csdn.net/m0_37925202/article/details/80461714</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1文字居中&quot;&gt;1、文字居中：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2插入图片及图片居中定义大小&quot;&gt;2、插入图片及图片居中、定义大小&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3插入音乐&quot;&gt;3、插入音乐&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4插入视频&quot;&gt;4、插入视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5跳转链接&quot;&gt;5、跳转链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6使用标准字体&quot;&gt;6、使用标准字体&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#7多种矩阵形式输入&quot;&gt;7、多种矩阵形式输入&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="解决方案" scheme="https://behappy00.github.io/categories/解决方案/"/>
    
    
    <category term="转载" scheme="https://behappy00.github.io/tags/转载/"/>
    
    <category term="markdown" scheme="https://behappy00.github.io/tags/markdown/"/>
    
    <category term="图片" scheme="https://behappy00.github.io/tags/图片/"/>
    
    <category term="文字" scheme="https://behappy00.github.io/tags/文字/"/>
    
    <category term="视频" scheme="https://behappy00.github.io/tags/视频/"/>
    
  </entry>
  
  <entry>
    <title>VSCode之Markdown自动生成目录-TOC-解决目录不整齐问题</title>
    <link href="https://behappy00.github.io/2023/10/02/VSCode%E4%B9%8BMarkdown%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95-TOC-%E8%A7%A3%E5%86%B3%E7%9B%AE%E5%BD%95%E4%B8%8D%E6%95%B4%E9%BD%90%E9%97%AE%E9%A2%98/"/>
    <id>https://behappy00.github.io/2023/10/02/VSCode%E4%B9%8BMarkdown%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E7%9B%AE%E5%BD%95-TOC-%E8%A7%A3%E5%86%B3%E7%9B%AE%E5%BD%95%E4%B8%8D%E6%95%B4%E9%BD%90%E9%97%AE%E9%A2%98/</id>
    <published>2023-10-02T12:34:47.000Z</published>
    <updated>2023-10-14T17:34:45.774Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><a href="#一下载插件">一、下载插件</a></li><li><a href="#二生成目录">二、生成目录</a></li><li><a href="#三可能出现的问题及解决">三、可能出现的问题及解决</a></li></ul><hr><p>写在前面：</p><blockquote><p>如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com</p></blockquote><a id="more"></a><!-- TOC --><!-- /TOC --><p>参考文章：</p><ol><li><a href="https://blog.csdn.net/qq_34243930/article/details/104144428" target="_blank" rel="noopener">https://blog.csdn.net/qq_34243930/article/details/104144428</a></li></ol><h3 id="一、下载插件"><a href="#一、下载插件" class="headerlink" title="一、下载插件"></a>一、下载插件</h3><p>（1）在扩展里，搜索“Markdown”，在列表里选择Markdown的插件。<br>（2）例如“Markdown TOC”，这是一个专门生产目录的插件。点击安装  </p><p><img src="/2023/10/02/VSCode之Markdown自动生成目录-TOC-解决目录不整齐问题/1.png" alt></p><h3 id="二、生成目录"><a href="#二、生成目录" class="headerlink" title="二、生成目录"></a>二、生成目录</h3><p>在你想添加目录的地方右击选择“Markdown TOC:Insert/Update”<br><img src="/2023/10/02/VSCode之Markdown自动生成目录-TOC-解决目录不整齐问题/2.png" alt></p><h3 id="三、可能出现的问题及解决"><a href="#三、可能出现的问题及解决" class="headerlink" title="三、可能出现的问题及解决"></a>三、可能出现的问题及解决</h3><p>VSCode中Markdown目录显示异常<br>TOC标签格式异常出现如下auto的文字</p><p><img src="/2023/10/02/VSCode之Markdown自动生成目录-TOC-解决目录不整齐问题/3.png" alt></p><p>原因：默认行尾字符格式问题。<br>解决：<br>1、点击界面左下方的设置按钮<br>2、选择设置进入到用户设置界面。<br>3、打开用户设置之后在搜索设置里面搜索Eol。<br>4、找到文件的Eol可以看到默认行尾字符设置为auto。</p><p><img src="/2023/10/02/VSCode之Markdown自动生成目录-TOC-解决目录不整齐问题/4.png" alt></p><p>点击选项框然后将auto更改为\n换行符即可。  </p><p><img src="/2023/10/02/VSCode之Markdown自动生成目录-TOC-解决目录不整齐问题/5.png" alt></p><p>回到Markdown编辑界面然后重新生成Markdown目录就能显示正常了  </p><p><img src="/2023/10/02/VSCode之Markdown自动生成目录-TOC-解决目录不整齐问题/6.png" alt></p><p>本文转自 <a href="https://blog.csdn.net/qq_34243930/article/details/104144428" target="_blank" rel="noopener">https://blog.csdn.net/qq_34243930/article/details/104144428</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#一下载插件&quot;&gt;一、下载插件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#二生成目录&quot;&gt;二、生成目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#三可能出现的问题及解决&quot;&gt;三、可能出现的问题及解决&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr&gt;&lt;p&gt;写在前面：&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="解决方案" scheme="https://behappy00.github.io/categories/解决方案/"/>
    
    
    <category term="转载" scheme="https://behappy00.github.io/tags/转载/"/>
    
    <category term="markdown" scheme="https://behappy00.github.io/tags/markdown/"/>
    
    <category term="自动导航栏" scheme="https://behappy00.github.io/tags/自动导航栏/"/>
    
    <category term="插件" scheme="https://behappy00.github.io/tags/插件/"/>
    
    <category term="软件使用（vscode）" scheme="https://behappy00.github.io/tags/软件使用（vscode）/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown设置图片居中显示并调整大小</title>
    <link href="https://behappy00.github.io/2023/10/02/MarkDown%E8%AE%BE%E7%BD%AE%E5%9B%BE%E7%89%87%E5%B1%85%E4%B8%AD%E6%98%BE%E7%A4%BA%E5%B9%B6%E8%B0%83%E6%95%B4%E5%A4%A7%E5%B0%8F/"/>
    <id>https://behappy00.github.io/2023/10/02/MarkDown%E8%AE%BE%E7%BD%AE%E5%9B%BE%E7%89%87%E5%B1%85%E4%B8%AD%E6%98%BE%E7%A4%BA%E5%B9%B6%E8%B0%83%E6%95%B4%E5%A4%A7%E5%B0%8F/</id>
    <published>2023-10-02T12:33:32.000Z</published>
    <updated>2023-10-03T04:25:46.741Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><a href="#markdown图片的一般格式">Markdown图片的一般格式</a></li><li><a href="#一行代码让图片显示居中">一行代码让图片显示居中</a></li></ul><hr><p>写在前面：</p><blockquote><p>如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com</p></blockquote><a id="more"></a><!-- TOC --><!-- /TOC --><p>参考文章：</p><ol><li><a href="https://yunlong.blog.csdn.net/article/details/107575128?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control" target="_blank" rel="noopener">https://yunlong.blog.csdn.net/article/details/107575128?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control</a></li></ol><h2 id="Markdown图片的一般格式"><a href="#Markdown图片的一般格式" class="headerlink" title="Markdown图片的一般格式"></a>Markdown图片的一般格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">! [] ()</span><br></pre></td></tr></table></figure><ul><li><p>” <code>[]</code> “中是图片描述</p></li><li><p>” <code>()</code> “是图片的URL(本地或网络).</p></li></ul><p><img src="/2023/10/02/MarkDown设置图片居中显示并调整大小/1.png" alt="在这里插入图片描述"><br>显示出来的效果(未居中和更改大小)<br><img src="https://img-blog.csdnimg.cn/20200725104000982.png" alt="Masschussates的博客"></p><h2 id="一行代码让图片显示居中"><a href="#一行代码让图片显示居中" class="headerlink" title="一行代码让图片显示居中"></a>一行代码让图片显示居中</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div align=center&gt;&lt;img src=&quot;url&quot; width=&quot;  &quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>其中<code>url</code>是要插入的图片的链接，<code>width</code>是修改图片的尺寸，去掉该选项后图片则以原画显示。</p><ul><li>带有调整尺寸的居中显示</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div align=center&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200725104000982.png&quot; width=&quot;200&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div align=center&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200725104000982.png&quot; width=&quot;300&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div align=center&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200725104000982.png&quot; width=&quot;400&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div align=center&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200725104000982.png&quot; width=&quot;500&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div align=center&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200725104000982.png&quot; width=&quot;600&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>去掉调整尺寸的原画居中显示</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div align=center&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/20200725104000982.png&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>本文转自 <a href="https://yunlong.blog.csdn.net/article/details/107575128?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control" target="_blank" rel="noopener">https://yunlong.blog.csdn.net/article/details/107575128?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#markdown图片的一般格式&quot;&gt;Markdown图片的一般格式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#一行代码让图片显示居中&quot;&gt;一行代码让图片显示居中&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;hr&gt;&lt;p&gt;写在前面：&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="解决方案" scheme="https://behappy00.github.io/categories/解决方案/"/>
    
    
    <category term="转载" scheme="https://behappy00.github.io/tags/转载/"/>
    
    <category term="markdown" scheme="https://behappy00.github.io/tags/markdown/"/>
    
    <category term="图片" scheme="https://behappy00.github.io/tags/图片/"/>
    
  </entry>
  
  <entry>
    <title>Markdown公式、特殊字符、上下标、求和/积分、分式/根式、字体</title>
    <link href="https://behappy00.github.io/2023/10/02/Markdown%E5%85%AC%E5%BC%8F%E3%80%81%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E3%80%81%E4%B8%8A%E4%B8%8B%E6%A0%87%E3%80%81%E6%B1%82%E5%92%8C-%E7%A7%AF%E5%88%86%E3%80%81%E5%88%86%E5%BC%8F-%E6%A0%B9%E5%BC%8F%E3%80%81%E5%AD%97%E4%BD%93/"/>
    <id>https://behappy00.github.io/2023/10/02/Markdown%E5%85%AC%E5%BC%8F%E3%80%81%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E3%80%81%E4%B8%8A%E4%B8%8B%E6%A0%87%E3%80%81%E6%B1%82%E5%92%8C-%E7%A7%AF%E5%88%86%E3%80%81%E5%88%86%E5%BC%8F-%E6%A0%B9%E5%BC%8F%E3%80%81%E5%AD%97%E4%BD%93/</id>
    <published>2023-10-02T12:32:20.000Z</published>
    <updated>2023-10-14T17:30:23.046Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><a href="#1-公式标记">1. 公式标记</a></li><li><a href="#2-特殊字符">2. 特殊字符</a></li><li><a href="#3-上标下标">3. 上标/下标</a></li><li><a href="#4-括号">4. 括号</a></li><li><a href="#5-求和积分">5. 求和/积分</a></li><li><a href="#6-分式根式">6. 分式/根式</a></li><li><a href="#7-字体">7. 字体</a></li><li><a href="#8-居中">8. 居中</a></li></ul><a id="more"></a><!-- TOC --><!-- /TOC --><hr><p>写在前面：</p><blockquote><p>如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com</p></blockquote><p>参考文章：</p><ol><li><a href="https://blog.csdn.net/weixin_42546496/article/details/88115095" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42546496/article/details/88115095</a></li></ol><h2 id="1-公式标记"><a href="#1-公式标记" class="headerlink" title="1. 公式标记"></a>1. 公式标记</h2><p>Markdown两种输入公式的方法：一是行内公式（inline），用一对美元符号“$”包裹。二是整行公式（displayed），用一对紧挨的两个美元符号“ $$ ”包裹。</p><ol><li><p>这是一个行内公式： ( W 1 − W 2 ) x + b 1 − b 2 = 0 (W_1−W_2)x+b_1−b_2=0 (W1​−W2​)x+b1​−b2​\=0<br>写法是：$(W_1−W_2)x+b_1−b_2=0$</p></li><li><p>这是一个整行公式：<br>( W 1 − W 2 ) x + b 1 − b 2 = 0 (W_1−W_2)x+b_1−b_2=0 (W1​−W2​)x+b1​−b2​\=0<br>写法是：  </p><script type="math/tex; mode=display">(W\_1−W\_2)x+b\_1−b\_2=0</script></li></ol><h2 id="2-特殊字符"><a href="#2-特殊字符" class="headerlink" title="2. 特殊字符"></a>2. 特殊字符</h2><div class="table-container"><table><thead><tr><th>名称</th><th>大写</th><th>写法</th><th>小写</th><th>写法</th></tr></thead><tbody><tr><td>alpha</td><td>A</td><td>A</td><td>α</td><td>\alpha</td></tr><tr><td>beta</td><td>B</td><td>B</td><td>β</td><td>\beat</td></tr><tr><td>gamma</td><td>Γ</td><td>\Gamma</td><td>γ</td><td>\gamma</td></tr><tr><td>delta</td><td>Δ</td><td>\Delta</td><td>δ</td><td>\delta</td></tr><tr><td>epsilon</td><td>E</td><td>E</td><td>ϵ</td><td>\epsilon</td></tr><tr><td>zeta</td><td>Z</td><td>Z</td><td>ζ</td><td>\zeta</td></tr><tr><td>eta</td><td>H</td><td>H</td><td>η</td><td>\eta</td></tr><tr><td>theta</td><td>Θ</td><td>\Theta</td><td>θ</td><td>\theta</td></tr><tr><td>iota</td><td>I</td><td>I</td><td>ι</td><td>\iota</td></tr><tr><td>kappa</td><td>K</td><td>K</td><td>κ</td><td>\kappa</td></tr><tr><td>lambda</td><td>Λ</td><td>\Lambda</td><td>λ</td><td>\lambda</td></tr><tr><td>mu</td><td>M</td><td>M</td><td>μ</td><td>\mu</td></tr><tr><td>nu</td><td>N</td><td>N</td><td>ν</td><td>\nu</td></tr><tr><td>xi</td><td>Ξ</td><td>\Xi</td><td>ξ</td><td>\xi</td></tr><tr><td>omicron</td><td>O</td><td>O</td><td>ο</td><td>\omicron</td></tr><tr><td>pi</td><td>Π</td><td>\Pi</td><td>π</td><td>\pi</td></tr><tr><td>rho</td><td>P</td><td>P</td><td>ρ</td><td>\rho</td></tr><tr><td>sigma</td><td>Σ</td><td>\Sigma</td><td>σ</td><td>\sigma</td></tr><tr><td>tau</td><td>T</td><td>T</td><td>τ</td><td>\tau</td></tr><tr><td>upsilon</td><td>Υ</td><td>\Upsilon</td><td>υ</td><td>\upsilon</td></tr><tr><td>phi</td><td>Φ</td><td>\Phi</td><td>ϕ</td><td>\phi</td></tr><tr><td>chi</td><td>X</td><td>X</td><td>χ</td><td>\chi</td></tr><tr><td>psi</td><td>Ψ</td><td>\Psi</td><td>ψ</td><td>\psi</td></tr><tr><td>omega</td><td>Ω</td><td>\Omega</td><td>ω</td><td>\omega</td></tr></tbody></table></div><h2 id="3-上标-下标"><a href="#3-上标-下标" class="headerlink" title="3. 上标/下标"></a>3. 上标/下标</h2><p>上标和下标分别使用^和_来实现。例如:<br>$x_i^2$ == x i 2 x_i^2 xi2​<br>$log_2^x$ == l o g 2 x log_2^x log2x​</p><p>默认情况下，上下标符号仅仅对下一个字符作用。一组字符使用{}包裹起来的内容。也就是说，如果使用$10^10$会得到 1 0 1 0 10^10 1010，而$10^{10}$ 才是 1 0 10 10^{10} 1010。同时，大括号还能消除二义性，如$x^5^6$ 会显示错误，必须使用大括号来界定^ 的结合性，如${x^5}^6$ == x 5 6 {x^5}^6 x56或者$x^{5^6}$ == x 5 6 x^{5^6} x56。</p><p>另外，如果要在左右两边都有上下标，可以写为 ${^1_2}A{^3_4}$== 2 1 A 4 3 {^1_2}A{^3_4} 21​A43​</p><h2 id="4-括号"><a href="#4-括号" class="headerlink" title="4. 括号"></a>4. 括号</h2><p>小括号与方括号：使用原始的()和[]即可。如$(2+3)[4+4]$== ( 2 + 3 ) [ 4 + 4 ] (2+3)[4+4] (2+3)[4+4]。<br>大括号：由于大括号{}被用来分组，因此需要使用”\“转义字符\{和\}表示大括号。如$\{a*b\}$ == { a ∗ b } \{a∗b\} {a∗b}。<br>尖括号：使用\langle和\rangle分别表示左尖括号和右尖括号。如$\langle x \rangle$ == ⟨ x ⟩ \langle x \rangle ⟨x⟩。<br>上取整：使用\lceil和\rceil表示。如$\lceil x \rceil$ == ⌈ x ⌉ \lceil x \rceil ⌈x⌉。<br>下取整：使用\lfloor和\rfloor表示。如$\lfloor x \rfloor$ == ⌊ x ⌋ \lfloor x \rfloor ⌊x⌋。</p><p>需要注意的是，原始括号并不会随着公式的大小自动缩放。如$(\frac12)$ == ( 1 2 ) (\frac12) (21​)。可以使用\left( …\right)来自适应的调整括号。如$\left( \frac12 \right)$ == ( 1 2 ) \left( \frac12 \right) (21​)。可以明显看出，后一组公式中的括号是经过缩放的。</p><h2 id="5-求和-积分"><a href="#5-求和-积分" class="headerlink" title="5. 求和/积分"></a>5. 求和/积分</h2><p>\sum用来表示求和符号，其下标表示求和下限，上标表示上线。如$\sum_1^n$ == ∑ 1 n \sum_1^n ∑1n​。</p><p>\int用来表示积分符号，同样地，其上下标表示积分的上下限。如$\int_1^\infty$ == ∫ 1 ∞ \int_1^\infty ∫1∞​ 。</p><p>与此类似的符号还有：<br>$\prod$ == ∏ \prod ∏<br>$\bigcup$ == ⋃ \bigcup ⋃<br>$\bigcap$ == ⋂ \bigcap ⋂<br>$\iint$ == ∬ \iint ∬</p><h2 id="6-分式-根式"><a href="#6-分式-根式" class="headerlink" title="6. 分式/根式"></a>6. 分式/根式</h2><p>分式有两种表示方法。<br>第一种：使用$\frac ab$，结果为 a b \frac ab ba​。如果分子或分母不是单个字符，需要使用{}来分组。<br>第二种：使用\over来分隔一个组的前后两部分，如${a+1\over b+1}$ == a + 1 b + 1 {a+1\over b+1} b+1a+1​。</p><p>根式使用$\sqrt[a]b$来表示。其中，方括号内的值用来表示开几次方，省略方括号则表示开方，如$\sqrt[4]{\frac xy}$ == x y 4 \sqrt[4]{\frac xy} 4yx​ ​ ，$\sqrt{x^3}$ == x 3 \sqrt{x^3} x3 ​。</p><h2 id="7-字体"><a href="#7-字体" class="headerlink" title="7. 字体"></a>7. 字体</h2><div class="table-container"><table><thead><tr><th>语法</th><th>效果</th></tr></thead><tbody><tr><td><font face="“黑体”">我是黑体字</font></td><td>我是黑体字</td></tr><tr><td><font face="“微软雅黑”">我是微软雅黑</font></td><td>我是微软雅黑</td></tr><tr><td><font face="“STCAIYUN”">我是华文彩云</font></td><td>我是华文彩云</td></tr><tr><td><font color="red">我是红色</font></td><td>我是红色</td></tr><tr><td><font color="#008000">我是绿色</font></td><td>我是绿色</td></tr><tr><td><font color="Blue">我是蓝色</font></td><td>我是蓝色</td></tr><tr><td><font size="5">我是尺寸</font></td><td>我是尺寸</td></tr><tr><td><font face="“黑体”" color="green" size="5">我是黑体，绿色，尺寸为5</font></td><td>我是黑体，绿色，尺寸为5</td></tr></tbody></table></div><h2 id="8-居中"><a href="#8-居中" class="headerlink" title="8. 居中"></a>8. 居中</h2><p>居中语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;center&gt; 串口通信程序&lt;br&gt;&lt;br&gt;&lt;/center &gt;</span><br></pre></td></tr></table></figure></p><p>居中效果：</p><p><center> 串口通信程序<br><br>&lt;/center &gt;  </center></p><p>本文转自 <a href="https://blog.csdn.net/weixin_42546496/article/details/88115095" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42546496/article/details/88115095</a>，如有侵权，请联系删除。</p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-公式标记&quot;&gt;1. 公式标记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-特殊字符&quot;&gt;2. 特殊字符&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-上标下标&quot;&gt;3. 上标/下标&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-括号&quot;&gt;4. 括号&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#5-求和积分&quot;&gt;5. 求和/积分&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#6-分式根式&quot;&gt;6. 分式/根式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#7-字体&quot;&gt;7. 字体&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#8-居中&quot;&gt;8. 居中&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="解决方案" scheme="https://behappy00.github.io/categories/解决方案/"/>
    
    
    <category term="转载" scheme="https://behappy00.github.io/tags/转载/"/>
    
    <category term="markdown" scheme="https://behappy00.github.io/tags/markdown/"/>
    
    <category term="公式字符" scheme="https://behappy00.github.io/tags/公式字符/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 最全数学符号与公式速查</title>
    <link href="https://behappy00.github.io/2023/10/02/Markdown-%E6%9C%80%E5%85%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7%E4%B8%8E%E5%85%AC%E5%BC%8F%E9%80%9F%E6%9F%A5/"/>
    <id>https://behappy00.github.io/2023/10/02/Markdown-%E6%9C%80%E5%85%A8%E6%95%B0%E5%AD%A6%E7%AC%A6%E5%8F%B7%E4%B8%8E%E5%85%AC%E5%BC%8F%E9%80%9F%E6%9F%A5/</id>
    <published>2023-10-02T12:26:56.000Z</published>
    <updated>2023-10-02T12:30:24.363Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><a href="#1-字母">1. 字母</a><ul><li><a href="#11-希腊字母">1.1 希腊字母</a></li><li><a href="#12-数学模式重音符">1.2 数学模式重音符</a></li><li><a href="#13-字体转换">1.3 字体转换</a></li></ul></li><li><a href="#2-关系符与运算符">2. 关系符与运算符</a><ul><li><a href="#21-二元关系符">2.1 二元关系符</a></li><li><a href="#22-二元运算符">2.2 二元运算符</a></li><li><a href="#23-其他符号">2.3 其他符号</a></li></ul></li><li><a href="#3-公式">3. 公式</a></li><li><a href="#4-其他">4. 其他</a></li></ul><a id="more"></a><!-- TOC --><!-- /TOC --><hr><p>写在前面：</p><blockquote><p>如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com</p></blockquote><p>参考文章：</p><ol><li><a href="https://blog.csdn.net/apr15/article/details/105597907" target="_blank" rel="noopener">https://blog.csdn.net/apr15/article/details/105597907</a></li></ol><p>Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。<br>Markdown中书写数学符号与公式时，只需在数学符号与公式前后同时添加“$”（不要留有空格）或“$$”即可。</p><h2 id="1-字母"><a href="#1-字母" class="headerlink" title="1. 字母"></a>1. 字母</h2><h3 id="1-1-希腊字母"><a href="#1-1-希腊字母" class="headerlink" title="1.1 希腊字母"></a>1.1 希腊字母</h3><p><strong>小写</strong></p><div class="table-container"><table><thead><tr><th>显示</th><th>语法</th><th>语法</th><th>语法</th><th>语法</th><th>语法</th><th>语法</th><th>语法</th></tr></thead><tbody><tr><td>α \alpha α</td><td>\alpha</td><td>θ \theta θ</td><td>\theta</td><td>o o o</td><td>o</td><td>υ \upsilon υ</td><td>\upsilon</td></tr><tr><td>β \beta β</td><td>\beta</td><td>ϑ \vartheta ϑ</td><td>\vartheta</td><td>π \pi π</td><td>\pi</td><td>ϕ \phi ϕ</td><td>\phi</td></tr><tr><td>γ \gamma γ</td><td>\gamma</td><td>ι \iota ι</td><td>\iota</td><td>ϖ \varpi ϖ</td><td>\varpi</td><td>φ \varphi φ</td><td>\varphi</td></tr><tr><td>δ \delta δ</td><td>\delta</td><td>κ \kappa κ</td><td>\kappa</td><td>ρ \rho ρ</td><td>\rho</td><td>χ \chi χ</td><td>\chi</td></tr><tr><td>ϵ \epsilon ϵ</td><td>\epsilon</td><td>λ \lambda λ</td><td>\lambda</td><td>ϱ \varrho ϱ</td><td>\varrho</td><td>ψ \psi ψ</td><td>\psi</td></tr><tr><td>ε \varepsilon ε</td><td>\varepsilon</td><td>μ \mu μ</td><td>\mu</td><td>σ \sigma σ</td><td>\sigma</td><td>ω \omega ω</td><td>\omega</td></tr><tr><td>ζ \zeta ζ</td><td>\zeta</td><td>ν \nu ν</td><td>\nu</td><td>ς \varsigma ς</td><td>\varsigma</td><td>η \eta η</td><td>\eta</td></tr><tr><td>ξ \xi ξ</td><td>\xi</td><td>τ \tau τ</td><td>\tau</td><td></td><td></td><td></td></tr></tbody></table></div><p><strong>大写</strong></p><div class="table-container"><table><thead><tr><th>显示</th><th>语法</th><th>显示</th><th>语法</th><th>显示</th><th>语法</th><th>显示</th><th>语法</th></tr></thead><tbody><tr><td>Γ \Gamma Γ</td><td>\Gamma</td><td>Λ \Lambda Λ</td><td>\Lambda</td><td>Σ \Sigma Σ</td><td>\Sigma</td><td>Ψ \Psi Ψ</td><td>\Psi</td></tr><tr><td>Δ \Delta Δ</td><td>\Delta</td><td>Ξ \Xi Ξ</td><td>\Xi</td><td>Υ \Upsilon Υ</td><td>\Upsilon</td><td>Ω \Omega Ω</td><td>\Omega</td></tr><tr><td>Θ \Theta Θ</td><td>\Theta</td><td>Π \Pi Π</td><td>\Pi</td><td>Φ \Phi Φ</td><td>\Phi</td><td></td></tr></tbody></table></div><h3 id="1-2-数学模式重音符"><a href="#1-2-数学模式重音符" class="headerlink" title="1.2 数学模式重音符"></a>1.2 数学模式重音符</h3><div class="table-container"><table><thead><tr><th>显示</th><th>语法</th><th>显示</th><th>语法</th><th>显示</th><th>语法</th><th>显示</th><th>语法</th></tr></thead><tbody><tr><td>x ˉ \bar{x} xˉ</td><td>\bar{x}</td><td>x ˊ \acute{x} xˊ</td><td>\acute{x}</td><td>x ˇ \check{x} xˇ</td><td>\check{x}</td><td>x ˋ \grave{x} xˋ</td><td>\grave{x}</td></tr><tr><td>x ^ \hat{x } x^</td><td>\hat{x}</td><td>x ~ \tilde{x } x~</td><td>\tilde{x}</td><td>x ˙ \dot{x} x˙</td><td>\dot{x}</td><td>x ¨ \ddot{x } x¨</td><td>\ddot{x}</td></tr><tr><td>x ˘ \breve{x } x˘</td><td>\breve{x}</td><td>x ⃗ \vec{x } x</td><td>\vec{x}</td><td>X ^ \widehat{X } X</td><td>\widehat{X}</td><td>X ~ \widetilde{X } X</td><td>\widetilde{X}</td></tr></tbody></table></div><h3 id="1-3-字体转换"><a href="#1-3-字体转换" class="headerlink" title="1.3 字体转换"></a>1.3 字体转换</h3><p>一般情况下，公式默认为意大利体，直体为罗马体。</p><div class="table-container"><table><thead><tr><th>显示</th><th>语法</th><th>说明</th></tr></thead><tbody><tr><td>X \rm X X</td><td>\rm</td><td>罗马体</td></tr><tr><td>X \mathcal X X</td><td>\mathcal</td><td>花体</td></tr><tr><td>X \it X X</td><td>\it</td><td>斜体（默认，意大利体）</td></tr><tr><td>X \mathit X X</td><td>\mathit</td><td>数学斜体</td></tr><tr><td>X \Bbb X X</td><td>\Bbb</td><td>黑板粗体</td></tr><tr><td>X \bf X X</td><td>\bf</td><td>粗体</td></tr><tr><td>X \sf X X</td><td>\sf</td><td>等线体</td></tr><tr><td>X \mathscr X X</td><td>\mathscr</td><td>手写体</td></tr><tr><td>X \tt X X</td><td>\tt</td><td>打字机体</td></tr><tr><td>X \frak X X</td><td>\frak</td><td>旧德式字体</td></tr><tr><td>X \boldsymbol X X</td><td>\boldsymbol</td><td>黑体</td></tr><tr><td>X \bold X X</td><td>\bb</td><td>直版黑体</td></tr></tbody></table></div><h2 id="2-关系符与运算符"><a href="#2-关系符与运算符" class="headerlink" title="2. 关系符与运算符"></a>2. 关系符与运算符</h2><h3 id="2-1-二元关系符"><a href="#2-1-二元关系符" class="headerlink" title="2.1 二元关系符"></a>2.1 二元关系符</h3><div class="table-container"><table><thead><tr><th>显示</th><th>语法</th></tr></thead><tbody><tr><td>&lt; &lt; &lt;</td><td>&lt;</td></tr><tr><td>> &gt; ></td><td>></td></tr><tr><td>≥ \geq ≥</td><td>\geq或\ge</td></tr><tr><td>≤ \leq ≤</td><td>\leq或\le</td></tr><tr><td>≫ \gg ≫</td><td>\gg</td></tr><tr><td>≪ \ll ≪</td><td>\ll</td></tr><tr><td>∝ \propto ∝</td><td>\propto</td></tr><tr><td>\= = \=</td><td>\=</td></tr><tr><td>≠ \neq \=</td><td>\neq</td></tr><tr><td>≡ \equiv ≡</td><td>\equiv</td></tr><tr><td>≜ \triangleq ≜</td><td>\triangleq</td></tr><tr><td>∼ \sim ∼</td><td>\sim</td></tr><tr><td>≃ \simeq ≃</td><td>\simeq</td></tr><tr><td>≅ \cong ≅</td><td>\cong</td></tr><tr><td>≈ \approx ≈</td><td>\approx</td></tr><tr><td>∣ \mid ∣</td><td>\mid</td></tr><tr><td>∥ \parallel ∥</td><td>\parallel</td></tr><tr><td>: : :</td><td>:</td></tr><tr><td>⊂ \subset ⊂</td><td>\subset</td></tr><tr><td>⊃ \supset ⊃</td><td>\supset</td></tr><tr><td>⊇ \supseteq ⊇</td><td>\supseteq</td></tr><tr><td>⊆ \subseteq ⊆</td><td>\subseteq</td></tr><tr><td>∈ \in ∈</td><td>\in</td></tr><tr><td>∉ \notin ∈/</td><td>\notin</td></tr><tr><td>∋ \ni ∋</td><td>\ni或\owns</td></tr></tbody></table></div><h3 id="2-2-二元运算符"><a href="#2-2-二元运算符" class="headerlink" title="2.2 二元运算符"></a>2.2 二元运算符</h3><div class="table-container"><table><thead><tr><th>显示</th><th>语法</th></tr></thead><tbody><tr><td>+ + +</td><td>+</td></tr><tr><td>− - −</td><td>-</td></tr><tr><td>∓ \mp ∓</td><td>\mp</td></tr><tr><td>± \pm ±</td><td>\pm</td></tr><tr><td>× \times ×</td><td>\times</td></tr><tr><td>÷ \div ÷</td><td>\div</td></tr><tr><td>∖ \setminus ∖</td><td>\setminus</td></tr><tr><td>¬ \lnot ¬</td><td>\lnot</td></tr><tr><td>∪ \cup ∪</td><td>\cup</td></tr><tr><td>∩ \cap ∩</td><td>\cap</td></tr><tr><td>∨ \vee ∨</td><td>\vee或\lor</td></tr><tr><td>∧ \wedge ∧</td><td>\wedge或\land</td></tr><tr><td>⊙ \odot ⊙</td><td>\odot</td></tr><tr><td>⊕ \oplus ⊕</td><td>\oplus</td></tr><tr><td>⊗ \otimes ⊗</td><td>\otimes</td></tr><tr><td>⊖ \ominus ⊖</td><td>\ominus</td></tr><tr><td>⊘ \oslash ⊘</td><td>\oslash</td></tr><tr><td>⋅ \cdot ⋅</td><td>\cdot</td></tr><tr><td>⋆ \star ⋆</td><td>\star</td></tr><tr><td>∘ \circ ∘</td><td>\circ</td></tr><tr><td>∙ \bullet ∙</td><td>\bullet</td></tr><tr><td>∗ \ast ∗</td><td>\ast</td></tr><tr><td>⋃ \bigcup ⋃</td><td>\bigcup</td></tr><tr><td>⋂ \bigcap ⋂</td><td>\bigcap</td></tr><tr><td>⋁ \bigvee ⋁</td><td>\bigvee</td></tr><tr><td>⋀ \bigwedge ⋀</td><td>\bigwedge</td></tr><tr><td>⨂ \bigotimes ⨂</td><td>\bigotimes</td></tr><tr><td>⨁ \bigoplus ⨁</td><td>\bigoplus</td></tr><tr><td>⨀ \bigodot ⨀</td><td>\bigodot</td></tr><tr><td>⋈ \Join ⋈</td><td>\Join</td></tr><tr><td>⋈ \bowtie ⋈</td><td>\bowtie</td></tr></tbody></table></div><h3 id="2-3-其他符号"><a href="#2-3-其他符号" class="headerlink" title="2.3 其他符号"></a>2.3 其他符号</h3><div class="table-container"><table><thead><tr><th>显示</th><th>语法</th></tr></thead><tbody><tr><td>∵ \because ∵</td><td>\because</td></tr><tr><td>∴ \therefore ∴</td><td>\therefore</td></tr><tr><td>… \dots …</td><td>\dots</td></tr><tr><td>⋯ \cdots ⋯</td><td>\cdots</td></tr><tr><td>⋮ \vdots ⋮</td><td>\vdots</td></tr><tr><td>⋱ \ddots ⋱</td><td>\ddots</td></tr><tr><td>′ \prime ′</td><td>\prime</td></tr><tr><td>∀ \forall ∀</td><td>\forall</td></tr><tr><td>∃ \exists ∃</td><td>\exists</td></tr><tr><td>∂ \partial ∂</td><td>\partial</td></tr><tr><td>∇ \nabla ∇</td><td>\nabla</td></tr><tr><td>∅ \emptyset ∅</td><td>\emptyset</td></tr><tr><td>∞ \infty ∞</td><td>\infty</td></tr><tr><td>⊥ \bot ⊥</td><td>\bot</td></tr><tr><td>⊤ \top ⊤</td><td>\top</td></tr><tr><td>∠ \angle ∠</td><td>\angle</td></tr><tr><td>√ \surd √</td><td>\surd</td></tr><tr><td>⋄ \diamond ⋄</td><td>·\diamond</td></tr><tr><td>◃ \triangleleft ◃</td><td>\triangleleft</td></tr><tr><td>▹ \triangleright ▹</td><td>\triangleright</td></tr><tr><td>△ \bigtriangleup △</td><td>\bigtriangleup</td></tr><tr><td>▽ \bigtriangledown ▽</td><td>\bigtriangledown</td></tr><tr><td>◯ \bigcirc ◯</td><td>\bigcirc</td></tr><tr><td>♢ \diamondsuit ♢</td><td>\diamondsuit</td></tr><tr><td>♡ \heartsuit ♡</td><td>\heartsuit</td></tr><tr><td>♣ \clubsuit ♣</td><td>\clubsuit</td></tr><tr><td>♠ \spadesuit ♠</td><td>\spadesuit</td></tr><tr><td>⌊ x ⌋ \lfloor x \rfloor ⌊x⌋</td><td>\lfloor x \rfloor</td></tr><tr><td>⌈ x ⌉ \lceil x \rceil ⌈x⌉</td><td>\lceil x \rceil</td></tr></tbody></table></div><p><strong>箭头</strong></p><div class="table-container"><table><thead><tr><th>显示</th><th>语法</th></tr></thead><tbody><tr><td>← \leftarrow ←</td><td>\leftarrow或\gets</td></tr><tr><td>⟵ \longleftarrow ⟵</td><td>\longleftarrow</td></tr><tr><td>→ \rightarrow →</td><td>\rightarrow或\to</td></tr><tr><td>⟶ \longrightarrow ⟶</td><td>\longrightarrow</td></tr><tr><td>↑ \uparrow ↑</td><td>\uparrow</td></tr><tr><td>↓ \downarrow ↓</td><td>\downarrow</td></tr><tr><td>⟸ \Longleftarrow ⟸</td><td>\Longleftarrow</td></tr><tr><td>⇑ \Uparrow ⇑</td><td>\Uparrow</td></tr><tr><td>⇓ \Downarrow ⇓</td><td>\Downarrow</td></tr><tr><td>⟹ \Longrightarrow ⟹</td><td>\Longrightarrow</td></tr><tr><td>⇔ \Leftrightarrow ⇔</td><td>\Leftrightarrow</td></tr><tr><td>⇕ \Updownarrow ⇕</td><td>\Updownarrow</td></tr><tr><td>↗ \nearrow ↗</td><td>\nearrow</td></tr><tr><td>↘ \searrow ↘</td><td>\searrow</td></tr><tr><td>↙ \swarrow ↙</td><td>\swarrow</td></tr><tr><td>↖ \nwarrow ↖</td><td>\nwarrow</td></tr><tr><td>↼ \leftharpoonup ↼</td><td>\leftharpoonup</td></tr><tr><td>⇀ \rightharpoonup ⇀</td><td>\rightharpoonup</td></tr><tr><td>↽ \leftharpoondown ↽</td><td>\leftharpoondown</td></tr><tr><td>⇁ \rightharpoondown ⇁</td><td>\rightharpoondown</td></tr><tr><td>⇌ \rightleftharpoons ⇌</td><td>\iff</td></tr></tbody></table></div><h2 id="3-公式"><a href="#3-公式" class="headerlink" title="3. 公式"></a>3. 公式</h2><div class="table-container"><table><thead><tr><th>功能</th><th>显示</th><th>语法</th></tr></thead><tbody><tr><td>上下标</td><td>f ( x ) = x 1 2 + x 2 2 f(x) = x_1^2 + {x}_{2}^{2} f(x)\=x12​+x22​</td><td><code>f(x) = x_1^2 + {x}_{2}^{2}</code></td></tr><tr><td>分数</td><td>a − 1 b − 1 \frac{a-1}{b-1} b−1a−1​</td><td><code>\frac{a-1}{b-1}</code></td></tr><tr><td>开方</td><td>2 3 n \sqrt{2} \quad \sqrt[n]{3} 2 ​n3 ​</td><td><code>\sqrt{2} \quad \sqrt[n]{3}</code></td></tr><tr><td>求和</td><td>∑ k = 1 N k 2 \sum_{k=1}^N k^2 k\=1∑N​k2</td><td><code>\sum_{k=1}^N k^2</code></td></tr><tr><td>求积</td><td>∏ i = 1 N x i \prod_{i=1}^N x_i i\=1∏N​xi​</td><td><code>\prod_{i=1}^N x_i</code></td></tr><tr><td>积分</td><td>∫ − N N e x   d x \int_{-N}^{N} e^x\, dx ∫−NN​exdx</td><td><code>\int_{-N}^{N} e^x\, dx</code></td></tr><tr><td>双重积分</td><td>∬ − N N e x   d x \iint_{-N}^{N} e^x\, dx ∬−NN​exdx</td><td><code>\iint_{-N}^{N} e^x\, dx</code></td></tr><tr><td>闭合曲线、曲面积分</td><td>∮ C x 3   d x + 4 y 2   d y \oint_{C} x^3\, dx + 4y^2\, dy ∮C​x3dx+4y2dy</td><td><code>\oint_{C} x^3\, dx + 4y^2\, dy</code></td></tr><tr><td>极限</td><td>lim ⁡ n → + ∞ 1 n ( n + 1 ) \lim_{n \to +\infty} \frac{1}{n(n+1)} n→+∞lim​n(n+1)1​</td><td><code>\lim_{n \to +\infty} \frac{1}{n(n+1)}</code></td></tr><tr><td>上括号</td><td>a + b + c ⏞ + d \overbrace{a+b+c}+d a+b+c ​+d</td><td><code>\overbrace{a+b+c}+d</code></td></tr><tr><td>下括号</td><td>a + b + c ⏟ + d \underbrace{a+b+c}+d a+b+c​+d</td><td><code>\overbrace{a+b+c}+d</code></td></tr><tr><td>上横线</td><td>a + b + c + d ‾ \overline{a+b+c+d} a+b+c+d​</td><td><code>\overline{a+b+c+d}</code></td></tr><tr><td>下横线</td><td>a + b + c + d ‾ \underline{a+b+c+d} a+b+c+d​</td><td><code>\underline{a+b+c+d}</code></td></tr><tr><td>箭头备注</td><td>→ f \xrightarrow{f} f ​</td><td><code>\xrightarrow{f}</code></td></tr><tr><td>上备注</td><td>\= d e f \overset{def}{=} \=def</td><td><code>\overset{def}{=}</code></td></tr><tr><td>下备注</td><td>m a x x ∈ S \underset{x\in S}{max} x∈Smax​</td><td><code>\underset{x\in S}{max}</code></td></tr><tr><td>省略号</td><td>\= x 1 2 + x 2 2 + ⋯ ⏟ n o t e 2 + x n 2 = x_1^2 + x_2^2 + \underbrace{\cdots}_{\rm note2} + x_n^2 \=x12​+x22​+note2 ⋯​​+xn2​</td><td><code>= x_1^2 + x_2^2 + \underbrace{\cdots}_{\rm note2} + x_n^2</code></td></tr></tbody></table></div><p><strong>矩阵</strong>：<br><code>\begin{bmatrix}x &amp; y \\z &amp; v\end{bmatrix}</code><br>[ x y z v ] \begin{bmatrix}x &amp; y \\z &amp; v\end{bmatrix} [xz​yv​]<br><code>\begin{vmatrix}x &amp; y \\z &amp; v \end{vmatrix}</code><br>∣ x y z v ∣ \begin{vmatrix} x &amp; y \\ z &amp; v \end{vmatrix} ∣ ∣​xz​yv​∣ ∣​<br><strong>条件定义</strong>：  </p><script type="math/tex; mode=display">f(n) = \begin{cases} n/2, & if \qquad n\geq 0 \\ 3n+1, & if \qquad n < 0 \end{cases}</script><p>f ( n ) = { n / 2 , i f n ≥ 0 3 n + 1 , i f n &lt; 0 f(n) = \begin{cases} n/2, &amp; if \qquad n\geq 0 \\ 3n+1, &amp; if \qquad n &lt; 0 \end{cases} f(n)\={n/2,3n+1,​ifn≥0ifn&lt;0​</p><h2 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a>4. 其他</h2><p><strong>公式中的空格</strong><br><strong><code>\;</code></strong>：空 1 / 4 1/4 1/4格<br><strong><code>\quad</code></strong>：空一格<br><strong><code>\qquad</code></strong>：空两格</p><p>例：<code>a \quad b \qquad c\;d</code><br>a b c    d a \quad b \qquad c\;d abcd</p><p><strong><code>&amp;nbsp;</code></strong>：不换行空格，全称是 No-Break Space，是按下space键产生的空格。<br><strong><code>&amp;ensp;</code></strong>：半角空格，全称是 En Space，en是字体排印学的计量单位，为em宽度的一半。根据定义，它等同于字体度的一半（如16px字体中就是8px）。名义上是小写字母n的宽度。此空格有个相当稳健的特性，就是其占据的宽度正好是1/2个中文宽度，且基本不受字体影响。<br><strong><code>&amp;emsp;</code></strong>：全角空格，全称是 Em Space，em是字体排印学的计量单位，相当于当前指定的点数（如1em在16px的字体中就是16px）。此空格也有个相当稳健的特性，就是其占据的宽度正好是1个中文宽度，且基本不受字体影响。</p><p><strong>公式编号</strong>： $$$ f(\boldsymbol x_i) = \boldsymbol w^T \boldsymbol x_i + b \tag {3}$$$<br>f ( x i ) = w T x i + b (3) f(\boldsymbol x_i) = \boldsymbol w^T \boldsymbol x_i + b \tag {3} f(xi​)\=wTxi​+b(3)</p><p><strong>转义字符</strong>：当某些特殊字符与Markdown语法冲突时，使用转义字符可以使字符强制显示。</p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-字母&quot;&gt;1. 字母&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#11-希腊字母&quot;&gt;1.1 希腊字母&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#12-数学模式重音符&quot;&gt;1.2 数学模式重音符&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#13-字体转换&quot;&gt;1.3 字体转换&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-关系符与运算符&quot;&gt;2. 关系符与运算符&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#21-二元关系符&quot;&gt;2.1 二元关系符&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#22-二元运算符&quot;&gt;2.2 二元运算符&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#23-其他符号&quot;&gt;2.3 其他符号&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3-公式&quot;&gt;3. 公式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4-其他&quot;&gt;4. 其他&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="解决方案" scheme="https://behappy00.github.io/categories/解决方案/"/>
    
    
    <category term="转载" scheme="https://behappy00.github.io/tags/转载/"/>
    
    <category term="markdown" scheme="https://behappy00.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Markdown mermaid种草(3)_ 流程图</title>
    <link href="https://behappy00.github.io/2023/10/02/Markdown-mermaid%E7%A7%8D%E8%8D%89-3-%E6%B5%81%E7%A8%8B%E5%9B%BE/"/>
    <id>https://behappy00.github.io/2023/10/02/Markdown-mermaid%E7%A7%8D%E8%8D%89-3-%E6%B5%81%E7%A8%8B%E5%9B%BE/</id>
    <published>2023-10-02T12:09:54.000Z</published>
    <updated>2023-10-03T04:36:46.947Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><a href="#1-流程图">1 流程图</a></li><li><a href="#2-绘制语法及参数">2 绘制语法及参数</a><ul><li><a href="#21-绘图方向">2.1 绘图方向</a></li><li><a href="#22-节点定义和形状">2.2 节点定义和形状</a></li><li><a href="#23-连接线及箭头">2.3 连接线及箭头</a><ul><li><a href="#231-连接线类型">2.3.1 连接线类型</a></li><li><a href="#232-多种类型的箭头">2.3.2 多种类型的箭头</a></li><li><a href="#233-连接线上的文字标注">2.3.3 连接线上的文字标注</a></li><li><a href="#234-改变连接线的长度">2.3.4 改变连接线的长度</a></li><li><a href="#235-多连接线">2.3.5 多连接线</a></li></ul></li><li><a href="#24-子图及子图连接">2.4 子图及子图连接</a></li><li><a href="#25-节点上的超链接">2.5 节点上的超链接</a></li><li><a href="#26-节点样式编辑">2.6 节点样式编辑</a></li></ul></li></ul><a id="more"></a><!-- TOC --><!-- /TOC --><hr><p>写在前面：</p><blockquote><p>如本文描述有错误，希望读到这篇文章的您能够提出批评指正。 联系方式：172310978@qq.com</p></blockquote><p>参考文章：</p><ol><li><a href="https://blog.csdn.net/horsee/article/details/113353413?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-1&amp;spm=1001.2101.3001.4242" target="_blank" rel="noopener">https://blog.csdn.net/horsee/article/details/113353413?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-1&amp;spm=1001.2101.3001.4242</a></li></ol><h3 id="1-流程图"><a href="#1-流程图" class="headerlink" title="1 流程图"></a>1 流程图</h3><p>​ 流程图经常用以描述业务流程，是产品经理和项目经理的最爱.</p><p>​ mermaid的流程图分为两种：graph和flowchart.</p><p>​ 这两者的使用方式大体是一致的. 所不同的是flowchart比graph应用了更多类型的箭头.</p><h3 id="2-绘制语法及参数"><a href="#2-绘制语法及参数" class="headerlink" title="2 绘制语法及参数"></a>2 绘制语法及参数</h3><h4 id="2-1-绘图方向"><a href="#2-1-绘图方向" class="headerlink" title="2.1 绘图方向"></a>2.1 绘图方向</h4><p>举例：以graph或flowchart关键字为开始，后面跟上的是流图的绘制方向；</p><p>接下来写的是<code>节点</code> <code>连接线</code> <code>节点</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">start ---&gt; stop</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/1.png" alt="在这里插入图片描述"></p><div class="table-container"><table><thead><tr><th style="text-align:center">编号</th><th style="text-align:center">绘图方向</th><th style="text-align:center">绘图代码</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">从上到下</td><td style="text-align:center">TD TB</td><td style="text-align:center">Top-Down/Top-Bottom</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">从左到右</td><td style="text-align:center">LR</td><td style="text-align:center">Left-Right</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">从右到左</td><td style="text-align:center">RL</td><td style="text-align:center">Right-Left</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">从下到上</td><td style="text-align:center">BT</td><td style="text-align:center">Bottom-Top</td></tr></tbody></table></div><blockquote><p>Tips: “从上到下”既可以是TD也可以是TB，但是“从下到上”只能是BT，真“变态”.</p></blockquote><h4 id="2-2-节点定义和形状"><a href="#2-2-节点定义和形状" class="headerlink" title="2.2 节点定义和形状"></a>2.2 节点定义和形状</h4><p>​ 从刚才那个例子里能够看出，节点的定义方法就是在graph/flowchart后面跟上“从节点到节点”的描述.此处节点可以按照上述的示例中，直接以变量的名称给出（此时图形上节点的内容将会和变量的名称保持一致）:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">节点1</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/2.png" alt="在这里插入图片描述"></p><p>​ 这种方式存在一个缺点，即节点如果被反复指向时，则需要反复书写变量的名称，因此也可以采用另一种方式：如下例所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id1[节点1]</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/3.png" alt="在这里插入图片描述"></p><p>​ 可以将长串的内容用方括号括起来，而用一个较短的变量名来指代节点.在下例中就能体现出这种节点定义方式的优点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">id1[名称非常非常长的节点1]</span><br><span class="line">id2[节点2]</span><br><span class="line">id3[节点3]</span><br><span class="line">id4[节点4]</span><br><span class="line">id5[节点5]</span><br><span class="line">id1 --&gt; id2</span><br><span class="line">id1 --&gt; id3</span><br><span class="line">id1 --&gt; id4</span><br><span class="line">id1 --&gt; id5</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/4.png" alt="在这里插入图片描述"></p><p>​ 节点的默认形状是直角矩形，mermaid提供了多种形状的节点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">id0[普通节点]</span><br><span class="line">id1&#123;菱形节点&#125;</span><br><span class="line">id2[/平行四边形节点/]</span><br><span class="line">id3[\反平行四边形节点\]</span><br><span class="line">id4[/正梯形节点\]</span><br><span class="line">id5[\反梯形节点/]</span><br><span class="line">id6((圆形节点))</span><br><span class="line">id7[(圆柱节点)]</span><br><span class="line">id8[[子流程节点]]</span><br><span class="line">id9&gt;不对称节点]</span><br><span class="line">id10 &#123;&#123;六边形节点&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/5.png" alt="在这里插入图片描述"></p><div class="table-container"><table><thead><tr><th style="text-align:center">编号</th><th style="text-align:center">节点形状</th><th style="text-align:center">编码</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">普通形状</td><td style="text-align:center">[]</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">菱形</td><td style="text-align:center">{}</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">正平行四边形</td><td style="text-align:center">[//]</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">反平行四边形</td><td style="text-align:center">[\\]</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">正梯形</td><td style="text-align:center">[/\]</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">反梯形</td><td style="text-align:center">[/]</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">圆形</td><td style="text-align:center">(())</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">圆柱形</td><td style="text-align:center">[()]</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">子流程（双线）</td><td style="text-align:center">[[]]</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">不对称</td><td style="text-align:center">&gt;]</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">六边形</td><td style="text-align:center">2个{和2个}</td></tr></tbody></table></div><p>​ 节点中的文字如果有特殊字符，例如括号，这些特殊字符会导致代码在解释时发生歧义，此时只需要把文本内容用双引号括起来即可避免问题的发生：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">id1[&quot;这是一个非常(特别)的文本&quot;]</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/6.png" alt="在这里插入图片描述"></p><h4 id="2-3-连接线及箭头"><a href="#2-3-连接线及箭头" class="headerlink" title="2.3 连接线及箭头"></a>2.3 连接线及箭头</h4><p>​ 接下来本小白带各位来学习一下连接线和箭头. 这里无非是线型、箭头型、粗细以及长度等等.</p><h5 id="2-3-1-连接线类型"><a href="#2-3-1-连接线类型" class="headerlink" title="2.3.1 连接线类型"></a>2.3.1 连接线类型</h5><p>​ 连接线类型包括：实线、虚线、加粗线、无箭头线等.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">id1 --&gt; id2</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/7.png" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">id1 -.-&gt; id2</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/8.png" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">id1 ==&gt; id2</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/9.png" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">id1 --- id2</span><br><span class="line">id1 -.- id3</span><br><span class="line">id1 === id4</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/10.png" alt="在这里插入图片描述"></p><h5 id="2-3-2-多种类型的箭头"><a href="#2-3-2-多种类型的箭头" class="headerlink" title="2.3.2 多种类型的箭头"></a>2.3.2 多种类型的箭头</h5><p>​ 想使用多种类型的箭头，需要使用flowchart替换graph.</p><p>普通箭头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">id1 --&gt; id2</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/11.png" alt="在这里插入图片描述"></p><p>球形箭头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">id1 --o id2</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/12.png" alt="在这里插入图片描述"></p><p>叉形箭头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">id1 --x id2</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/13.png" alt="在这里插入图片描述"></p><p>双向箭头</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">id1 &lt;--&gt; id2</span><br><span class="line">id3 o--o id4</span><br><span class="line">id5 x--x id6</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/14.png" alt="在这里插入图片描述"></p><blockquote><p>Tips: 双向箭头两边的箭头需要一致，目前测试mermaid还不支持混搭箭头.</p></blockquote><h5 id="2-3-3-连接线上的文字标注"><a href="#2-3-3-连接线上的文字标注" class="headerlink" title="2.3.3 连接线上的文字标注"></a>2.3.3 连接线上的文字标注</h5><p>​ 节点之间的连接线有时需要进行文字标注，对连接线进行文字标注有两种方式，一种是直接在连接线中间书写文字，另一种是以<code>||</code>将文字内容括住.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">id1 --yes--&gt; id2</span><br><span class="line">id2 --&gt;|no|id3</span><br><span class="line">id3 -. yes .-&gt; id4</span><br><span class="line">id4 -.-&gt;|no| id5</span><br><span class="line">id5 --yes--- id6</span><br><span class="line">id6 ---|no| id7</span><br><span class="line">id7 ==yes==&gt; id8</span><br><span class="line">id8 ==&gt;|no| id9</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/15.png" alt="在这里插入图片描述"></p><blockquote><p>Tips: 注意如果是纯连接线，则右侧要增加一条短线，去替换原本属于箭头的标识.</p></blockquote><h5 id="2-3-4-改变连接线的长度"><a href="#2-3-4-改变连接线的长度" class="headerlink" title="2.3.4 改变连接线的长度"></a>2.3.4 改变连接线的长度</h5><p>​ 以上讲述的部分，连接线的长度都是一致的，即最短长度，那么如果我们需要不同长度的时候，则只需要添加短划线的个数即可，若是虚线，则添加其中的点，若是粗线，则添加等于号：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">id1 --&gt; id2</span><br><span class="line">id1 ---&gt; id3</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/16.png" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">id1 -.- id2</span><br><span class="line">id1 -..- id3</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/17.png" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">flowchart LR</span><br><span class="line">id1 ==&gt; id2</span><br><span class="line">id1 ===&gt; id3</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/18.png" alt="在这里插入图片描述"></p><p>再来一个综合一点的例子作为此处的小结：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A[Start] --&gt; B&#123;Is it?&#125;;</span><br><span class="line">    B --&gt;|Yes| C[OK];</span><br><span class="line">    C --&gt; D[(Rethink)];</span><br><span class="line">    D --&gt; B;</span><br><span class="line">    B ----&gt;|No| E[End];</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/19.png" alt="在这里插入图片描述"></p><h5 id="2-3-5-多连接线"><a href="#2-3-5-多连接线" class="headerlink" title="2.3.5 多连接线"></a>2.3.5 多连接线</h5><p>​ 还有一种高级的用法，本小白目前也还没有完全参透，可以用简洁的方式把节点间的多连接关系直接表示出来：</p><p>串行多连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">   A -- text --&gt; B -- text2 --&gt; C</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/20.png" alt="在这里插入图片描述"></p><p>并行多连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">a --&gt; b &amp; c --&gt; d</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/21.png" alt="在这里插入图片描述"></p><p>网络多连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    A &amp; B--&gt; C &amp; D</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/22.png" alt="在这里插入图片描述"></p><h4 id="2-4-子图及子图连接"><a href="#2-4-子图及子图连接" class="headerlink" title="2.4 子图及子图连接"></a>2.4 子图及子图连接</h4><p>​ 流程有时候需要切分成子模块，此时需要用到子图和子图连接的概念.</p><p>​ 子图的标准写法如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subgraph title</span><br><span class="line">    graph definition</span><br><span class="line">end</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    c1--&gt;a2</span><br><span class="line">    subgraph one</span><br><span class="line">    a1--&gt;a2</span><br><span class="line">    end</span><br><span class="line">    subgraph two</span><br><span class="line">    b1--&gt;b2</span><br><span class="line">    end</span><br><span class="line">    subgraph three</span><br><span class="line">    c1--&gt;c2</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/23.png" alt="在这里插入图片描述"></p><p>​ 像节点一样，也可以使用id的方式给子图命名.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    c1--&gt;a2</span><br><span class="line">    subgraph ide1 [one]</span><br><span class="line">    a1--&gt;a2</span><br><span class="line">    end</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/24.png" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">flowchart TB</span><br><span class="line">    c1--&gt;a2</span><br><span class="line">    subgraph one</span><br><span class="line">    a1--&gt;a2</span><br><span class="line">    end</span><br><span class="line">    subgraph two</span><br><span class="line">    b1--&gt;b2</span><br><span class="line">    end</span><br><span class="line">    subgraph three</span><br><span class="line">    c1--&gt;c2</span><br><span class="line">    end</span><br><span class="line">    one --&gt; two</span><br><span class="line">    three --&gt; two</span><br><span class="line">    two --&gt; c2</span><br></pre></td></tr></table></figure><h4 id="2-5-节点上的超链接"><a href="#2-5-节点上的超链接" class="headerlink" title="2.5 节点上的超链接"></a>2.5 节点上的超链接</h4><p>​ 流程图中的节点可以添加超链接，这是一个高级的功能，对于markdown编辑器来说，仅支持部分语法，而更高阶的功能，因为本小白没有html的技能，所以在html中内嵌使用超链接的功能就先略过了，感兴趣的童鞋可以去<a href="https://mermaid-js.github.io/mermaid/#/flowchart?id=interaction" target="_blank" rel="noopener">mermaid官方页面</a>去学习.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    B--&gt;C;</span><br><span class="line">    click A &quot;http://www.github.com&quot; _blank</span><br><span class="line">    click B &quot;http://www.github.com&quot; &quot;Open this in a new tab&quot; _blank</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/25.png" alt="在这里插入图片描述"></p><h4 id="2-6-节点样式编辑"><a href="#2-6-节点样式编辑" class="headerlink" title="2.6 节点样式编辑"></a>2.6 节点样式编辑</h4><p>​ 节点除了形状可以进行修改以外，还可以对节点的颜色、边框的颜色和线型进行修改.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    id1(Start)--&gt;id2(Stop)</span><br><span class="line">    style id1 fill:#f9f,stroke:#333,stroke-width:4px</span><br><span class="line">    style id2 fill:#bbf,stroke:#f66,stroke-width:2px,color:#fff,stroke-dasharray: 5 5</span><br></pre></td></tr></table></figure><p><img src="/2023/10/02/Markdown-mermaid种草-3-流程图/26.png" alt="在这里插入图片描述"></p><p>​ 用一个style起头来引导对节点形状的设置语句.</p><p>​ 后面跟着的是节点的名称.</p><p>​ fill表示设置填充的颜色，#号后面引导16位RGB色阶标注，例如#f9f表明RGB通道是15，9，15.</p><p>​ stroke表示字体的设置，颜色标注方式和fill的表示方法一致.</p><p>​ stroke-width表示线框的粗细，px表示像素，color表示设置线框的颜色.</p><p>​ stroke-dasharray表示的是线框的虚线线型，用两个数来表示段落的划分数量.</p>]]></content>
    
    
    <summary type="html">&lt;hr&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1-流程图&quot;&gt;1 流程图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2-绘制语法及参数&quot;&gt;2 绘制语法及参数&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#21-绘图方向&quot;&gt;2.1 绘图方向&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#22-节点定义和形状&quot;&gt;2.2 节点定义和形状&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#23-连接线及箭头&quot;&gt;2.3 连接线及箭头&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#231-连接线类型&quot;&gt;2.3.1 连接线类型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#232-多种类型的箭头&quot;&gt;2.3.2 多种类型的箭头&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#233-连接线上的文字标注&quot;&gt;2.3.3 连接线上的文字标注&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#234-改变连接线的长度&quot;&gt;2.3.4 改变连接线的长度&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#235-多连接线&quot;&gt;2.3.5 多连接线&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#24-子图及子图连接&quot;&gt;2.4 子图及子图连接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#25-节点上的超链接&quot;&gt;2.5 节点上的超链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#26-节点样式编辑&quot;&gt;2.6 节点样式编辑&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="解决方案" scheme="https://behappy00.github.io/categories/解决方案/"/>
    
    
    <category term="转载" scheme="https://behappy00.github.io/tags/转载/"/>
    
    <category term="markdown" scheme="https://behappy00.github.io/tags/markdown/"/>
    
    <category term="流程图" scheme="https://behappy00.github.io/tags/流程图/"/>
    
  </entry>
  
</feed>
